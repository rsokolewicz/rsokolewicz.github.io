<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Roberts blog</title><link>https://www.robert-sokolewicz.nl/posts/</link><description>Recent content in Posts on Roberts blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.robert-sokolewicz.nl/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Structured outputs with OpenAI and Pydantic</title><link>https://www.robert-sokolewicz.nl/posts/28_structured_outputs_pydantic/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/28_structured_outputs_pydantic/</guid><description>The tutorials over at openAI are quite clear on how to use structured outputs. e.g. if we want a helper to perform an integral step by step, we can either use a &amp;ldquo;thinking model&amp;rdquo;, or use a regular model, but force the output be a list of steps:
from pydantic import BaseModel from textwrap import dedent from openai import OpenAI client = OpenAI() MODEL = &amp;#34;gpt-4o-mini&amp;#34; integral_solver_prompt = &amp;#34;&amp;#34;&amp;#34; You are a calculus expert capable of solving indefinite integrals step-by-step.</description><content>&lt;p>The tutorials over at openAI are quite clear on how to use structured outputs. e.g. if we want a helper to perform an integral step by step, we can either use a &amp;ldquo;thinking model&amp;rdquo;, or use a regular model, but force the output be a list of steps:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> pydantic &lt;span style="color:#f92672">import&lt;/span> BaseModel
&lt;span style="color:#f92672">from&lt;/span> textwrap &lt;span style="color:#f92672">import&lt;/span> dedent
&lt;span style="color:#f92672">from&lt;/span> openai &lt;span style="color:#f92672">import&lt;/span> OpenAI
client &lt;span style="color:#f92672">=&lt;/span> OpenAI()
MODEL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gpt-4o-mini&amp;#34;&lt;/span>
integral_solver_prompt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> You are a calculus expert capable of solving indefinite integrals
&lt;/span>&lt;span style="color:#e6db74"> step-by-step. Given an integral problem, provide a detailed solution
&lt;/span>&lt;span style="color:#e6db74"> including each integration step and the final answer. For each step, provide
&lt;/span>&lt;span style="color:#e6db74"> the mathematical expression and an explanation of the rule or technique
&lt;/span>&lt;span style="color:#e6db74"> used.
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IntegralSolution&lt;/span>(BaseModel):
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Step&lt;/span>(BaseModel):
explanation: str
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;A brief explanation of the step. Please use LaTeX for the
&lt;/span>&lt;span style="color:#e6db74"> mathematical expressions. use $..$ to enclose
&lt;/span>&lt;span style="color:#e6db74"> inline expressions and $$..$$ to enclose block expressions.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
expression: str
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> A mathematical step in LaTeX.
&lt;/span>&lt;span style="color:#e6db74"> e.g., &amp;#34;$$ \int_0^1{2x + 3} dx = \int_0^1{2x} dx + \int_0^1{3} dx $$&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
steps: list[Step]
final_answer: str
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> e.g., &amp;#34;$$x^2 + 3x + C$$&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solve_integral&lt;/span>(integral_problem: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> IntegralSolution:
completion &lt;span style="color:#f92672">=&lt;/span> client&lt;span style="color:#f92672">.&lt;/span>beta&lt;span style="color:#f92672">.&lt;/span>chat&lt;span style="color:#f92672">.&lt;/span>completions&lt;span style="color:#f92672">.&lt;/span>parse(
model&lt;span style="color:#f92672">=&lt;/span>MODEL,
messages&lt;span style="color:#f92672">=&lt;/span>[
{&lt;span style="color:#e6db74">&amp;#34;role&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;system&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>: dedent(integral_solver_prompt)},
{
&lt;span style="color:#e6db74">&amp;#34;role&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>: f&lt;span style="color:#e6db74">&amp;#34;Solve the following integral: {integral_problem}&amp;#34;&lt;/span>,
},
],
response_format&lt;span style="color:#f92672">=&lt;/span>IntegralSolution,
)
&lt;span style="color:#66d9ef">return&lt;/span> completion&lt;span style="color:#f92672">.&lt;/span>choices[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>message&lt;span style="color:#f92672">.&lt;/span>parsed
&lt;/code>&lt;/pre>&lt;/div>&lt;p>where we force the output to be a Pydantic model. Then, when asking&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">solve_integral(&lt;span style="color:#e6db74">&amp;#34;int[x^2 * sin(2x)dx] from 0 to 1&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>We will use integration by parts to solve the integral. The formula for integration by parts is ( \int u , dv = uv - \int v , du ). We choose ( u = x^2 ) and ( dv = \sin(2x) , dx ).&lt;/p>
&lt;p>u = x^2, , dv = \sin(2x) , dx.&lt;/p>
&lt;p>Next, we compute ( du ) and ( v ). The derivative of ( u ) gives us ( du = 2x , dx ). To find ( v ), we integrate ( dv ): ( v = -\frac{1}{2} \cos(2x) ).&lt;/p>
&lt;p>Now we apply the integration by parts formula: ( \int x^2 \sin(2x) , dx = uv - \int v , du ). Therefore, we have: ( -\frac{1}{2} x^2 \cos(2x) \Big|_0^1 + \frac{1}{2} \int 2x \cos(2x) , dx ).&lt;/p>
&lt;p>Next, we first evaluate the boundary term: Evaluate ( -\frac{1}{2} x^2 \cos(2x) ) at the limits (0) to (1): When ( x = 1 ): -\frac{1}{2} \cdot 1^2 \cdot \cos(2) ), and when ( x = 0 ): -0. Thus we have: -\frac{1}{2} \cos(2).&lt;/p>
&lt;p>Now we compute the remaining integral ( \int x \cos(2x) , dx ) using integration by parts again. Let ( u = x ) and ( dv = \cos(2x) , dx ). Then, we find ( du = dx ) and ( v = \frac{1}{2} \sin(2x) ).&lt;/p>
&lt;p>u = x, , dv = \cos(2x) , dx.
du = 2x , dx, , v = -\frac{1}{2} \cos(2x).&lt;/p>
&lt;p>Now we apply the integration by parts formula: ( \int x^2 \sin(2x) , dx = uv - \int v , du ). Therefore, we have: ( -\frac{1}{2} x^2 \cos(2x) \Big|_0^1 + \frac{1}{2} \int 2x \cos(2x) , dx ).&lt;/p>
&lt;p>Next, we first evaluate the boundary term: Evaluate ( -\frac{1}{2} x^2 \cos(2x) ) at the limits (0) to (1): When ( x = 1 ): -\frac{1}{2} \cdot 1^2 \cdot \cos(2) ), and when ( x = 0 ): -0. Thus we have: -\frac{1}{2} \cos(2).&lt;/p>
&lt;p>Now we apply the integration by parts formula: ( \int x^2 \sin(2x) , dx = uv - \int v , du ). Therefore, we have: ( -\frac{1}{2} x^2 \cos(2x) \Big|_0^1 + \frac{1}{2} \int 2x \cos(2x) , dx ).&lt;/p>
&lt;p>-\frac{1}{2} x^2 \cos(2x) \Big|_0^1 + \int x \cos(2x) , dx.&lt;/p>
&lt;p>Next, we first evaluate the boundary term: Evaluate ( -\frac{1}{2} x^2 \cos(2x) ) at the limits (0) to (1): When ( x = 1 ): -\frac{1}{2} \cdot 1^2 \cdot \cos(2) ), and when ( x = 0 ): -0. Thus we have: -\frac{1}{2} \cos(2).&lt;/p>
&lt;p>-\frac{1}{2} [1^2 \cos(2) - 0] = -\frac{1}{2} \cos(2).&lt;/p>
&lt;p>Now we compute the remaining integral ( \int x \cos(2x) , dx ) using integration by parts again. Let ( u = x ) and ( dv = \cos(2x) , dx ). Then, we find ( du = dx ) and ( v = \frac{1}{2} \sin(2x) ).&lt;/p>
&lt;p>u = x, , dv = \cos(2x) , dx.&lt;/p>
&lt;p>Using integration by parts, we get: ( \int x \cos(2x) , dx = \frac{1}{2} x \sin(2x) \Big|_0^1 - \frac{1}{2} \int \sin(2x) , dx. ) Now we have to compute ( \int \sin(2x) , dx = -\frac{1}{2} \cos(2x) ).&lt;/p>
&lt;p>= \frac{1}{2} x \sin(2x) \Big|_0^1 - \frac{1}{4} \cos(2x).&lt;/p>
&lt;p>Evaluate ( \frac{1}{2} x \sin(2x) ) from 0 to 1: When ( x = 1 ): ( \frac{1}{2} \cdot 1 \cdot \sin(2) ), when ( x = 0 ): 0. Thus we have: ( \frac{1}{2} \sin(2) + \frac{1}{4} \cos(2) ).&lt;/p>
&lt;p>= \frac{1}{2} \sin(2).&lt;/p>
&lt;p>Now assemblng everything, we have: Total integral = ( -\frac{1}{2} \cos(2) + \left( \frac{1}{2} \sin(2) - \frac{1}{4} \cos(2) \right) ).&lt;/p>
&lt;p>= -\frac{1}{2} \cos(2) + \frac{1}{2} \sin(2) - \frac{1}{4} \cos(2) = \frac{1}{2} \sin(2) - \frac{3}{4} \cos(2).&lt;/p>
&lt;p>Finally, we find the definite integral from 0 to 1, which gives us the answer as a function of sine and cosine values at x=2.&lt;/p>
&lt;p>Final result = \frac{1}{2} \sin(2) - \frac{3}{4} \cos(2).&lt;/p>
&lt;p>\frac{1}{2} \sin(2) - \frac{3}{4} \cos(2)&lt;/p>
&lt;/blockquote>
&lt;p>Apart from the fact that the answer is wrong (and somehow gpt-4o-mini miss-spelled the word &amp;ldquo;assemblng&amp;rdquo; lol), it ignored the instruction to use LaTeX!&lt;/p>
&lt;p>turns out, that under the hood openAI creates a json schema from the Pydantic model, but the docstrings of each field are not included. big ugh. Luckily, we can use the &lt;code>Field&lt;/code> class together with descriptions to pass the relevant instructions to the model:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IntegralSolution&lt;/span>(BaseModel):
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Step&lt;/span>(BaseModel):
explanation: str &lt;span style="color:#f92672">=&lt;/span> Field(
description&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> A brief explanation of the step. Please use LaTeX for the
&lt;/span>&lt;span style="color:#e6db74"> mathematical expressions. use $..$ to enclose
&lt;/span>&lt;span style="color:#e6db74"> inline expressions and $$..$$ to enclose block expressions.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
expression: str &lt;span style="color:#f92672">=&lt;/span> Field(
description&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> A mathematical step in LaTeX.
&lt;/span>&lt;span style="color:#e6db74"> e.g., &amp;#34;$$ \int_0^1{2x + 3} dx = \int_0^1{2x} dx + \int_0^1{3} dx $$&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
steps: list[Step]
final_answer: str &lt;span style="color:#f92672">=&lt;/span> Field(
description&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> e.g., &amp;#34;$$x^2 + 3x + C$$&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and when trying it out one more time:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">output &lt;span style="color:#f92672">=&lt;/span> solve_integral(&lt;span style="color:#e6db74">&amp;#34;int[x^2 * sin(2x)dx] from 0 to 1&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>We need to solve the integral $$\int_0^1 x^2 \sin(2x) , dx$$. To do this, we will use integration by parts, which is suitable for products of functions like $x^2$ and $\sin(2x)$. The formula for integration by parts is given by $$\int u , dv = uv - \int v , du.$$&lt;/p>
&lt;p>We choose our $u$ and $dv$ for integration by parts. Let $$u = x^2$$, then $$du = 2x , dx$$. For $$dv = \sin(2x) , dx$$, we integrate to find $$v$$. The integral of $\sin(2x)$ is $$v = -\frac{1}{2} \cos(2x)$$.&lt;/p>
&lt;p>Now we apply the integration by parts formula that was stated earlier. We will calculate $$uv$$ at the bounds of the integral and substitute it back into our equation.&lt;/p>
&lt;p>Evaluating the first part, we find the boundary values: when $x=1$, $$-\frac{1}{2} \cdot 1^2 \cdot \cos(2) = -\frac{1}{2} \cos(2)$$ and when $x=0$, it becomes $0$. Therefore, the evaluation gives us: $$-\frac{1}{2} \cos(2) - 0 = -\frac{1}{2} \cos(2).$$&lt;/p>
&lt;p>Now we need to compute the remaining integral: $$\int_0^1 x \cos(2x) , dx$$. We apply integration by parts again. Let $$u = x$$ (hence $$du = dx$$) and $$dv = \cos(2x) , dx$$ (thus $$v = \frac{1}{2} \sin(2x)$$).&lt;/p>
&lt;p>Evaluating the boundary terms $$\left[ \frac{1}{2} x \sin(2x) \right]_0^1$$, we have when $x=1$, it equals $$\frac{1}{2} \sin(2)$$ and when $x=0$, it equals $0$. Thus we have: $$\frac{1}{2} \sin(2)$$.&lt;/p>
&lt;p>Now we need to compute the integral $$-\int_0^1 \frac{1}{2} \sin(2x) , dx$$. The integral of $\sin(2x)$ is $$-\frac{1}{2} \cos(2x)$$ hence: $$-\frac{1}{2} \left[-\frac{1}{2} \cos(2x) \right]_0^1 = -\frac{1}{4}[\cos(2) - 1].$$&lt;/p>
&lt;p>Now combining all parts, from integration by parts, we have: $$I = -\frac{1}{2} \cos(2) + \frac{1}{2} \sin(2) + \frac{1}{4}[ ext{1} - \cos(2)].$$ This simplifies to: $$-\frac{1}{2} \cos(2) + \frac{1}{2} \sin(2) + \frac{1}{4} - \frac{1}{4} \cos(2)$$.&lt;/p>
&lt;p>Thus we have our final answer for the integral $$\int_0^1 x^2 \sin(2x) , dx$$.&lt;/p>
&lt;p>$$I = -\frac{3}{4} \cos(2) + \frac{1}{2} \sin(2) + \frac{1}{4}$$&lt;/p>
&lt;/blockquote>
&lt;p>much better! In the last step it messed up with the minus signs, $-\frac{1}{2} \left[-\frac{1}{2} \cos(2x) \right]_0^1$ where $-\times-=+$ not $-$, and apart from the oververbose explanation, it&amp;rsquo;s good :)&lt;/p></content></item><item><title>Creating custom VSCode tasks</title><link>https://www.robert-sokolewicz.nl/posts/27_vscode_tasks/</link><pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/27_vscode_tasks/</guid><description>For this blog I&amp;rsquo;m using a plugin to display citations called hugo-cite (Citation: Brassard,&amp;#32;2020Brassard,&amp;#32; L. &amp;#32; (2020). &amp;#32;Hugo-cite. &amp;#32;Retrieved from&amp;#32; https://github.com/loup-brun/hugo-cite ). Unfortunately, this requires the citations to be stored in a CSL-JSON format, while most of the time I only have bibtex files. Converting one into the other is not so difficult (I have a script for that), but it gets boring to do this manually often. Just like all editors/IDE&amp;rsquo;s, VSCode has a way to simplify this process using tasks.</description><content>&lt;p>For this blog I&amp;rsquo;m using a plugin to display citations called hugo-cite
&lt;span class="hugo-cite-intext"
itemprop="citation">(&lt;span class="hugo-cite-group">
&lt;a href="#hugo-cite">&lt;span class="visually-hidden">Citation: &lt;/span>&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;meta itemprop="givenName" content="Louis-Olivier">&lt;span itemprop="familyName">Brassard&lt;/span>&lt;/span>,&amp;#32;&lt;span itemprop="datePublished">2020&lt;/span>&lt;/a>&lt;span class="hugo-cite-citation">
&lt;span itemscope
itemtype="https://schema.org/CreativeWork"
data-type="default">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Brassard&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Louis-Olivier" />
L.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2020&lt;/span>).
&amp;#32;&lt;span itemprop="name">
&lt;i>Hugo-cite&lt;/i>&lt;/span>.
&amp;#32;Retrieved from&amp;#32;
&lt;a href="https://github.com/loup-brun/hugo-cite"
itemprop="identifier"
itemtype="https://schema.org/URL">https://github.com/loup-brun/hugo-cite&lt;/a>&lt;/span>
&lt;/span>&lt;/span>)&lt;/span>. Unfortunately, this requires the citations to be stored in a CSL-JSON format, while most of the time I only have bibtex files. Converting one into the other is not so difficult (I have a script for that), but it gets boring to do this manually often. Just like all editors/IDE&amp;rsquo;s, VSCode has a way to simplify this process using tasks.&lt;/p>
&lt;p>From the command palette (Ctrl+Shift+P), I can now select &amp;ldquo;Tasks: Run Task&amp;rdquo; and then &amp;ldquo;Convert BibTeX to JSON&amp;rdquo;, to convert the bibtex file that I have open into a JSON file. To setup it is quite easy.&lt;/p>
&lt;h1 id="setup">setup&lt;/h1>
&lt;ol>
&lt;li>Open the command palette (Ctrl+Shift+P)&lt;/li>
&lt;li>Select &amp;ldquo;Tasks: Configure Task&amp;rdquo;&lt;/li>
&lt;li>Select &amp;ldquo;Create task.json file&amp;rdquo;&lt;/li>
&lt;li>Select &amp;ldquo;Others&amp;rdquo;&lt;/li>
&lt;li>Create the file&lt;/li>
&lt;/ol>
&lt;p>the file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2.0.0&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;tasks&amp;#34;&lt;/span>: [
{
&lt;span style="color:#f92672">&amp;#34;label&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Convert BibTeX to JSON&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;shell&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;command&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;./bib2json.sh&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;args&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;${input:bibFile}&amp;#34;&lt;/span>],
&lt;span style="color:#f92672">&amp;#34;group&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;build&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;problemMatcher&amp;#34;&lt;/span>: []
}
],
&lt;span style="color:#f92672">&amp;#34;inputs&amp;#34;&lt;/span>: [
{
&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bibFile&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;BibTeX file to convert:&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;default&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;${file}&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;promptString&amp;#34;&lt;/span>
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and in case anyone is interested in the script:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$#&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -ne &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Usage: ./bib2json.sh &amp;lt;path-to-bib-file&amp;gt;&amp;#34;&lt;/span>
exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
BIB_FILE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -f &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$BIB_FILE&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Error: File not found - &lt;/span>$BIB_FILE&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> ! command -v pandoc &amp;amp;&amp;gt; /dev/null; &lt;span style="color:#66d9ef">then&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Error: pandoc is not installed. Please install it first.&amp;#34;&lt;/span>
exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
OUTPUT_FILE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>BIB_FILE%.*&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.json&amp;#34;&lt;/span>
pandoc --from&lt;span style="color:#f92672">=&lt;/span>bibtex --to&lt;span style="color:#f92672">=&lt;/span>csljson -o &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$OUTPUT_FILE&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$BIB_FILE&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> $? -eq &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Conversion successful! JSON file saved at: &lt;/span>$OUTPUT_FILE&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Error: Conversion failed.&amp;#34;&lt;/span>
exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which requires the &lt;code>pandoc&lt;/code> package to be installed. (on Mac: &lt;code>brew install pandoc&lt;/code>).&lt;/p>
&lt;h1 id="bibliography">bibliography&lt;/h1>
&lt;section class="hugo-cite-bibliography">
&lt;dl>
&lt;div id="hugo-cite">
&lt;dt>
Brassard
(2020)&lt;/dt>
&lt;dd>
&lt;span itemscope
itemtype="https://schema.org/CreativeWork"
data-type="default">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Brassard&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Louis-Olivier" />
L.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2020&lt;/span>).
&amp;#32;&lt;span itemprop="name">
&lt;i>Hugo-cite&lt;/i>&lt;/span>.
&amp;#32;Retrieved from&amp;#32;
&lt;a href="https://github.com/loup-brun/hugo-cite"
itemprop="identifier"
itemtype="https://schema.org/URL">https://github.com/loup-brun/hugo-cite&lt;/a>&lt;/span>
&lt;/dd>
&lt;/div>
&lt;/dl>
&lt;/section></content></item><item><title>Custom matplotlib styles</title><link>https://www.robert-sokolewicz.nl/posts/26_matplotlib_styles/</link><pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/26_matplotlib_styles/</guid><description>Creating custom matplotlib styles is apparently super easy! For this blog I gathered all the matplotlib parameters and added them to a file called orange_dark.mplstyle. You&amp;rsquo;re supposed to put this inside the .matplotlib folder in your home directory, but for some reason that didn&amp;rsquo;t work out for me, so I put it inside the root of this blog folder and refer to it with a full path.
Now, if I want to make a simple plot, I can just do this:</description><content>&lt;p>Creating custom matplotlib styles is apparently super easy! For this blog I gathered all the matplotlib parameters and added them to a file called &lt;code>orange_dark.mplstyle&lt;/code>. You&amp;rsquo;re supposed to put this inside the &lt;code>.matplotlib&lt;/code> folder in your home directory, but for some reason that didn&amp;rsquo;t work out for me, so I put it inside the root of this blog folder and refer to it with a full path.&lt;/p>
&lt;p>Now, if I want to make a simple plot, I can just do this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#f92672">as&lt;/span> plt
&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#f92672">as&lt;/span> np
&lt;span style="color:#f92672">from&lt;/span> dotenv &lt;span style="color:#f92672">import&lt;/span> find_dotenv
&lt;span style="color:#f92672">import&lt;/span> os
ROOT &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>dirname(find_dotenv())
plt&lt;span style="color:#f92672">.&lt;/span>style&lt;span style="color:#f92672">.&lt;/span>use(f&lt;span style="color:#e6db74">&amp;#39;{ROOT}/orange_dark.mplstyle&amp;#39;&lt;/span>)
x &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>linspace(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>)
y &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sin(x)
plt&lt;span style="color:#f92672">.&lt;/span>plot(x, y)
plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/code>&lt;/pre>&lt;/div>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="hello.svg"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>The contents of the &lt;code>orange_dark.mplstyle&lt;/code> file are:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#75715e"># Using dark background as base&lt;/span>
&lt;span style="color:#66d9ef">axes.facecolor&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#222129&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">figure.facecolor&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#222129&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">savefig.facecolor&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#222129&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Main orange color scheme&lt;/span>
&lt;span style="color:#66d9ef">axes.prop_cycle&lt;/span>: cycler(&lt;span style="color:#e6db74">&amp;#39;color&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;&amp;#34;#ffa86a&amp;#34;&amp;#39;&lt;/span>])
&lt;span style="color:#66d9ef">text.color&lt;/span>: white
&lt;span style="color:#66d9ef">axes.labelcolor&lt;/span>: white
&lt;span style="color:#66d9ef">xtick.color&lt;/span>: white
&lt;span style="color:#66d9ef">ytick.color&lt;/span>: white
&lt;span style="color:#66d9ef">grid.color&lt;/span>: white
&lt;span style="color:#66d9ef">grid.alpha&lt;/span>: &lt;span style="color:#ae81ff">0.3&lt;/span>
&lt;span style="color:#66d9ef">axes.edgecolor&lt;/span>: white
&lt;span style="color:#75715e"># Legend&lt;/span>
&lt;span style="color:#66d9ef">legend.facecolor&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#222129&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">legend.edgecolor&lt;/span>: white
&lt;span style="color:#66d9ef">legend.labelcolor&lt;/span>: white
&lt;span style="color:#75715e"># Font&lt;/span>
&lt;span style="color:#66d9ef">font.family&lt;/span>: FiraCode Nerd Font
&lt;span style="color:#66d9ef">font.size&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#66d9ef">axes.titlesize&lt;/span>: &lt;span style="color:#ae81ff">12&lt;/span>
&lt;span style="color:#66d9ef">axes.labelsize&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#66d9ef">xtick.labelsize&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#66d9ef">ytick.labelsize&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#66d9ef">legend.fontsize&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finding and registering the font was a bit of a hassle. I basically had to find the font on my laptop, and run&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> matplotlib.font_manager &lt;span style="color:#f92672">as&lt;/span> fm
fm&lt;span style="color:#f92672">.&lt;/span>fontManager&lt;span style="color:#f92672">.&lt;/span>addfont(
&lt;span style="color:#e6db74">&amp;#34;/Users/rsoko/Library/Fonts/FiraCodeNerdFont-Regular.ttf&amp;#34;&lt;/span>
)
fm&lt;span style="color:#f92672">.&lt;/span>_load_fontmanager(try_read_cache&lt;span style="color:#f92672">=&lt;/span>False)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>to register it. Then to find the font family name, I ran&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> matplotlib.font_manager &lt;span style="color:#f92672">as&lt;/span> fm
available_fonts &lt;span style="color:#f92672">=&lt;/span> [font&lt;span style="color:#f92672">.&lt;/span>name &lt;span style="color:#66d9ef">for&lt;/span> font &lt;span style="color:#f92672">in&lt;/span> fm&lt;span style="color:#f92672">.&lt;/span>fontManager&lt;span style="color:#f92672">.&lt;/span>ttflist]
[name &lt;span style="color:#66d9ef">for&lt;/span> name &lt;span style="color:#f92672">in&lt;/span> available_fonts &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fira&amp;#34;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> name&lt;span style="color:#f92672">.&lt;/span>lower()]
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Is hype all you need?</title><link>https://www.robert-sokolewicz.nl/posts/25_hype_all_you_need/</link><pubDate>Sat, 25 Jan 2025 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/25_hype_all_you_need/</guid><description>The last decade saw a few AI scientific breakthroughs that enabled the whole AI development to boom. For example, realizing that AI thrives on large amounts of data and GPUs (see e.g. (Citation: Vaswani,&amp;#32;2017Vaswani,&amp;#32; A. &amp;#32; (2017). &amp;#32;Attention is all you need. Advances in Neural Information Processing Systems. )). Large language models had the problem for a long time that they were difficult to train, because (1) they couldn&amp;rsquo;t be trained properly on GPUs, and they suffered from something called catastrophic forgetting.</description><content>&lt;p>The last decade saw a few AI scientific breakthroughs that enabled the whole AI development to boom. For example, realizing that AI thrives on large amounts of data and GPUs (see e.g.
&lt;span class="hugo-cite-intext"
itemprop="citation">(&lt;span class="hugo-cite-group">
&lt;a href="#vaswani2017attention">&lt;span class="visually-hidden">Citation: &lt;/span>&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;meta itemprop="givenName" content="A">&lt;span itemprop="familyName">Vaswani&lt;/span>&lt;/span>,&amp;#32;&lt;span itemprop="datePublished">2017&lt;/span>&lt;/a>&lt;span class="hugo-cite-citation">
&lt;span itemscope
itemtype="https://schema.org/Article"
data-type="article">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Vaswani&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="A" />
A.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2017&lt;/span>).
&amp;#32;&lt;span itemprop="name">Attention is all you need&lt;/span>.&lt;i>
&lt;span itemprop="about">Advances in Neural Information Processing Systems&lt;/span>&lt;/i>.&lt;/span>
&lt;/span>&lt;/span>)&lt;/span>). Large language models had the problem for a long time that they were difficult to train, because (1) they couldn&amp;rsquo;t be trained properly on GPUs, and they suffered from something called catastrophic forgetting. But then in 2017, the &lt;em>Attention is All you Need&lt;/em> paper
&lt;span class="hugo-cite-intext"
itemprop="citation">(&lt;span class="hugo-cite-group">
&lt;a href="#vaswani2017attention">&lt;span class="visually-hidden">Citation: &lt;/span>&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;meta itemprop="givenName" content="A">&lt;span itemprop="familyName">Vaswani&lt;/span>&lt;/span>,&amp;#32;&lt;span itemprop="datePublished">2017&lt;/span>&lt;/a>&lt;span class="hugo-cite-citation">
&lt;span itemscope
itemtype="https://schema.org/Article"
data-type="article">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Vaswani&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="A" />
A.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2017&lt;/span>).
&amp;#32;&lt;span itemprop="name">Attention is all you need&lt;/span>.&lt;i>
&lt;span itemprop="about">Advances in Neural Information Processing Systems&lt;/span>&lt;/i>.&lt;/span>
&lt;/span>&lt;/span>)&lt;/span> solved these two problems and within a few years we saw the development of chatGPT and similar large language models.&lt;/p>
&lt;p>The &lt;em>Attention is all you need&lt;/em> paper sits with over 100,000 citations which is a lot&lt;span class="hugo-footnote-intext">&lt;sup class="footnote-ref" onclick="showFootnote(event, 1 )">(1)&lt;/sup>&lt;span class="footnote" id="footnote-1">back in 2014, Nature released a &lt;a href="https://www.nature.com/news/the-top-100-papers-1.16224">top 100 cited papers of all time list&lt;/a>, with only three papers with more than 100k citations&lt;a href="#" class="footnote-close" onclick="hideFootnote( 1 )" aria-label="Close footnote">×&lt;/a>&lt;/span>&lt;/span>
&lt;style>
.hugo-footnote-intext {
white-space: normal;
}
.footnote-ref {
color: var(--accent);
cursor: pointer;
}
.footnote {
display: none;
position: absolute;
max-width: 300px;
padding: 1em;
border-radius: 4px;
box-shadow: 0 2px 10px rgba(0,0,0,0.1);
font-size: 0.9em;
color: #707070;
z-index: 1000;
white-space: normal;
line-height: 1.4;
word-wrap: break-word;
right: -350px;
}
.footnote.active {
display: block;
}
.footnote-close {
position: absolute;
top: 5px;
right: 5px;
text-decoration: none;
color: #666;
}
.footnote-close:hover {
color: #333;
}
.post {
position: relative;
}
&lt;/style>
&lt;script>
function showFootnote(event, id) {
event.preventDefault();
document.querySelectorAll('.footnote.active').forEach(note => {
note.classList.remove('active');
});
const footnote = document.getElementById(`footnote-${id}`);
const link = event.target;
const linkRect = link.getBoundingClientRect();
footnote.style.top = `${linkRect.top - link.closest('.post').getBoundingClientRect().top}px`;
footnote.classList.add('active');
document.addEventListener('click', function closeFootnote(e) {
if (!footnote.contains(e.target) &amp;&amp; !link.contains(e.target)) {
footnote.classList.remove('active');
document.removeEventListener('click', closeFootnote);
}
});
}
function hideFootnote(id) {
const footnote = document.getElementById(`footnote-${id}`);
footnote.classList.remove('active');
}
&lt;/script>.&lt;/p>
&lt;p>I noticed recently that more and more computer science papers have similar titles, while the ones that I opened were not particularly groundbreaking. It&amp;rsquo;s even worse on LinkedIn, where some of these articles are shared as if they are the next big thing, while they are really not. The titles are crafted to grab attention and make us readers feel like we are missing out on the &amp;ldquo;next wave&amp;rdquo; in AI research. That made me wonder, if there&amp;rsquo;s really a trend going on and whether it is more hype than anything else.&lt;/p>
&lt;p>So I wanted to do some statistical analysis on recent research papers to see if there really is a trend of using the phrase &amp;ldquo;is all you need&amp;rdquo; in the title, and if it makes the paper more likely to be cited.&lt;/p>
&lt;p>My first approach was to go to Google Scholar and search for &amp;ldquo;is all you need&amp;rdquo;, but that gave me over 100,000 results, without the ability to download all the results. A quick search led me to the &lt;a href="https://www.semanticscholar.org/">Semantic Scholar&lt;/a> website, which is a database of over 200 million research papers that is constantly being updated. They also have a simple API that allows you to get all the data you need.&lt;/p>
&lt;p>Before showing the code, let&amp;rsquo;s show the results first:&lt;/p>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="image.svg"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>In chronological order, we have the first three papers:&lt;/p>
&lt;ol>
&lt;li>A little flexibility is all you need: on the asymptotic value of flexible capacity in parallel queuing systems
&lt;span class="hugo-cite-intext"
itemprop="citation">(&lt;span class="hugo-cite-group">
&lt;a href="#bassamboo2012little">&lt;span class="visually-hidden">Citation: &lt;/span>&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;meta itemprop="givenName" content="Achal">&lt;span itemprop="familyName">Bassamboo&lt;/span>&lt;/span>&amp;#32;
&lt;em>&amp;amp; al.&lt;/em>,&amp;#32;&lt;span itemprop="datePublished">2012&lt;/span>&lt;/a>&lt;span class="hugo-cite-citation">
&lt;span itemscope
itemtype="https://schema.org/Article"
data-type="article">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Bassamboo&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Achal" />
A.&lt;/span>,&amp;#32;
&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Randhawa&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Ramandeep S" />
R.&lt;/span>&amp;#32;&amp;amp;&amp;#32;&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Mieghem&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Jan A Van" />
J.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2012&lt;/span>).
&amp;#32;&lt;span itemprop="name">A little flexibility is all you need: On the asymptotic value of flexible capacity in parallel queuing systems&lt;/span>.&lt;i>
&lt;span itemprop="about">Operations Research&lt;/span>,&amp;#32;60(6)&lt;/i>.&amp;#32;&lt;span itemprop="pagination">1423–1435&lt;/span>.&lt;/span>
&lt;/span>&lt;/span>)&lt;/span>&lt;/li>
&lt;li>When virtual contact is all you need: Subtle reminders of Facebook preempt social-contact restoration after exclusion
&lt;span class="hugo-cite-intext"
itemprop="citation">(&lt;span class="hugo-cite-group">
&lt;a href="#https%2f%2fdoi.org%2f10.1002%2fejsp.2035">&lt;span class="visually-hidden">Citation: &lt;/span>&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;meta itemprop="givenName" content="Judith">&lt;span itemprop="familyName">Knausenberger&lt;/span>&lt;/span>&amp;#32;
&lt;em>&amp;amp; al.&lt;/em>,&amp;#32;&lt;span itemprop="datePublished">2015&lt;/span>&lt;/a>&lt;span class="hugo-cite-citation">
&lt;span itemscope
itemtype="https://schema.org/Article"
data-type="article">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Knausenberger&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Judith" />
J.&lt;/span>,&amp;#32;
&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Hellmann&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Jens H." />
J.&lt;/span>&amp;#32;&amp;amp;&amp;#32;&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Echterhoff&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Gerald" />
G.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2015&lt;/span>).
&amp;#32;&lt;span itemprop="name">When virtual contact is all you need: Subtle reminders of facebook preempt social-contact restoration after exclusion&lt;/span>.&lt;i>
&lt;span itemprop="about">European Journal of Social Psychology&lt;/span>,&amp;#32;45(3)&lt;/i>.&amp;#32;&lt;span itemprop="pagination">279–284&lt;/span>.
&lt;a href="https://doi.org/https://doi.org/10.1002/ejsp.2035"
itemprop="identifier"
itemtype="https://schema.org/URL">https://doi.org/https://doi.org/10.1002/ejsp.2035&lt;/a>&lt;/span>
&lt;/span>&lt;/span>)&lt;/span>&lt;/li>
&lt;li>Attention is all you need
&lt;span class="hugo-cite-intext"
itemprop="citation">(&lt;span class="hugo-cite-group">
&lt;a href="#vaswani2017attention">&lt;span class="visually-hidden">Citation: &lt;/span>&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;meta itemprop="givenName" content="A">&lt;span itemprop="familyName">Vaswani&lt;/span>&lt;/span>,&amp;#32;&lt;span itemprop="datePublished">2017&lt;/span>&lt;/a>&lt;span class="hugo-cite-citation">
&lt;span itemscope
itemtype="https://schema.org/Article"
data-type="article">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Vaswani&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="A" />
A.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2017&lt;/span>).
&amp;#32;&lt;span itemprop="name">Attention is all you need&lt;/span>.&lt;i>
&lt;span itemprop="about">Advances in Neural Information Processing Systems&lt;/span>&lt;/i>.&lt;/span>
&lt;/span>&lt;/span>)&lt;/span>&lt;/li>
&lt;/ol>
&lt;p>after which the trend skyrockets. The &lt;em>Attention is all you need&lt;/em> paper has over 100,000 citations, which is significantly higher than the other papers.&lt;/p>
&lt;p>Next I was interested in the number of citations for each paper. Unfortunately, the distribution is very skewed, so it&amp;rsquo;s a bit difficult to visualize. Combining a simple jitter plot together with a quantile plot, we have&lt;/p>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="image4.svg"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>so we see for example that about 75% of the papers have at least 1 citation, and 25% have at least 10 citations.&lt;/p>
&lt;p>Maybe a bar chart is a bit clearer:&lt;/p>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="image2.svg"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>So only a third of the papers have 5 or more citations, which is not a great start for being &amp;ldquo;all you need&amp;rdquo;. We should realize however that:&lt;/p>
&lt;ol>
&lt;li>It takes time to get noticed and the majority of papers were published less than a year ago.&lt;/li>
&lt;li>The number of citations is not always a good indicator of the quality of the paper.&lt;/li>
&lt;/ol>
&lt;p>What I wanted to try next is compare the number of citations to the &amp;ldquo;average&amp;rdquo; number of citations for an arbitrary paper in the same year. But unfortunately, with the public API I can only perform query searches and the returned results are ranked by relevance. This will introduce a strong bias towards higher cited papers, so that the analysis will fail.&lt;/p>
&lt;p>I could request an API key that will allow me to download the metadata of the entire 200 million paper database, so maybe I will do that another time :)&lt;/p>
&lt;hr>
&lt;p>This article was co-written with Lan Chu and a version was also published on &lt;a href="https://ai-stories.io/blog/hype-in-ai-research/">the AI stories website&lt;/a>.&lt;/p>
&lt;h1 id="code">Code&lt;/h1>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> requests
&lt;span style="color:#f92672">from&lt;/span> tqdm &lt;span style="color:#f92672">import&lt;/span> tqdm
&lt;span style="color:#f92672">import&lt;/span> time
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">search_semantic_scholar&lt;/span>(query: str, year: int, field_of_study: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> list:
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Search Semantic Scholar API for papers in a specific year and field
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
base_url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;https://api.semanticscholar.org/graph/v1/paper/search&amp;#34;&lt;/span>
all_papers &lt;span style="color:#f92672">=&lt;/span> []
offset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
limit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#66d9ef">with&lt;/span> tqdm(desc&lt;span style="color:#f92672">=&lt;/span>f&lt;span style="color:#e6db74">&amp;#34;Fetching papers for {year}&amp;#34;&lt;/span>, unit&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;batch&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> pbar:
&lt;span style="color:#66d9ef">while&lt;/span> True:
params &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#e6db74">&amp;#34;query&amp;#34;&lt;/span>: query,
&lt;span style="color:#e6db74">&amp;#34;fields&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;title,publicationDate,citationCount,url,year&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;limit&amp;#34;&lt;/span>: limit,
&lt;span style="color:#e6db74">&amp;#34;offset&amp;#34;&lt;/span>: offset,
&lt;span style="color:#e6db74">&amp;#34;year&amp;#34;&lt;/span>: str(year),
&lt;span style="color:#e6db74">&amp;#34;fieldsOfStudy&amp;#34;&lt;/span>: field_of_study,
}
&lt;span style="color:#66d9ef">while&lt;/span> True:
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(base_url, params&lt;span style="color:#f92672">=&lt;/span>params)
&lt;span style="color:#66d9ef">if&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>status_code &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">429&lt;/span>:
time&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">10&lt;/span>)
&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>status_code &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span>:
&lt;span style="color:#66d9ef">break&lt;/span>
&lt;span style="color:#66d9ef">break&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>status_code &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span>:
&lt;span style="color:#66d9ef">break&lt;/span>
data &lt;span style="color:#f92672">=&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>json()
batch_papers &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;data&amp;#34;&lt;/span>, [])
all_papers&lt;span style="color:#f92672">.&lt;/span>extend(batch_papers)
pbar&lt;span style="color:#f92672">.&lt;/span>update(len(batch_papers))
pbar&lt;span style="color:#f92672">.&lt;/span>set_description(f&lt;span style="color:#e6db74">&amp;#34;Year {year}: {len(all_papers)} papers&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> len(batch_papers) &lt;span style="color:#f92672">&amp;lt;&lt;/span> limit:
&lt;span style="color:#66d9ef">break&lt;/span>
offset &lt;span style="color:#f92672">+=&lt;/span> limit
&lt;span style="color:#66d9ef">return&lt;/span> all_papers
query &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#34;is all you need&amp;#34;&amp;#39;&lt;/span>
field_of_study &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Computer Science&amp;#34;&lt;/span>
years &lt;span style="color:#f92672">=&lt;/span> range(&lt;span style="color:#ae81ff">2010&lt;/span>, &lt;span style="color:#ae81ff">2026&lt;/span>)
papers &lt;span style="color:#f92672">=&lt;/span> [
search_semantic_scholar(query, year, field_of_study) &lt;span style="color:#66d9ef">for&lt;/span> year &lt;span style="color:#f92672">in&lt;/span> years
]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are a few limitations that we needed to work around:&lt;/p>
&lt;ol>
&lt;li>Each request returns at most 100 papers, but we can pass the &amp;ldquo;offset&amp;rdquo; parameter, to get the next batch of papers.&lt;/li>
&lt;li>A maximum of 1000 papers can be returned from a unique query. So I searched per year for a specific field of study (computer science), and then combined the results.&lt;/li>
&lt;li>The public API has a rate limit of 1000 requests per second (shared globally with other users), so occasionally you&amp;rsquo;ll be hit with the 429 HTTP error code (&amp;ldquo;Too Many Requests&amp;rdquo;). So I added a 10 second wait together with a while loop to keep retrying until success.&lt;/li>
&lt;li>Some of results had missing publication dates (about 100), so I removed them.&lt;/li>
&lt;/ol>
&lt;p>The whole thing runs for about a minute.&lt;/p>
&lt;h1 id="bibliography">Bibliography&lt;/h1>
&lt;section class="hugo-cite-bibliography">
&lt;dl>
&lt;div id="bassamboo2012little">
&lt;dt>
Bassamboo,&amp;#32;
Randhawa&amp;#32;&amp;amp;&amp;#32;Mieghem
(2012)&lt;/dt>
&lt;dd>
&lt;span itemscope
itemtype="https://schema.org/Article"
data-type="article">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Bassamboo&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Achal" />
A.&lt;/span>,&amp;#32;
&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Randhawa&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Ramandeep S" />
R.&lt;/span>&amp;#32;&amp;amp;&amp;#32;&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Mieghem&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Jan A Van" />
J.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2012&lt;/span>).
&amp;#32;&lt;span itemprop="name">A little flexibility is all you need: On the asymptotic value of flexible capacity in parallel queuing systems&lt;/span>.&lt;i>
&lt;span itemprop="about">Operations Research&lt;/span>,&amp;#32;60(6)&lt;/i>.&amp;#32;&lt;span itemprop="pagination">1423–1435&lt;/span>.&lt;/span>
&lt;/dd>
&lt;/div>
&lt;div id="https//doi.org/10.1002/ejsp.2035">
&lt;dt>
Knausenberger,&amp;#32;
Hellmann&amp;#32;&amp;amp;&amp;#32;Echterhoff
(2015)&lt;/dt>
&lt;dd>
&lt;span itemscope
itemtype="https://schema.org/Article"
data-type="article">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Knausenberger&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Judith" />
J.&lt;/span>,&amp;#32;
&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Hellmann&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Jens H." />
J.&lt;/span>&amp;#32;&amp;amp;&amp;#32;&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Echterhoff&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Gerald" />
G.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2015&lt;/span>).
&amp;#32;&lt;span itemprop="name">When virtual contact is all you need: Subtle reminders of facebook preempt social-contact restoration after exclusion&lt;/span>.&lt;i>
&lt;span itemprop="about">European Journal of Social Psychology&lt;/span>,&amp;#32;45(3)&lt;/i>.&amp;#32;&lt;span itemprop="pagination">279–284&lt;/span>.
&lt;a href="https://doi.org/https://doi.org/10.1002/ejsp.2035"
itemprop="identifier"
itemtype="https://schema.org/URL">https://doi.org/https://doi.org/10.1002/ejsp.2035&lt;/a>&lt;/span>
&lt;/dd>
&lt;/div>
&lt;div id="vaswani2017attention">
&lt;dt>
Vaswani
(2017)&lt;/dt>
&lt;dd>
&lt;span itemscope
itemtype="https://schema.org/Article"
data-type="article">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Vaswani&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="A" />
A.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2017&lt;/span>).
&amp;#32;&lt;span itemprop="name">Attention is all you need&lt;/span>.&lt;i>
&lt;span itemprop="about">Advances in Neural Information Processing Systems&lt;/span>&lt;/i>.&lt;/span>
&lt;/dd>
&lt;/div>
&lt;div id="krizhevsky2017imagenet">
&lt;dt>
Krizhevsky,&amp;#32;
Sutskever&amp;#32;&amp;amp;&amp;#32;Hinton
(2017)&lt;/dt>
&lt;dd>
&lt;span itemscope
itemtype="https://schema.org/Article"
data-type="article">&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Krizhevsky&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Alex" />
A.&lt;/span>,&amp;#32;
&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Sutskever&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Ilya" />
I.&lt;/span>&amp;#32;&amp;amp;&amp;#32;&lt;span itemprop="author" itemscope itemtype="https://schema.org/Person">&lt;span itemprop="familyName">Hinton&lt;/span>,&amp;#32;
&lt;meta itemprop="givenName" content="Geoffrey E" />
G.&lt;/span>
&amp;#32;
(&lt;span itemprop="datePublished">2017&lt;/span>).
&amp;#32;&lt;span itemprop="name">ImageNet classification with deep convolutional neural networks&lt;/span>.&lt;i>
&lt;span itemprop="about">Communications of the ACM&lt;/span>,&amp;#32;60(6)&lt;/i>.&amp;#32;&lt;span itemprop="pagination">84–90&lt;/span>.&lt;/span>
&lt;/dd>
&lt;/div>
&lt;/dl>
&lt;/section></content></item><item><title>profiling time and memory using pytest</title><link>https://www.robert-sokolewicz.nl/posts/24_pytest_benchmark/</link><pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/24_pytest_benchmark/</guid><description>I was reading about a new benchmarking framework for quantum control software called Benchpress. Looking through the code, it seems to be built upon the benchmark plugin for pytest. If you want to quickly benchmark your code, it&amp;rsquo;s quite easy to do with pytest-benchmark.
Running benchmark If you know a bit about pytest, it&amp;rsquo;s actually very easy to add some benchmarking to your tests by just using the benchmark fixture. Suppose we have these two functions:</description><content>&lt;p>I was reading about a new benchmarking framework for quantum control software called &lt;a href="https://github.com/qiskit/benchpress">Benchpress&lt;/a>. Looking through the code, it seems to be built upon the &lt;code>benchmark&lt;/code> plugin for &lt;code>pytest&lt;/code>. If you want to quickly benchmark your code, it&amp;rsquo;s quite easy to do with &lt;code>pytest-benchmark&lt;/code>.&lt;/p>
&lt;h2 id="running-benchmark">Running benchmark&lt;/h2>
&lt;p>If you know a bit about pytest, it&amp;rsquo;s actually very easy to add some benchmarking to your tests by just using the &lt;code>benchmark&lt;/code> fixture. Suppose we have these two functions:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fibonacci_recursive&lt;/span>(n):
&lt;span style="color:#66d9ef">if&lt;/span> n &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> n
&lt;span style="color:#66d9ef">return&lt;/span> fibonacci_recursive(n &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> fibonacci_recursive(n &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fibonacci_iterative&lt;/span>(n):
&lt;span style="color:#66d9ef">if&lt;/span> n &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> n
a, b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">2&lt;/span>, n &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>):
a, b &lt;span style="color:#f92672">=&lt;/span> b, a &lt;span style="color:#f92672">+&lt;/span> b
&lt;span style="color:#66d9ef">return&lt;/span> b
&lt;/code>&lt;/pre>&lt;/div>&lt;p>that we would like to test and benchmark. We can do this by just adding a &lt;code>benchmark&lt;/code> fixture to our test function:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> pytest
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_fibonacci_recursive&lt;/span>(benchmark):
result &lt;span style="color:#f92672">=&lt;/span> benchmark(fibonacci_recursive, &lt;span style="color:#ae81ff">30&lt;/span>)
&lt;span style="color:#66d9ef">assert&lt;/span> result &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">832040&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_fibonacci_iterative&lt;/span>(benchmark):
result &lt;span style="color:#f92672">=&lt;/span> benchmark(fibonacci_iterative, &lt;span style="color:#ae81ff">30&lt;/span>)
&lt;span style="color:#66d9ef">assert&lt;/span> result &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">832040&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then after installing the &lt;code>pytest-benchmark&lt;/code> package, we can run our tests with the &lt;code>pytest --benchmark-enable&lt;/code> flag.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pytest --benchmark-enable tests/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will run the tests and print out the results in a nice table.&lt;/p>
&lt;pre>&lt;code>
---------------------------------------------------------------------------------------------------------------- benchmark: 2 tests ---------------------------------------------------------------------------------------------------------------
Name (time in ns) Min Max Mean StdDev Median IQR Outliers OPS Rounds Iterations
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test_fibonacci_iterative 387.8466 (1.0) 7,455.1521 (1.0) 435.0220 (1.0) 33.3827 (1.0) 435.9217 (1.0) 6.4655 (1.0) 4121;31660 2,298,734.2926 (1.0) 181819 13
test_fibonacci_recursive 60,989,416.0298 (&amp;gt;1000.0) 65,767,124.9937 (&amp;gt;1000.0) 63,742,859.3145 (&amp;gt;1000.0) 1,336,402.2177 (&amp;gt;1000.0) 63,621,042.0053 (&amp;gt;1000.0) 1,510,000.5257 (&amp;gt;1000.0) 5;0 15.6880 (0.00) 16 1
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Legend:
Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.
OPS: Operations Per Second, computed as 1 / Mean
============================================================================================= 2 passed in 3.33s =============================================================================================
&lt;/code>&lt;/pre>&lt;p>(the enable flag will keep it enabled forever, until you disable it with &lt;code>--benchmark-disable&lt;/code>)&lt;/p>
&lt;p>Surprisingly, the recursive version is about 15,000 times slower than the iterative version. This is because the recursive version has to call the function itself, which in python is more expensive than looping and adding two numbers (today I learned&amp;hellip; lol).&lt;/p>
&lt;h2 id="comparing-results">Comparing results&lt;/h2>
&lt;p>With &lt;code>pytest-benchmark&lt;/code>, you can compare results to previous runs by using the &lt;code>--benchmark-save&lt;/code> and &lt;code>--benchmark-compare&lt;/code> flags.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># run and save results&lt;/span>
pytest --benchmark-save&lt;span style="color:#f92672">=&lt;/span>baseline tests/
&lt;span style="color:#75715e"># make changes, run and compare&lt;/span>
pytest --benchmark-compare&lt;span style="color:#f92672">=&lt;/span>baseline tests/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which is convenient if you want to compare the effects of some refactor work:&lt;/p>
&lt;pre>&lt;code>------------------------------------------------------------------------------------------------------------------------ benchmark: 4 tests ------------------------------------------------------------------------------------------------------------------------
Name (time in ns) Min Max Mean StdDev Median IQR Outliers OPS Rounds Iterations
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test_fibonacci_iterative (NOW) 392.3293 (1.0) 6,972.2494 (1.91) 435.3606 (1.0) 31.0298 (1.03) 437.4985 (1.0) 6.9995 (1.0) 8191;37003 2,296,946.3097 (1.0) 198334 12
test_fibonacci_iterative (0002_baselin) 395.8315 (1.01) 3,645.8320 (1.0) 440.7425 (1.01) 30.2541 (1.0) 441.0006 (1.01) 6.9995 (1.0) 11175;30137 2,268,898.7304 (0.99) 196697 12
test_fibonacci_recursive (NOW) 62,625,999.9699 (&amp;gt;1000.0) 67,687,292.0012 (&amp;gt;1000.0) 65,359,044.3762 (&amp;gt;1000.0) 1,253,637.0277 (&amp;gt;1000.0) 65,587,125.0201 (&amp;gt;1000.0) 1,420,166.4890 (&amp;gt;1000.0) 4;0 15.3001 (0.00) 16 1
test_fibonacci_recursive (0002_baselin) 63,488,584.0118 (&amp;gt;1000.0) 66,528,582.9455 (&amp;gt;1000.0) 65,248,984.4360 (&amp;gt;1000.0) 910,938.2318 (&amp;gt;1000.0) 65,386,229.0201 (&amp;gt;1000.0) 1,530,999.4924 (&amp;gt;1000.0) 5;0 15.3259 (0.00) 16 1
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Legend:
Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.
OPS: Operations Per Second, computed as 1 / Mean
============================================================================================= 2 passed in 3.38s =============================================================================================
&lt;/code>&lt;/pre>&lt;p>So seemingly, I made the iterative version slower. oops.&lt;/p>
&lt;h2 id="visualizing-results">Visualizing results&lt;/h2>
&lt;p>I don&amp;rsquo;t recommend this, but there&amp;rsquo;s a &lt;code>--benchmark-histogram&lt;/code> flag to create a very simple histogram of the results and save that as an svg:&lt;/p>
&lt;figure class="center"
style="width: 90%; margin: 0 auto;" >
&lt;img src="hist.svg.svg"
width="90%"
style="opacity: 0.8;"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>which is nice for a quick look at the results, but frankly: it&amp;rsquo;s ugly :D&lt;/p>
&lt;p>Alternatively, you can use matplotlib to make a much nicer plot:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> json
&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#f92672">as&lt;/span> plt
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">compare_benchmarks&lt;/span>(
baseline_file: str, refactor_file: str
) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> tuple[plt&lt;span style="color:#f92672">.&lt;/span>Figure, plt&lt;span style="color:#f92672">.&lt;/span>Axes]:
&lt;span style="color:#66d9ef">with&lt;/span> open(baseline_file, &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
baseline_data &lt;span style="color:#f92672">=&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>load(f)
&lt;span style="color:#66d9ef">with&lt;/span> open(refactor_file, &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
refactor_data &lt;span style="color:#f92672">=&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>load(f)
baseline_dict &lt;span style="color:#f92672">=&lt;/span> {b[&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>]: b[&lt;span style="color:#e6db74">&amp;#34;stats&amp;#34;&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;mean&amp;#34;&lt;/span>] &lt;span style="color:#66d9ef">for&lt;/span> b &lt;span style="color:#f92672">in&lt;/span> baseline_data[&lt;span style="color:#e6db74">&amp;#34;benchmarks&amp;#34;&lt;/span>]}
refactor_dict &lt;span style="color:#f92672">=&lt;/span> {b[&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>]: b[&lt;span style="color:#e6db74">&amp;#34;stats&amp;#34;&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;mean&amp;#34;&lt;/span>] &lt;span style="color:#66d9ef">for&lt;/span> b &lt;span style="color:#f92672">in&lt;/span> refactor_data[&lt;span style="color:#e6db74">&amp;#34;benchmarks&amp;#34;&lt;/span>]}
all_names &lt;span style="color:#f92672">=&lt;/span> sorted(set(baseline_dict&lt;span style="color:#f92672">.&lt;/span>keys()) &lt;span style="color:#f92672">|&lt;/span> set(refactor_dict&lt;span style="color:#f92672">.&lt;/span>keys()))
means_baseline &lt;span style="color:#f92672">=&lt;/span> [baseline_dict&lt;span style="color:#f92672">.&lt;/span>get(name, &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> name &lt;span style="color:#f92672">in&lt;/span> all_names]
means_refactor &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0.2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> refactor_dict&lt;span style="color:#f92672">.&lt;/span>get(name, &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> name &lt;span style="color:#f92672">in&lt;/span> all_names]
y &lt;span style="color:#f92672">=&lt;/span> range(len(all_names))
width &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.35&lt;/span>
fig, ax &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>subplots(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>, max(&lt;span style="color:#ae81ff">8&lt;/span>, len(all_names) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0.3&lt;/span>)))
ax&lt;span style="color:#f92672">.&lt;/span>barh([i &lt;span style="color:#f92672">-&lt;/span> width &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> y], means_baseline, width, label&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Baseline&amp;#34;&lt;/span>)
ax&lt;span style="color:#f92672">.&lt;/span>barh([i &lt;span style="color:#f92672">+&lt;/span> width &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> y], means_refactor, width, label&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Refactor&amp;#34;&lt;/span>)
ax&lt;span style="color:#f92672">.&lt;/span>set_xscale(&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>)
ax&lt;span style="color:#f92672">.&lt;/span>set_xlabel(&lt;span style="color:#e6db74">&amp;#34;Mean Time (seconds) - Log Scale&amp;#34;&lt;/span>)
ax&lt;span style="color:#f92672">.&lt;/span>set_yticks(y)
ax&lt;span style="color:#f92672">.&lt;/span>set_yticklabels(all_names)
ax&lt;span style="color:#f92672">.&lt;/span>legend()
ax&lt;span style="color:#f92672">.&lt;/span>grid(True, which&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;both&amp;#34;&lt;/span>, ls&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, alpha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.2&lt;/span>)
plt&lt;span style="color:#f92672">.&lt;/span>tight_layout()
&lt;span style="color:#66d9ef">return&lt;/span> fig, ax
plt&lt;span style="color:#f92672">.&lt;/span>style&lt;span style="color:#f92672">.&lt;/span>use(&lt;span style="color:#e6db74">&amp;#34;dark_background&amp;#34;&lt;/span>)
fig, ax &lt;span style="color:#f92672">=&lt;/span> compare_benchmarks(
&lt;span style="color:#e6db74">&amp;#34;.benchmarks/Darwin-CPython-3.11-64bit/0001_baseline.json&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;.benchmarks/Darwin-CPython-3.11-64bit/0003_refactor.json&amp;#34;&lt;/span>,
)
plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/code>&lt;/pre>&lt;/div>
&lt;figure class="center"
style="width: 90%; margin: 0 auto;" >
&lt;img src="image-1.png"
width="90%"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>because the results are saved in a json file inside the .benchmarks folder.&lt;/p>
&lt;h3 id="memory-profiling">memory profiling&lt;/h3>
&lt;p>One last thing I want to mention is that there is a similar plugin called &lt;code>pytest-memray&lt;/code> that can be used to do memory profiling.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pytest --memray tests/
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>=============================================================================================== MEMRAY REPORT ===============================================================================================
Allocation results for rsokolewicz.github.io/content/posts/24_pytest_benchmark/benchpress.py::test_fibonacci_iterative at the high watermark
📦 Total memory allocated: 6.4MiB
📏 Total allocations: 2
📊 Histogram of allocation sizes: |█ |
🥇 Biggest allocating functions:
- fibonacci_iterative:/Users/rsoko/Documents/private/rsokolewicz.github.io/content/posts/24_pytest_benchmark/benchpress.py:15 -&amp;gt; 5.0MiB
- update:/Users/rsoko/miniforge3/envs/dev/lib/python3.11/site-packages/pytest_benchmark/stats.py:45 -&amp;gt; 1.4MiB
Allocation results for rsokolewicz.github.io/content/posts/24_pytest_benchmark/benchpress.py::test_fibonacci_recursive at the high watermark
📦 Total memory allocated: 3.5KiB
📏 Total allocations: 4
📊 Histogram of allocation sizes: |█ ▄|
🥇 Biggest allocating functions:
- _raw:/Users/rsoko/miniforge3/envs/dev/lib/python3.11/site-packages/pytest_benchmark/fixture.py:180 -&amp;gt; 1.2KiB
- __call__:/Users/rsoko/miniforge3/envs/dev/lib/python3.11/site-packages/pytest_benchmark/fixture.py:156 -&amp;gt; 1.1KiB
- _calibrate_timer:/Users/rsoko/miniforge3/envs/dev/lib/python3.11/site-packages/pytest_benchmark/fixture.py:318 -&amp;gt; 586.0B
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>This post was co-written with &lt;a href="https://huonglanchu.medium.com/">Lan Chu&lt;/a>.&lt;/p></content></item><item><title>Keeping secrets secret</title><link>https://www.robert-sokolewicz.nl/posts/21_secrets/</link><pubDate>Sat, 28 Dec 2024 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/21_secrets/</guid><description>Managing secrets with python-dotenv Managing secrets with streamlit Preventing secrets from showing up in print and logging Autocompleting secrets Preventing commiting secrets to git using git guardian Managing secrets with python-dotenv Now that I&amp;rsquo;m working more often with third party APIs, I need to manage and store API keys. Normally I would add them to my .bashrc or similar, but this is becoming cumbersome when you have for example different OpenAI keys for different projects.</description><content>&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#managing-secrets-with-python-dotenv">Managing secrets with &lt;code>python-dotenv&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#managing-secrets-with-streamlit">Managing secrets with &lt;code>streamlit&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#preventing-secrets-from-showing-up-in-print-and-logging">Preventing secrets from showing up in &lt;code>print&lt;/code> and &lt;code>logging&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#autocompleting-secrets">Autocompleting secrets&lt;/a>&lt;/li>
&lt;li>&lt;a href="#preventing-commiting-secrets-to-git-using-git-guardian">Preventing commiting secrets to git using git guardian&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="managing-secrets-with-python-dotenv">Managing secrets with &lt;code>python-dotenv&lt;/code>&lt;/h2>
&lt;p>Now that I&amp;rsquo;m working more often with third party APIs, I need to manage and store API keys. Normally I would add them to my &lt;code>.bashrc&lt;/code> or similar, but this is becoming cumbersome when you have for example different OpenAI keys for different projects. It&amp;rsquo;s much nicer to save them inside each project and use something like &lt;code>python-dotenv&lt;/code> to load them into the environment.&lt;/p>
&lt;p>A &lt;code>.env&lt;/code> file could look like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">OPENAI_API_KEY=sk-proj-zGoKFui76yo-kwqXx_...
GOOGLE_CLOUD_CREDENTIALS=...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and then the following will load the variables into your environment:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> dotenv &lt;span style="color:#f92672">import&lt;/span> load_dotenv
load_dotenv()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and if you want to override an existing environmental variable, you can do so by setting the &lt;code>override=True&lt;/code> flag:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">load_dotenv(override&lt;span style="color:#f92672">=&lt;/span>True)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The exact format is not important, so all of the following is equivalent:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">OPENAI_API_KEY&lt;span style="color:#f92672">=&lt;/span>sk&lt;span style="color:#f92672">-...&lt;/span>
OPENAI_API_KEY &lt;span style="color:#f92672">=&lt;/span> sk&lt;span style="color:#f92672">-...&lt;/span>
OPENAI_API_KEY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;sk-...&amp;#34;&lt;/span>
OPENAI_API_KEY sk&lt;span style="color:#f92672">-...&lt;/span>
OPENAI_API_KEY &lt;span style="color:#e6db74">&amp;#34;sk-...&amp;#34;&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="managing-secrets-with-streamlit">Managing secrets with &lt;code>streamlit&lt;/code>&lt;/h2>
&lt;p>When using streamlit, you can instead use &lt;code>st.secrets&lt;/code> to load secrets from the &lt;code>.streamlit/secrets.toml&lt;/code> file. This is a bit more secure than using &lt;code>st.secrets&lt;/code> as it&amp;rsquo;s not stored in the &lt;code>.streamlit&lt;/code> folder, but instead in the &lt;code>.streamlit/secrets.toml&lt;/code> file.&lt;/p>
&lt;p>One benefit over using &lt;code>python-dotenv&lt;/code> is that you can grab a collection of secrets in a json format. This is useful when using Google Cloud credentials:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#75715e"># .streamlit/secrets.toml&lt;/span>
[&lt;span style="color:#a6e22e">google_cloud_credentials&lt;/span>]
&lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;service_account&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">project_id&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;my-project&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">private_key_id&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">private_key&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">client_email&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">client_id&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and then you can easily load it into your streamlit app:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> streamlit &lt;span style="color:#f92672">as&lt;/span> st
&lt;span style="color:#f92672">from&lt;/span> google.cloud &lt;span style="color:#f92672">import&lt;/span> storage
&lt;span style="color:#f92672">from&lt;/span> google.oauth2 &lt;span style="color:#f92672">import&lt;/span> service_account
credentials &lt;span style="color:#f92672">=&lt;/span> service_account&lt;span style="color:#f92672">.&lt;/span>Credentials&lt;span style="color:#f92672">.&lt;/span>from_service_account_info(
st&lt;span style="color:#f92672">.&lt;/span>secrets[&lt;span style="color:#e6db74">&amp;#34;google_cloud_credentials&amp;#34;&lt;/span>]
)
storage_client &lt;span style="color:#f92672">=&lt;/span> storage&lt;span style="color:#f92672">.&lt;/span>Client(
credentials&lt;span style="color:#f92672">=&lt;/span>credentials,
project&lt;span style="color:#f92672">=&lt;/span>st&lt;span style="color:#f92672">.&lt;/span>secrets[&lt;span style="color:#e6db74">&amp;#34;google_cloud_credentials&amp;#34;&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;project_id&amp;#34;&lt;/span>],
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="preventing-secrets-from-showing-up-in-print-and-logging">Preventing secrets from showing up in &lt;code>print&lt;/code> and &lt;code>logging&lt;/code>&lt;/h2>
&lt;p>Sometimes API keys are accidentally leaked in prints, logs or error messages. Using &lt;code>Pydantic.SecretStr&lt;/code>, you can easily prevent this from happening:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> pydantic &lt;span style="color:#f92672">import&lt;/span> SecretStr
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyModel&lt;/span>(BaseModel):
api_key: SecretStr
model &lt;span style="color:#f92672">=&lt;/span> MyModel(api_key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;sk-abc123&amp;#34;&lt;/span>)
model
&lt;span style="color:#75715e"># displays &amp;#34;MyModel(api_key=SecretStr(&amp;#39;**********&amp;#39;))&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and in case you really need to access the secret, you can do so by calling &lt;code>get_secret_value()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">secret &lt;span style="color:#f92672">=&lt;/span> model&lt;span style="color:#f92672">.&lt;/span>api_key&lt;span style="color:#f92672">.&lt;/span>get_secret_value()
&lt;span style="color:#66d9ef">print&lt;/span>(secret)
&lt;span style="color:#75715e"># displays &amp;#34;sk-abc123&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="autocompleting-secrets">Autocompleting secrets&lt;/h2>
&lt;p>I often test code in a notebook before adding it to the codebase, and because secrets are dynamic (rather than static), autocomplete doesn&amp;rsquo;t work right out of the box. So I wrote a small convenience function to help me out with this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># secrets.py&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> os
&lt;span style="color:#f92672">from&lt;/span> dotenv &lt;span style="color:#f92672">import&lt;/span> load_dotenv
&lt;span style="color:#f92672">from&lt;/span> pydantic &lt;span style="color:#f92672">import&lt;/span> SecretStr
load_dotenv(override&lt;span style="color:#f92672">=&lt;/span>True)
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Secrets&lt;/span>:
&lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
object&lt;span style="color:#f92672">.&lt;/span>__setattr__(self, &lt;span style="color:#e6db74">&amp;#34;_env_vars&amp;#34;&lt;/span>, dict(os&lt;span style="color:#f92672">.&lt;/span>environ))
&lt;span style="color:#66d9ef">def&lt;/span> __getattribute__(self, name: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> SecretStr:
&lt;span style="color:#66d9ef">if&lt;/span> name &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;_env_vars&amp;#34;&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> object&lt;span style="color:#f92672">.&lt;/span>__getattribute__(self, name)
secret &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>getenv(name)
&lt;span style="color:#66d9ef">if&lt;/span> secret &lt;span style="color:#f92672">is&lt;/span> None:
&lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>(f&lt;span style="color:#e6db74">&amp;#34;Secret &amp;#39;{name}&amp;#39; not found in environment variables&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> SecretStr(secret)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__dir__&lt;/span>(self) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> list[str]:
&lt;span style="color:#66d9ef">return&lt;/span> list(object&lt;span style="color:#f92672">.&lt;/span>__getattribute__(self, &lt;span style="color:#e6db74">&amp;#34;_env_vars&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>keys())
secrets &lt;span style="color:#f92672">=&lt;/span> Secrets()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then when importing &lt;code>secrets&lt;/code> from the &lt;code>secrets&lt;/code> module, you get autocomplete for all the secrets in your environment:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> secrets &lt;span style="color:#f92672">import&lt;/span> secrets
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="image.png" alt="alt text">&lt;/p>
&lt;p>(here cursor is actually correct, but often it has the right idea, but doesn&amp;rsquo;t predict the exact name). Then I can easily select the secret that I want to use. I had some problems with recursive behavior when replacing the &lt;code>__getattribute__&lt;/code> method, but that was fixed by replacing &lt;code>self&lt;/code> with &lt;code>object&lt;/code> in some locations and checking for the existence of the &lt;code>_env_vars&lt;/code> attribute :)&lt;/p>
&lt;p>Last thing that I want to mention, I&amp;rsquo;m listing everything from &lt;code>os.environ&lt;/code>, but you can easily change it to only list things from &lt;code>.env&lt;/code> for example, by using &lt;code>dotenv_values()&lt;/code> in the &lt;code>__init__&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># secrets.py&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> os
&lt;span style="color:#f92672">from&lt;/span> dotenv &lt;span style="color:#f92672">import&lt;/span> load_dotenv, dotenv_values
&lt;span style="color:#f92672">from&lt;/span> pydantic &lt;span style="color:#f92672">import&lt;/span> SecretStr
load_dotenv(override&lt;span style="color:#f92672">=&lt;/span>True)
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Secrets&lt;/span>:
&lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
object&lt;span style="color:#f92672">.&lt;/span>__setattr__(self, &lt;span style="color:#e6db74">&amp;#34;_env_vars&amp;#34;&lt;/span>, dotenv_values())
&lt;span style="color:#66d9ef">def&lt;/span> __getattribute__(self, name: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> SecretStr:
&lt;span style="color:#66d9ef">if&lt;/span> name &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;_env_vars&amp;#34;&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> object&lt;span style="color:#f92672">.&lt;/span>__getattribute__(self, name)
secret &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>getenv(name)
&lt;span style="color:#66d9ef">if&lt;/span> secret &lt;span style="color:#f92672">is&lt;/span> None:
&lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>(f&lt;span style="color:#e6db74">&amp;#34;Secret &amp;#39;{name}&amp;#39; not found in environment variables&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> SecretStr(secret)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__dir__&lt;/span>(self) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> list[str]:
&lt;span style="color:#66d9ef">return&lt;/span> list(object&lt;span style="color:#f92672">.&lt;/span>__getattribute__(self, &lt;span style="color:#e6db74">&amp;#34;_env_vars&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>keys())
secrets &lt;span style="color:#f92672">=&lt;/span> Secrets()
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="preventing-commiting-secrets-to-git-using-git-guardian">Preventing commiting secrets to git using git guardian&lt;/h2>
&lt;p>There are a few tools out there that you can install with a git-commit hook to prevent secrets from being committed to git. The last one I tried was &lt;a href="https://www.gitguardian.com/">git-guardian&lt;/a>, which also allows you to scan your git history for secrets. Pretty cool! There&amp;rsquo;s also a web interface and when connecting your github account they will even send you an email if you accidentally push a secret :')&lt;/p>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="image-1.png"
style="opacity: 0.7;"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>You can install it globally either with &lt;code>brew&lt;/code> or &lt;code>pipx&lt;/code> (which is like pip, but it will install it so that it&amp;rsquo;s always available (practically speaking)).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">pipx install ggshield
&lt;span style="color:#75715e"># or&lt;/span>
brew install gitguardian/tap/ggshield
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you autenticate once using&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">ggshield auth login
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which will ask you to login with your git guardian account in a browser.&lt;/p>
&lt;p>Then you either scan with &lt;code>ggshield scan&lt;/code>, or you can add a hook to your repository:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#75715e"># .pre-commit-config.yaml&lt;/span>
&lt;span style="color:#66d9ef">repos&lt;/span>:
- &lt;span style="color:#66d9ef">repo&lt;/span>: https://github.com/gitguardian/ggshield
&lt;span style="color:#66d9ef">rev&lt;/span>: v1&lt;span style="color:#ae81ff">.34.0&lt;/span>
&lt;span style="color:#66d9ef">hooks&lt;/span>:
- &lt;span style="color:#66d9ef">id&lt;/span>: ggshield
&lt;span style="color:#66d9ef">language_version&lt;/span>: python3
&lt;span style="color:#66d9ef">stages&lt;/span>: [pre-commit]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and install the hook with &lt;code>pre-commit install&lt;/code>. Then every time you commit, it will first scan for secrets and if it finds any, it will prevent the commit from happening:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">ggshield (pre-commit)....................................................Failed
- hook id: ggshield
- exit code: 1
Scanning... ━━━━━━━━━━━━━━━━━━━━━━━━╺━━━━━━━━━━━━━━━ 60% 3 / 5
&amp;gt; commit://staged/content/posts/21_secrets/tmp.ipynb: 1 incident detected
&amp;gt;&amp;gt; Secret detected: Generic High Entropy Secret
Validity: No Checker
Occurrences: 1
Known by GitGuardian dashboard: NO
Incident URL: N/A
Secret SHA: 77580e69c7104d86b1d3c3b332e503b9a9df67604927334f4adc3c94e084b504
34 | + &amp;#34;outputs&amp;#34;: [],
35 | + &amp;#34;source&amp;#34;: [
36 | +…I_KEY = \&amp;#34;sk-proj-zGZKFysyo-kMXx_2Hm_V*********************************************************************-**************************************18IZ6hh2xxXZ7Dwau29Khz3Kma0A\&amp;#34;\n&amp;#34;…
37 | + ]
38 | + }
&amp;gt; How to remediate
Since the secret was detected before the commit was made:
1. replace the secret with its reference (e.g. environment variable).
2. commit again.
&amp;gt; [Apply with caution] If you want to bypass ggshield (false positive or other
reason), run:
- if you use the pre-commit framework:
SKIP=ggshield git commit -m &amp;#34;&amp;lt;your message&amp;gt;&amp;#34;
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Managing multiple hugo versions</title><link>https://www.robert-sokolewicz.nl/posts/22_multiple_hugos/</link><pubDate>Sat, 28 Dec 2024 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/22_multiple_hugos/</guid><description>I&amp;rsquo;m maintaining a few Hugo sites (this one and www.ai-stories.io), and unfortunately this website uses a quite old version of Hugo. I need to be able to easilyswitch between versions v0.68.3 and v0.140.0.
My approach is this:
Install Hugo globally with brew install hugo (so that running hugo will use v0.140.0) Install a specific version of Hugo for this website and run a simple shell script to use the v0.</description><content>&lt;p>I&amp;rsquo;m maintaining a few Hugo sites (this one and &lt;a href="https://www.ai-stories.io">www.ai-stories.io&lt;/a>), and unfortunately this website uses a quite old version of Hugo. I need to be able to easilyswitch between versions v0.68.3 and v0.140.0.&lt;/p>
&lt;p>My approach is this:&lt;/p>
&lt;ul>
&lt;li>Install Hugo globally with &lt;code>brew install hugo&lt;/code> (so that running &lt;code>hugo&lt;/code> will use v0.140.0)&lt;/li>
&lt;li>Install a specific version of Hugo for this website and run a simple shell script to use the v0.68.3 version.&lt;/li>
&lt;/ul>
&lt;p>Unfortunately you cannot directly install a specific version of Hugo, so I had to use a workaround that I found on the Hugo forums.&lt;/p>
&lt;p>First I try to find &lt;a href="https://github.com/search?q=repo%3AHomebrew%2Fhomebrew-core+hugo+0.68.3&amp;amp;type=commits">the correct bottle version on github&lt;/a> then get the raw file. Unfortunately, with the current version of brew this bottle is not entirely compatible, but we can easily change it (thanks Claude :'))&lt;/p>
&lt;p>Original file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#75715e"># hugo.rb&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Hugo&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">Formula&lt;/span>
desc &lt;span style="color:#e6db74">&amp;#34;Configurable static site generator&amp;#34;&lt;/span>
homepage &lt;span style="color:#e6db74">&amp;#34;https://gohugo.io/&amp;#34;&lt;/span>
url &lt;span style="color:#e6db74">&amp;#34;https://github.com/gohugoio/hugo/archive/v0.68.3.tar.gz&amp;#34;&lt;/span>
sha256 &lt;span style="color:#e6db74">&amp;#34;38e743605e45e3aafd9563feb9e78477e72d79535ce83b56b243ff991d3a2b6e&amp;#34;&lt;/span>
head &lt;span style="color:#e6db74">&amp;#34;https://github.com/gohugoio/hugo.git&amp;#34;&lt;/span>
bottle &lt;span style="color:#66d9ef">do&lt;/span>
cellar &lt;span style="color:#e6db74">:any_skip_relocation&lt;/span>
sha256 &lt;span style="color:#e6db74">&amp;#34;202cb22f91d546939c3e7d11a360b39eb67e445b41f8a8114c35c6cb26d7a7d1&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">:catalina&lt;/span>
sha256 &lt;span style="color:#e6db74">&amp;#34;9b93809ed925204a4d34458044e5d81e152c43c10debaf87509007f45b84bec3&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">:mojave&lt;/span>
sha256 &lt;span style="color:#e6db74">&amp;#34;71684aacddbb3d971ea53de453cc8de91c15501ef3db9fab5077a43aa6bd73ee&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">:high_sierra&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
depends_on &lt;span style="color:#e6db74">&amp;#34;go&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">:build&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">install&lt;/span>
&lt;span style="color:#66d9ef">ENV&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GOPATH&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">HOMEBREW_CACHE&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;go_cache&amp;#34;&lt;/span>
(buildpath&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;src/github.com/gohugoio/hugo&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>install buildpath&lt;span style="color:#f92672">.&lt;/span>children
cd &lt;span style="color:#e6db74">&amp;#34;src/github.com/gohugoio/hugo&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
system &lt;span style="color:#e6db74">&amp;#34;go&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;build&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-o&amp;#34;&lt;/span>, bin&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-tags&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;extended&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;main.go&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Build bash completion&lt;/span>
system bin&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;gen&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;autocomplete&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;--completionfile=hugo.sh&amp;#34;&lt;/span>
bash_completion&lt;span style="color:#f92672">.&lt;/span>install &lt;span style="color:#e6db74">&amp;#34;hugo.sh&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Build man pages; target dir man/ is hardcoded :(&lt;/span>
(&lt;span style="color:#66d9ef">Pathname&lt;/span>&lt;span style="color:#f92672">.&lt;/span>pwd&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;man&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>mkpath
system bin&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;gen&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;man&amp;#34;&lt;/span>
man1&lt;span style="color:#f92672">.&lt;/span>install &lt;span style="color:#66d9ef">Dir&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;man/*.1&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
prefix&lt;span style="color:#f92672">.&lt;/span>install_metafiles
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
test &lt;span style="color:#66d9ef">do&lt;/span>
site &lt;span style="color:#f92672">=&lt;/span> testpath&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hops-yeast-malt-water&amp;#34;&lt;/span>
system &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>bin&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/hugo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;new&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;site&amp;#34;&lt;/span>, site
assert_predicate testpath&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>site&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/config.toml&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">:exist?&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>updated file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#75715e"># hugo.rb&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Hugo&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">Formula&lt;/span>
desc &lt;span style="color:#e6db74">&amp;#34;Configurable static site generator&amp;#34;&lt;/span>
homepage &lt;span style="color:#e6db74">&amp;#34;https://gohugo.io/&amp;#34;&lt;/span>
url &lt;span style="color:#e6db74">&amp;#34;https://github.com/gohugoio/hugo/archive/v0.68.3.tar.gz&amp;#34;&lt;/span>
sha256 &lt;span style="color:#e6db74">&amp;#34;38e743605e45e3aafd9563feb9e78477e72d79535ce83b56b243ff991d3a2b6e&amp;#34;&lt;/span>
head &lt;span style="color:#e6db74">&amp;#34;https://github.com/gohugoio/hugo.git&amp;#34;&lt;/span>
bottle &lt;span style="color:#66d9ef">do&lt;/span>
root_url &lt;span style="color:#e6db74">&amp;#34;https://homebrew.bintray.com/bottles&amp;#34;&lt;/span>
rebuild &lt;span style="color:#ae81ff">0&lt;/span>
sha256 &lt;span style="color:#e6db74">catalina&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;202cb22f91d546939c3e7d11a360b39eb67e445b41f8a8114c35c6cb26d7a7d1&amp;#34;&lt;/span>
sha256 &lt;span style="color:#e6db74">mojave&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;9b93809ed925204a4d34458044e5d81e152c43c10debaf87509007f45b84bec3&amp;#34;&lt;/span>
sha256 &lt;span style="color:#e6db74">high_sierra&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;71684aacddbb3d971ea53de453cc8de91c15501ef3db9fab5077a43aa6bd73ee&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
depends_on &lt;span style="color:#e6db74">&amp;#34;go&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">:build&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">install&lt;/span>
&lt;span style="color:#66d9ef">ENV&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GOPATH&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">HOMEBREW_CACHE&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;go_cache&amp;#34;&lt;/span>
(buildpath&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;src/github.com/gohugoio/hugo&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>install buildpath&lt;span style="color:#f92672">.&lt;/span>children
cd &lt;span style="color:#e6db74">&amp;#34;src/github.com/gohugoio/hugo&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
system &lt;span style="color:#e6db74">&amp;#34;go&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;build&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-o&amp;#34;&lt;/span>, bin&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-tags&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;extended&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;main.go&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Build bash completion&lt;/span>
system bin&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;gen&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;autocomplete&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;--completionfile=hugo.sh&amp;#34;&lt;/span>
bash_completion&lt;span style="color:#f92672">.&lt;/span>install &lt;span style="color:#e6db74">&amp;#34;hugo.sh&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># Build man pages; target dir man/ is hardcoded :(&lt;/span>
(&lt;span style="color:#66d9ef">Pathname&lt;/span>&lt;span style="color:#f92672">.&lt;/span>pwd&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;man&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>mkpath
system bin&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;gen&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;man&amp;#34;&lt;/span>
man1&lt;span style="color:#f92672">.&lt;/span>install &lt;span style="color:#66d9ef">Dir&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;man/*.1&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
prefix&lt;span style="color:#f92672">.&lt;/span>install_metafiles
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
test &lt;span style="color:#66d9ef">do&lt;/span>
site &lt;span style="color:#f92672">=&lt;/span> testpath&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hops-yeast-malt-water&amp;#34;&lt;/span>
system &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>bin&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/hugo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;new&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;site&amp;#34;&lt;/span>, site
assert_predicate testpath&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>site&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/config.toml&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">:exist?&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(changes are in the &lt;code>bottle do&lt;/code> section, but easiest to ask AI to do the changes for you :P)&lt;/p>
&lt;p>Then I create a simple shell script to use the v0.68.3 version:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;span style="color:#75715e">&lt;/span>/opt/homebrew/Cellar/hugo/0.68.3/bin/hugo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$@&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and make it executable with &lt;code>chmod +x hugo&lt;/code>. Then I can simply run &lt;code>./hugo&lt;/code> to use the v0.68.3 version.&lt;/p></content></item><item><title>Nesting context managers</title><link>https://www.robert-sokolewicz.nl/posts/23_nested-context-managers/</link><pubDate>Sat, 28 Dec 2024 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/23_nested-context-managers/</guid><description>The other day I used tempfile to create two temporary files inside a temporary directory. I&amp;rsquo;ve used python for so long that I never realized that since python 3.8 we can write the following much shorter:
# the old way import tempfile with TemporaryDirectory() as temp_dir: with NamedTemporaryFile(suffix=&amp;#34;.pdf&amp;#34;) as temp_pdf_file: with NamedTemporaryFile(suffix=&amp;#34;.zip&amp;#34;) as temp_zip_file: ... # the new way with ( TemporaryDirectory() as temp_dir, NamedTemporaryFile(suffix=&amp;#34;.pdf&amp;#34;) as temp_pdf_file, NamedTemporaryFile(suffix=&amp;#34;.zip&amp;#34;) as temp_zip_file, ): .</description><content>&lt;p>The other day I used &lt;code>tempfile&lt;/code> to create two temporary files inside a temporary directory. I&amp;rsquo;ve used python for so long that I never realized that since python 3.8 we can write the following much shorter:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># the old way&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> tempfile
&lt;span style="color:#66d9ef">with&lt;/span> TemporaryDirectory() &lt;span style="color:#66d9ef">as&lt;/span> temp_dir:
&lt;span style="color:#66d9ef">with&lt;/span> NamedTemporaryFile(suffix&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.pdf&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> temp_pdf_file:
&lt;span style="color:#66d9ef">with&lt;/span> NamedTemporaryFile(suffix&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.zip&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> temp_zip_file:
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># the new way&lt;/span>
&lt;span style="color:#66d9ef">with&lt;/span> (
TemporaryDirectory() &lt;span style="color:#66d9ef">as&lt;/span> temp_dir,
NamedTemporaryFile(suffix&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.pdf&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> temp_pdf_file,
NamedTemporaryFile(suffix&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.zip&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> temp_zip_file,
):
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and this works for all context managers, not just &lt;code>tempfile&lt;/code>.&lt;/p>
&lt;p>In this example, unfortunately &lt;code>temp_dir&lt;/code> won&amp;rsquo;t be created until the with block actually enters, so if we want to create the temporary files in the same directory, we will need to do it like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">with&lt;/span> TemporaryDirectory() &lt;span style="color:#66d9ef">as&lt;/span> temp_dir:
&lt;span style="color:#66d9ef">with&lt;/span> (
NamedTemporaryFile(suffix&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.pdf&amp;#34;&lt;/span>, dir&lt;span style="color:#f92672">=&lt;/span>temp_dir) &lt;span style="color:#66d9ef">as&lt;/span> temp_pdf_file,
NamedTemporaryFile(suffix&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.zip&amp;#34;&lt;/span>, dir&lt;span style="color:#f92672">=&lt;/span>temp_dir) &lt;span style="color:#66d9ef">as&lt;/span> temp_zip_file,
):
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Using git bisect to find a bug</title><link>https://www.robert-sokolewicz.nl/posts/20_git_bisect/</link><pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/20_git_bisect/</guid><description>Bisecting the git bisect command Imagine implementing a feature, while not running any unit tests for a couple of commits. And oops, there&amp;rsquo;s a failing test. Or worse, a user discovers a breaking change but you don&amp;rsquo;t know which commit introduced it.
With git bisect you can do a quick binary search through your git history to find the commit that introduced the bug. Pretty cool! I find the interface a bit confusing, so here it is.</description><content>&lt;h1 id="bisecting-the-git-bisect-command">Bisecting the &lt;code>git bisect&lt;/code> command&lt;/h1>
&lt;p>Imagine implementing a feature, while not running any unit tests for a couple of commits. And oops, there&amp;rsquo;s a failing test. Or worse, a user discovers a breaking change but you don&amp;rsquo;t know which commit introduced it.&lt;/p>
&lt;p>With &lt;code>git bisect&lt;/code> you can do a quick binary search through your git history to find the commit that introduced the bug. Pretty cool! I find the interface a bit confusing, so here it is. It&amp;rsquo;s basically a bunch of commands:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git bisect start
git bisect bad &amp;lt;commit_hash&amp;gt;
git bisect good &amp;lt;commit_hash&amp;gt;
git run &amp;lt;command&amp;gt;
git bisect reset
&lt;/code>&lt;/pre>&lt;/div>&lt;p>instead of git hashes or tags you can also specify the number of commits from the current state. So if you know that 20 commits ago everything worked, you can do &lt;code>git bisect good HEAD~20&lt;/code> and &lt;code>git bisect bad HEAD&lt;/code> to start the search. With &lt;code>git run &amp;lt;command&amp;gt;&lt;/code>, you can specify any command that should return with a non-zero exit code if the current commit is bad. This can be a pytest, e.g.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git bisect run pytest tests/test_foo.py::test_bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or any script that you want to run:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git bisect run ./run_tests.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or even&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git bisect run python foo.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>alternatively, you can also manually inspect/run each commit during the bisection and mark if their good or bad using &lt;code>git bisect good&lt;/code> and &lt;code>git bisect bad&lt;/code>.&lt;/p>
&lt;p>If you run &lt;code>git bisect run&lt;/code> it might output a lot of noise that you don&amp;rsquo;t care about. e.g. with ptyest you&amp;rsquo;ll end up with:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git bisect run pytest tests/test_foo.py::test_bar
running pytest tests/test_foo.py::test_bar
&lt;span style="color:#f92672">=============================&lt;/span> test session starts &lt;span style="color:#f92672">==============================&lt;/span>
platform linux -- Python 3.12.10, pytest-8.3.3
rootdir: /home/user/project
collected &lt;span style="color:#ae81ff">1&lt;/span> item
tests/test_foo.py F &lt;span style="color:#f92672">[&lt;/span>100%&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#f92672">==================================&lt;/span> FAILURES &lt;span style="color:#f92672">===================================&lt;/span>
__________________________________ test_bar __________________________________
def test_bar&lt;span style="color:#f92672">()&lt;/span>:
&amp;gt; assert foo.bar&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
E AssertionError: assert 41 &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
E + where 41 &lt;span style="color:#f92672">=&lt;/span> &amp;lt;&lt;span style="color:#66d9ef">function&lt;/span> bar at 0x7f9b1c3e6f70&amp;gt;&lt;span style="color:#f92672">()&lt;/span>
E + where &amp;lt;&lt;span style="color:#66d9ef">function&lt;/span> bar at 0x7f9b1c3e6f70&amp;gt; &lt;span style="color:#f92672">=&lt;/span> foo.bar
tests/test_foo.py:8: AssertionError
&lt;span style="color:#f92672">===========================&lt;/span> short test summary info &lt;span style="color:#f92672">===========================&lt;/span>
FAILED tests/test_foo.py::test_bar - AssertionError: assert 41 &lt;span style="color:#f92672">==&lt;/span> 42
&lt;span style="color:#f92672">==============================&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> failed in 0.03s &lt;span style="color:#f92672">==============================&lt;/span>
Bisecting: &lt;span style="color:#ae81ff">4&lt;/span> revisions left to test after this &lt;span style="color:#f92672">(&lt;/span>roughly &lt;span style="color:#ae81ff">2&lt;/span> steps&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>41dd4aa10cf685f0671659283980eefb3d9c5468&lt;span style="color:#f92672">]&lt;/span> Update foo.py
running pytest tests/test_foo.py::test_bar
&lt;span style="color:#f92672">=============================&lt;/span> test session starts &lt;span style="color:#f92672">==============================&lt;/span>
platform linux -- Python 3.12.10, pytest-8.3.3
rootdir: /home/user/project
collected &lt;span style="color:#ae81ff">1&lt;/span> item
tests/test_foo.py F &lt;span style="color:#f92672">[&lt;/span>100%&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#f92672">==================================&lt;/span> FAILURES &lt;span style="color:#f92672">===================================&lt;/span>
__________________________________ test_bar __________________________________
def test_bar&lt;span style="color:#f92672">()&lt;/span>:
&amp;gt; assert foo.bar&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
E AssertionError: assert 41 &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
E + where 41 &lt;span style="color:#f92672">=&lt;/span> &amp;lt;&lt;span style="color:#66d9ef">function&lt;/span> bar at 0x7f9b1c3e6f70&amp;gt;&lt;span style="color:#f92672">()&lt;/span>
E + where &amp;lt;&lt;span style="color:#66d9ef">function&lt;/span> bar at 0x7f9b1c3e6f70&amp;gt; &lt;span style="color:#f92672">=&lt;/span> foo.bar
tests/test_foo.py:8: AssertionError
&lt;span style="color:#f92672">===========================&lt;/span> short test summary info &lt;span style="color:#f92672">===========================&lt;/span>
FAILED tests/test_foo.py::test_bar - AssertionError: assert 41 &lt;span style="color:#f92672">==&lt;/span> 42
&lt;span style="color:#f92672">==============================&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> failed in 0.03s &lt;span style="color:#f92672">==============================&lt;/span>
Bisecting: &lt;span style="color:#ae81ff">2&lt;/span> revisions left to test after this &lt;span style="color:#f92672">(&lt;/span>roughly &lt;span style="color:#ae81ff">1&lt;/span> step&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>c6ece2440925057a362da7ad41cb689c09e6503b&lt;span style="color:#f92672">]&lt;/span> Refactor foo.py
running pytest tests/test_foo.py::test_bar
&lt;span style="color:#f92672">=============================&lt;/span> test session starts &lt;span style="color:#f92672">==============================&lt;/span>
platform linux -- Python 3.12.10, pytest-8.3.3
rootdir: /home/user/project
collected &lt;span style="color:#ae81ff">1&lt;/span> item
tests/test_foo.py . &lt;span style="color:#f92672">[&lt;/span>100%&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#f92672">==============================&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> passed in 0.01s &lt;span style="color:#f92672">==============================&lt;/span>
Bisecting: &lt;span style="color:#ae81ff">0&lt;/span> revisions left to test after this &lt;span style="color:#f92672">(&lt;/span>roughly &lt;span style="color:#ae81ff">1&lt;/span> step&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>5f5248584dc4c435a89c708998b2b17115aa36e5&lt;span style="color:#f92672">]&lt;/span> Minor changes to foo.py
running pytest tests/test_foo.py::test_bar
&lt;span style="color:#f92672">=============================&lt;/span> test session starts &lt;span style="color:#f92672">==============================&lt;/span>
platform linux -- Python 3.12.10, pytest-8.3.3
rootdir: /home/user/project
collected &lt;span style="color:#ae81ff">1&lt;/span> item
tests/test_foo.py F &lt;span style="color:#f92672">[&lt;/span>100%&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#f92672">==================================&lt;/span> FAILURES &lt;span style="color:#f92672">===================================&lt;/span>
__________________________________ test_bar __________________________________
def test_bar&lt;span style="color:#f92672">()&lt;/span>:
&amp;gt; assert foo.bar&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
E AssertionError: assert 41 &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
E + where 41 &lt;span style="color:#f92672">=&lt;/span> &amp;lt;&lt;span style="color:#66d9ef">function&lt;/span> bar at 0x7f9b1c3e6f70&amp;gt;&lt;span style="color:#f92672">()&lt;/span>
E + where &amp;lt;&lt;span style="color:#66d9ef">function&lt;/span> bar at 0x7f9b1c3e6f70&amp;gt; &lt;span style="color:#f92672">=&lt;/span> foo.bar
tests/test_foo.py:8: AssertionError
&lt;span style="color:#f92672">===========================&lt;/span> short test summary info &lt;span style="color:#f92672">===========================&lt;/span>
FAILED tests/test_foo.py::test_bar - AssertionError: assert 41 &lt;span style="color:#f92672">==&lt;/span> 42
&lt;span style="color:#f92672">==============================&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> failed in 0.03s &lt;span style="color:#f92672">==============================&lt;/span>
5f5248584dc4c435a89c708998b2b17115aa36e5 is the first bad commit
commit 5f5248584dc4c435a89c708998b2b17115aa36e5
Author: John Doe &amp;lt;john.doe@example.com&amp;gt;
Date: Mon Jul &lt;span style="color:#ae81ff">10&lt;/span> 19:21:31 &lt;span style="color:#ae81ff">2023&lt;/span> +0200
Minor changes to foo.py
foo.py | &lt;span style="color:#ae81ff">2&lt;/span> +-
&lt;span style="color:#ae81ff">1&lt;/span> file changed, &lt;span style="color:#ae81ff">1&lt;/span> insertion&lt;span style="color:#f92672">(&lt;/span>+&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span> deletion&lt;span style="color:#f92672">(&lt;/span>-&lt;span style="color:#f92672">)&lt;/span>
bisect run success
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To suppress all this noise you can redirect the output to /dev/null and grep from the log:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git bisect run pytest tests/test_foo.py::test_bar &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span>
git bisect log | grep &lt;span style="color:#e6db74">&amp;#34;first bad commit&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Auto activating conda environments when moving between projects</title><link>https://www.robert-sokolewicz.nl/posts/19_fish_and_starship/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/19_fish_and_starship/</guid><description>Auto activating conda environments when moving between projects I have the bad habit of forgetting to switch conda environments when moving between projects, and I always end up corrupting them. Although multiple people have requested this feature with the conda developers team, they never implemented some sort of auto activation.
Fortunately, this is easy to implement yourself. I&amp;rsquo;m using fish shell, but this should be easy to adapt to other shells if you do a quick search (e.</description><content>&lt;h1 id="auto-activating-conda-environments-when-moving-between-projects">Auto activating conda environments when moving between projects&lt;/h1>
&lt;p>I have the bad habit of forgetting to switch conda environments when moving between projects, and I always end up corrupting them. Although multiple people have requested this feature with the conda developers team, they never implemented some sort of auto activation.&lt;/p>
&lt;p>Fortunately, this is easy to implement yourself. I&amp;rsquo;m using fish shell, but this should be easy to adapt to other shells if you do a quick search (e.g. there a few suggestions &lt;a href="https://github.com/conda/conda/issues/5179">here&lt;/a> using &lt;code>bash&lt;/code> or something called &lt;code>autoenv&lt;/code>).&lt;/p>
&lt;p>Basically, add this to &lt;code>~/.config/fish/config.fish&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#66d9ef">function&lt;/span> check_and_activate_conda
&lt;span style="color:#66d9ef">if&lt;/span> test -e &lt;span style="color:#e6db74">&amp;#34;.condaenv&amp;#34;&lt;/span>
set env_name &lt;span style="color:#f92672">(&lt;/span>cat .condaenv | string trim&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> test -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$env_name&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> not string match -q -- &lt;span style="color:#e6db74">&amp;#34;*&lt;/span>$env_name&lt;span style="color:#e6db74">*&amp;#34;&lt;/span> $CONDA_DEFAULT_ENV
conda activate $env_name
end
end
end
end
&lt;span style="color:#66d9ef">function&lt;/span> auto_activate_conda --on-variable PWD
check_and_activate_conda
end
&lt;span style="color:#66d9ef">if&lt;/span> status is-interactive
check_and_activate_conda
end
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will run the function &lt;code>check_and_activate_conda&lt;/code> every time you initiate a shell or when you change directory. Now all that you need to do is add a file &lt;code>.condaenv&lt;/code> to the root of your project with the name of the conda environment you want to activate.&lt;/p>
&lt;p>Unfortunately, I can&amp;rsquo;t add this to some work-related projects because I don&amp;rsquo;t want to add it to the public &lt;code>.gitignore&lt;/code>, nor do I want to remember to not &lt;code>git add&lt;/code> it with every commit. So I added a bit of logic to the script above:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash"> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> string match -q &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$qblox_path&lt;span style="color:#e6db74">*&amp;#34;&lt;/span> $current_path
&lt;span style="color:#66d9ef">if&lt;/span> test &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$CONDA_DEFAULT_ENV&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;base&amp;#34;&lt;/span> -o -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$CONDA_DEFAULT_ENV&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
conda activate dev
end
&lt;/code>&lt;/pre>&lt;/div>&lt;p>this will activate the &lt;code>dev&lt;/code> environment whenever I work on a Qblox project.&lt;/p></content></item><item><title>Supercharging your terminal with fish and starship</title><link>https://www.robert-sokolewicz.nl/posts/18_auto_activate_conda/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/18_auto_activate_conda/</guid><description>A modern looking terminal This is how my terminal looks like at the moment. The layout uses starship to provide useful information about the shell at all times. For example, it shows the current python version if you are in a python environment, and the current branch if you are in a git repository. I made some minor modifications to the default layout, e.g. adding the time information to the right.</description><content>&lt;h1 id="a-modern-looking-terminal">A modern looking terminal&lt;/h1>
&lt;p>&lt;img src="image-1.png" alt="an awesome terminal">&lt;/p>
&lt;p>This is how my terminal looks like at the moment. The layout uses &lt;a href="https://starship.rs/">starship&lt;/a> to provide useful information about the shell at all times. For example, it shows the current python version if you are in a python environment, and the current branch if you are in a git repository. I made some minor modifications to the default layout, e.g. adding the time information to the right. I would still like to add a few more things, but I&amp;rsquo;m happy the way it is.&lt;/p>
&lt;p>Here&amp;rsquo;s my starship config (&lt;code>~/.config/starship.toml&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$schema&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://starship.rs/config-schema.json&amp;#39;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">[](fg:color_bg1)\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$time&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">[ ](fg:color_bg1)\
&lt;/span>&lt;span style="color:#e6db74">[](color_orange)\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$username&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">[](bg:color_yellow fg:color_orange)\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$directory&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">[](fg:color_yellow bg:color_aqua)\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$git_branch&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$git_status&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">[](fg:color_aqua bg:color_blue)\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$c&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$rust&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$golang&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$nodejs&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$php&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$java&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$kotlin&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$haskell&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$python&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">[](fg:color_blue bg:color_bg3)\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$docker_context&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$conda&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">[](fg:color_bg3)\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$cmd_duration&lt;span style="color:#e6db74">\
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>$line_break$character&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
palette &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;gruvbox_dark&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>palettes.gruvbox_dark&lt;span style="color:#f92672">]&lt;/span>
color_fg0 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#fbf1c7&amp;#39;&lt;/span>
color_bg1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#3c3836&amp;#39;&lt;/span>
color_bg3 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#665c54&amp;#39;&lt;/span>
color_blue &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#458588&amp;#39;&lt;/span>
color_aqua &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#689d6a&amp;#39;&lt;/span>
color_green &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#98971a&amp;#39;&lt;/span>
color_orange &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#d65d0e&amp;#39;&lt;/span>
color_purple &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#b16286&amp;#39;&lt;/span>
color_red &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#cc241d&amp;#39;&lt;/span>
color_yellow &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#d79921&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>os&lt;span style="color:#f92672">]&lt;/span>
disabled &lt;span style="color:#f92672">=&lt;/span> false
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_orange fg:color_fg0&amp;#34;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>os.symbols&lt;span style="color:#f92672">]&lt;/span>
Windows &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰍲&amp;#34;&lt;/span>
Ubuntu &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰕈&amp;#34;&lt;/span>
SUSE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
Raspbian &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰐿&amp;#34;&lt;/span>
Mint &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰣭&amp;#34;&lt;/span>
Macos &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰀵&amp;#34;&lt;/span>
Manjaro &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
Linux &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰌽&amp;#34;&lt;/span>
Gentoo &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰣨&amp;#34;&lt;/span>
Fedora &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰣛&amp;#34;&lt;/span>
Alpine &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
Amazon &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
Android &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
Arch &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰣇&amp;#34;&lt;/span>
Artix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰣇&amp;#34;&lt;/span>
CentOS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
Debian &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰣚&amp;#34;&lt;/span>
Redhat &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󱄛&amp;#34;&lt;/span>
RedHatEnterprise &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󱄛&amp;#34;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>username&lt;span style="color:#f92672">]&lt;/span>
show_always &lt;span style="color:#f92672">=&lt;/span> true
style_user &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_orange fg:color_fg0&amp;#34;&lt;/span>
style_root &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_orange fg:color_fg0&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[ $user ]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>directory&lt;span style="color:#f92672">]&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fg:color_fg0 bg:color_yellow&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;[ &lt;/span>$path&lt;span style="color:#e6db74"> ](&lt;/span>$style&lt;span style="color:#e6db74">)&amp;#34;&lt;/span>
truncation_length &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
truncation_symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;…/&amp;#34;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>directory.substitutions&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Documents&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰈙 &amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Downloads&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Music&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰝚 &amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Pictures&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Developer&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;󰲋 &amp;#34;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>git_branch&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_aqua&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol $branch ](fg:color_fg0 bg:color_aqua)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>git_status&lt;span style="color:#f92672">]&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_aqua&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[($all_status$ahead_behind )](fg:color_fg0 bg:color_aqua)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>nodejs&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_blue&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>c&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_blue&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>rust&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_blue&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>golang&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_blue&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>php&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_blue&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>java&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_blue&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>kotlin&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_blue&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>haskell&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_blue&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>python&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_blue&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>docker_context&lt;span style="color:#f92672">]&lt;/span>
symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_bg3&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $context) ](fg:#83a598 bg:color_bg3)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>conda&lt;span style="color:#f92672">]&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_bg3&amp;#34;&lt;/span>
ignore_base &lt;span style="color:#f92672">=&lt;/span> false
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $symbol( $environment) ](fg:#83a598 bg:color_bg3)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>cmd_duration&lt;span style="color:#f92672">]&lt;/span>
min_time &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>
show_milliseconds &lt;span style="color:#f92672">=&lt;/span> false
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_bg3 fg:#ffffff&amp;#34;&lt;/span>
show_notifications &lt;span style="color:#f92672">=&lt;/span> false
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ ](fg:color_bg1)[took $duration](fg:color_fg0 bg:color_bg1)]($style)[ ](fg:color_bg1)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>time&lt;span style="color:#f92672">]&lt;/span>
disabled &lt;span style="color:#f92672">=&lt;/span> false
time_format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;%R&amp;#34;&lt;/span>
style &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bg:color_bg1&amp;#34;&lt;/span>
format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[[ $time ](fg:color_fg0 bg:color_bg1)]($style)&amp;#39;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>line_break&lt;span style="color:#f92672">]&lt;/span>
disabled &lt;span style="color:#f92672">=&lt;/span> false
&lt;span style="color:#f92672">[&lt;/span>character&lt;span style="color:#f92672">]&lt;/span>
disabled &lt;span style="color:#f92672">=&lt;/span> false
success_symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[](bold fg:color_green)&amp;#39;&lt;/span>
error_symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[](bold fg:color_red)&amp;#39;&lt;/span>
vimcmd_symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[](bold fg:color_green)&amp;#39;&lt;/span>
vimcmd_replace_one_symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[](bold fg:color_purple)&amp;#39;&lt;/span>
vimcmd_replace_symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[](bold fg:color_purple)&amp;#39;&lt;/span>
vimcmd_visual_symbol &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[](bold fg:color_yellow)&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(You&amp;rsquo;ll need a &lt;a href="https://www.nerdfonts.com/">nerd font&lt;/a> with glyphs to see all the fancy characters)&lt;/p>
&lt;h1 id="fish-shell">Fish shell&lt;/h1>
&lt;p>I&amp;rsquo;ve been using &lt;a href="https://fishshell.com/">fish&lt;/a> for almost a year now, and I really like it. I use it mostly for the auto-complete feature. It&amp;rsquo;s almost as smart as an AI copilot in your editor, but now in the terminal. (note: it&amp;rsquo;s a very simple frequency based autocomplete, no AI whatsoever)&lt;/p>
&lt;p>Here&amp;rsquo;s my fish config (&lt;code>~/.config/fish/config.fish&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># Fish syntax highlighting&lt;/span>
set -g fish_color_autosuggestion &lt;span style="color:#e6db74">&amp;#39;555&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;brblack&amp;#39;&lt;/span>
set -g fish_color_cancel -r
set -g fish_color_command --bold
set -g fish_color_comment red
set -g fish_color_cwd green
set -g fish_color_cwd_root red
set -g fish_color_end brmagenta
set -g fish_color_error brred
set -g fish_color_escape &lt;span style="color:#e6db74">&amp;#39;bryellow&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;--bold&amp;#39;&lt;/span>
set -g fish_color_history_current --bold
set -g fish_color_host normal
set -g fish_color_match --background&lt;span style="color:#f92672">=&lt;/span>brblue
set -g fish_color_normal normal
set -g fish_color_operator bryellow
set -g fish_color_param cyan
set -g fish_color_quote yellow
set -g fish_color_redirection brblue
set -g fish_color_search_match &lt;span style="color:#e6db74">&amp;#39;bryellow&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;--background=brblack&amp;#39;&lt;/span>
set -g fish_color_selection &lt;span style="color:#e6db74">&amp;#39;white&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;--bold&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;--background=brblack&amp;#39;&lt;/span>
set -g fish_color_user brgreen
set -g fish_color_valid_path --underline
&lt;span style="color:#75715e"># Install Starship&lt;/span>
starship init fish | source
set -x PATH $PATH /home/rsoko/flutter/bin
&lt;span style="color:#75715e"># &amp;gt;&amp;gt;&amp;gt; conda initialize &amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;span style="color:#75715e"># !! Contents within this block are managed by &amp;#39;conda init&amp;#39; !!&lt;/span>
eval /home/rsoko/.anaconda3/bin/conda &lt;span style="color:#e6db74">&amp;#34;shell.fish&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hook&amp;#34;&lt;/span> $argv | source
set -e CONDA_DEFAULT_ENV &lt;span style="color:#75715e"># disable showing environment name. This is done by starship&lt;/span>
&lt;span style="color:#75715e"># &amp;lt;&amp;lt;&amp;lt; conda initialize &amp;lt;&amp;lt;&amp;lt;&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> edge
set path $argv&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span>
set winpath &lt;span style="color:#f92672">(&lt;/span>wslpath -w $path&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;file://&lt;/span>$winpath&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &amp;amp;
end
&lt;span style="color:#66d9ef">function&lt;/span> check_and_activate_conda
set current_path &lt;span style="color:#f92672">(&lt;/span>pwd&lt;span style="color:#f92672">)&lt;/span>
set qblox_path ~/qblox
&lt;span style="color:#66d9ef">if&lt;/span> test -e &lt;span style="color:#e6db74">&amp;#34;.condaenv&amp;#34;&lt;/span>
set env_name &lt;span style="color:#f92672">(&lt;/span>cat .condaenv | string trim&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> test -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$env_name&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> not string match -q -- &lt;span style="color:#e6db74">&amp;#34;*&lt;/span>$env_name&lt;span style="color:#e6db74">*&amp;#34;&lt;/span> $CONDA_DEFAULT_ENV
conda activate $env_name
end
end
&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> string match -q &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$qblox_path&lt;span style="color:#e6db74">*&amp;#34;&lt;/span> $current_path
&lt;span style="color:#66d9ef">if&lt;/span> test &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$CONDA_DEFAULT_ENV&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;base&amp;#34;&lt;/span> -o -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$CONDA_DEFAULT_ENV&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
conda activate dev
end
end
end
&lt;span style="color:#66d9ef">function&lt;/span> auto_activate_conda --on-variable PWD
check_and_activate_conda
end
&lt;span style="color:#75715e"># Run check_and_activate_conda on shell init&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> status is-interactive
check_and_activate_conda
end
&lt;span style="color:#75715e"># API Keys&lt;/span>
set -x OPENAI_API_KEY &lt;span style="color:#e6db74">&amp;#34;sk-proj-...&amp;#34;&lt;/span>
set -x ANTHROPIC_API_KEY &lt;span style="color:#e6db74">&amp;#34;sk-ant-...&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>How to pass custom prompts to langchain chains</title><link>https://www.robert-sokolewicz.nl/posts/16_langchain_prompts/</link><pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/16_langchain_prompts/</guid><description>Custom prompts for langchain chains At the moment I’m writing this post, the langchain documentation is a bit lacking in providing simple examples of how to pass custom prompts to some of the built-in chains. While the existing documentation is focused on using the “new” LangChain expression language (LCEL), documentation on how to pass custom prompts to “old” methods like load_summarize_chain is not well documented.
For example, load_summarize_chain allows for additional kwargs to be passed to it, but the keyword names for prompts are a bit confusing and undocumented</description><content>&lt;h1 id="custom-prompts-for-langchain-chains">Custom prompts for langchain chains&lt;/h1>
&lt;p>At the moment I’m writing this post, the &lt;code>langchain&lt;/code> documentation is a bit
lacking in providing simple examples of how to pass custom prompts to some of
the built-in chains. While the existing documentation is focused on using the
“new” LangChain expression language (LCEL), documentation on how to pass custom
prompts to “old” methods like &lt;code>load_summarize_chain&lt;/code> is not well documented.&lt;/p>
&lt;p>For example, &lt;code>load_summarize_chain&lt;/code> allows for additional &lt;code>kwargs&lt;/code> to be passed
to it, but the keyword names for prompts are a bit confusing and undocumented&lt;/p>
&lt;p>&lt;code>prompt&lt;/code> ,&lt;code>map_prompt&lt;/code>, &lt;code>combine_prompt&lt;/code>, &lt;code>collapse_prompt&lt;/code>, &lt;code>question_prompt&lt;/code>, &lt;code>refine_prompt&lt;/code>&lt;/p>
&lt;p>leading to unclear error messages:&lt;/p>
&lt;pre>&lt;code>ValidationError: 1 validation error for RefineDocumentsChain
prompt
extra fields not permitted (type=value_error.extra)
&lt;/code>&lt;/pre>&lt;p>Moreover, custom prompts require specific variable names to make them work:
&lt;code>existing_answer&lt;/code>, &lt;code>text&lt;/code>, &lt;code>question&lt;/code>, &lt;code>context_str&lt;/code>, which are not documented
either and if you use a wrong one you end up with another unclear error message:&lt;/p>
&lt;pre>&lt;code>ValidationError: 1 validation error for RefineDocumentsChain
__root__
document_variable_name text was not found in llm_chain input_variables: ['document'] (type=value_error)
&lt;/code>&lt;/pre>&lt;p>What I did was dig through the code base to figure out the syntax and variable
names needed to create custom prompts. For example, &lt;code>load_qa_chain&lt;/code> is defined
in the file&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">/&lt;/span>home&lt;span style="color:#f92672">/&lt;/span>rsoko&lt;span style="color:#f92672">/.&lt;/span>anaconda3&lt;span style="color:#f92672">/&lt;/span>envs&lt;span style="color:#f92672">/&lt;/span>dev&lt;span style="color:#f92672">/&lt;/span>lib&lt;span style="color:#f92672">/&lt;/span>python3&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span>&lt;span style="color:#f92672">/&lt;/span>site&lt;span style="color:#f92672">-&lt;/span>packages&lt;span style="color:#f92672">/&lt;/span>langchain&lt;span style="color:#f92672">/&lt;/span>chains&lt;span style="color:#f92672">/&lt;/span>question_answering&lt;span style="color:#f92672">/&lt;/span>__init__&lt;span style="color:#f92672">.&lt;/span>py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the prompts are saved in the same folder, inside &lt;code>map_reduce_prompt.py&lt;/code> and
others. To save myself and hopefully others some headaches, here are examples
for all the summary and QA chains.&lt;/p>
&lt;h1 id="examples">Examples&lt;/h1>
&lt;h2 id="summarize---refine">Summarize - refine&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> langchain.prompts &lt;span style="color:#f92672">import&lt;/span> PromptTemplate
refine_prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Your job is to produce a final summary.
&lt;/span>&lt;span style="color:#e6db74"> We have provided an existing summary up to a certain point: {existing_answer}
&lt;/span>&lt;span style="color:#e6db74"> We have the opportunity to refine the existing summary (only if needed) with
&lt;/span>&lt;span style="color:#e6db74"> some more context below.
&lt;/span>&lt;span style="color:#e6db74"> ------------
&lt;/span>&lt;span style="color:#e6db74"> {text}
&lt;/span>&lt;span style="color:#e6db74"> ------------
&lt;/span>&lt;span style="color:#e6db74"> Given the new context, refine the original summary.
&lt;/span>&lt;span style="color:#e6db74"> If the context isn&amp;#39;t useful, return the original summary.
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
question_prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Write a concise summary of the following:
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;{text}&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> CONCISE SUMMARY:
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
load_summarize_chain(
llm,
chain_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;refine&amp;#34;&lt;/span>,
question_prompt&lt;span style="color:#f92672">=&lt;/span>prompt,
refine_prompt &lt;span style="color:#f92672">=&lt;/span> refine_prompt,
&lt;span style="color:#75715e"># these variables are the default values and can be modified/omitted&lt;/span>
document_variable_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>,
initial_response_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;existing_answer&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="summarize---map-reduce">Summarize - map-reduce&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> langchain.prompts &lt;span style="color:#f92672">import&lt;/span> PromptTemplate
map_prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Write a concise summary of the following:
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;{text}&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> CONCISE SUMMARY:
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
combine_prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Write a concise summary of the following:
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;{text}&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> CONCISE SUMMARY:
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
load_summarize_chain(
llm,
chain_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;map_reduce&amp;#34;&lt;/span>,
map_prompt &lt;span style="color:#f92672">=&lt;/span> map_prompt,
combine_prompt&lt;span style="color:#f92672">=&lt;/span>combine_prompt,
&lt;span style="color:#75715e"># these variables are the default values and can be modified/omitted&lt;/span>
combine_document_variable_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>,
map_reduce_document_variable_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>,
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="summarize---stuff">Summarize - stuff&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> langchain.prompts &lt;span style="color:#f92672">import&lt;/span> PromptTemplate
prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Use the following pieces of context to answer the question at the end. If you
&lt;/span>&lt;span style="color:#e6db74"> don&amp;#39;t know the answer, just say that you don&amp;#39;t know, don&amp;#39;t try to make up an
&lt;/span>&lt;span style="color:#e6db74"> answer.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> {context}
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Question: {question}
&lt;/span>&lt;span style="color:#e6db74"> Helpful Answer:
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
load_qa_chain(
llm,
chain_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stuff&amp;#34;&lt;/span>,
prompt&lt;span style="color:#f92672">=&lt;/span>prompt,
&lt;span style="color:#75715e"># this is the default value and can be modified/omitted&lt;/span>
document_variable_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="question-answering---map-rerank">Question-Answering - map rerank&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> langchain.prompts &lt;span style="color:#f92672">import&lt;/span> PromptTemplate
&lt;span style="color:#f92672">from&lt;/span> langchain.output_parsers.regex &lt;span style="color:#f92672">import&lt;/span> RegexParser
output_parser &lt;span style="color:#f92672">=&lt;/span> RegexParser(
regex&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;(.*?)\nScore: (\d*)&amp;#34;&lt;/span>,
output_keys&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;answer&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>],
)
prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Use the following pieces of context to answer the question at the end. If you
&lt;/span>&lt;span style="color:#e6db74"> don&amp;#39;t know the answer, just say that you don&amp;#39;t know, don&amp;#39;t try to make up an
&lt;/span>&lt;span style="color:#e6db74"> answer.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> In addition to giving an answer, also return a score of how fully it answered
&lt;/span>&lt;span style="color:#e6db74"> the user&amp;#39;s question. This should be in the following format:
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Question: [question here]
&lt;/span>&lt;span style="color:#e6db74"> Helpful Answer: [answer here]
&lt;/span>&lt;span style="color:#e6db74"> Score: [score between 0 and 100]
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> How to determine the score:
&lt;/span>&lt;span style="color:#e6db74"> - Higher is a better answer
&lt;/span>&lt;span style="color:#e6db74"> - Better responds fully to the asked question, with sufficient level of detail
&lt;/span>&lt;span style="color:#e6db74"> - If you do not know the answer based on the context, that should be a score of 0
&lt;/span>&lt;span style="color:#e6db74"> - Don&amp;#39;t be overconfident!
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Example #1
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Context:
&lt;/span>&lt;span style="color:#e6db74"> ---------
&lt;/span>&lt;span style="color:#e6db74"> Apples are red
&lt;/span>&lt;span style="color:#e6db74"> ---------
&lt;/span>&lt;span style="color:#e6db74"> Question: what color are apples?
&lt;/span>&lt;span style="color:#e6db74"> Helpful Answer: red
&lt;/span>&lt;span style="color:#e6db74"> Score: 100
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Example #2
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Context:
&lt;/span>&lt;span style="color:#e6db74"> ---------
&lt;/span>&lt;span style="color:#e6db74"> it was night and the witness forgot his glasses. he was not sure if it was a
&lt;/span>&lt;span style="color:#e6db74"> sports car or an suv
&lt;/span>&lt;span style="color:#e6db74"> ---------
&lt;/span>&lt;span style="color:#e6db74"> Question: what type was the car?
&lt;/span>&lt;span style="color:#e6db74"> Helpful Answer: a sports car or an suv
&lt;/span>&lt;span style="color:#e6db74"> Score: 60
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Example #3
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Context:
&lt;/span>&lt;span style="color:#e6db74"> ---------
&lt;/span>&lt;span style="color:#e6db74"> Pears are either red or orange
&lt;/span>&lt;span style="color:#e6db74"> ---------
&lt;/span>&lt;span style="color:#e6db74"> Question: what color are apples?
&lt;/span>&lt;span style="color:#e6db74"> Helpful Answer: This document does not answer the question
&lt;/span>&lt;span style="color:#e6db74"> Score: 0
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Begin!
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Context:
&lt;/span>&lt;span style="color:#e6db74"> ---------
&lt;/span>&lt;span style="color:#e6db74"> {context}
&lt;/span>&lt;span style="color:#e6db74"> ---------
&lt;/span>&lt;span style="color:#e6db74"> Question: {question}
&lt;/span>&lt;span style="color:#e6db74"> Helpful Answer:
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>, output_parser&lt;span style="color:#f92672">=&lt;/span>output_parser
)
load_qa_chain(
llm,
chain_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;map_rerank&amp;#34;&lt;/span>,
prompt&lt;span style="color:#f92672">=&lt;/span>prompt,
document_variable_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>,
&lt;span style="color:#75715e"># these variables are the default values and can be modified/omitted&lt;/span>
rank_key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>,
answer_key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;answer&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="question-answering---stuff">Question-Answering - stuff&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> langchain.prompts &lt;span style="color:#f92672">import&lt;/span> PromptTemplate
prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Use the following pieces of context to answer the question at the end. If you
&lt;/span>&lt;span style="color:#e6db74"> don&amp;#39;t know the answer, just say that you don&amp;#39;t know, don&amp;#39;t try to make up an
&lt;/span>&lt;span style="color:#e6db74"> answer.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> {context}
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Question: {question}
&lt;/span>&lt;span style="color:#e6db74"> Helpful Answer:
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
load_qa_chain(
llm,
chain_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stuff&amp;#34;&lt;/span>,
prompt&lt;span style="color:#f92672">=&lt;/span>prompt,
&lt;span style="color:#75715e"># this is the default values and can be modified/omitted&lt;/span>
document_variable_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>,
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="question-answering---map-reduce">Question-Answering - map reduce&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> langchain.prompts &lt;span style="color:#f92672">import&lt;/span> PromptTemplate
question_prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Use the following portion of a long document to see if any of the text is
&lt;/span>&lt;span style="color:#e6db74"> relevant to answer the question.
&lt;/span>&lt;span style="color:#e6db74"> Return any relevant text verbatim.
&lt;/span>&lt;span style="color:#e6db74"> {context}
&lt;/span>&lt;span style="color:#e6db74"> Question: {question}
&lt;/span>&lt;span style="color:#e6db74"> Relevant text, if any:
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
combine_prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Given the following extracted parts of a long document and a question,
&lt;/span>&lt;span style="color:#e6db74"> create a final answer. If you don&amp;#39;t know the answer, just say that you don&amp;#39;t
&lt;/span>&lt;span style="color:#e6db74"> know. Don&amp;#39;t try to make up an answer.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> QUESTION: Which state/country&amp;#39;s law governs the interpretation of the contract?
&lt;/span>&lt;span style="color:#e6db74"> =========
&lt;/span>&lt;span style="color:#e6db74"> Content: This Agreement is governed by English law and the parties submit to
&lt;/span>&lt;span style="color:#e6db74"> the exclusive jurisdiction of the English courts in relation to any dispute
&lt;/span>&lt;span style="color:#e6db74"> (contractual or non-contractual) concerning this Agreement save that either
&lt;/span>&lt;span style="color:#e6db74"> party may apply to any court for an injunction or other relief to protect
&lt;/span>&lt;span style="color:#e6db74"> its Intellectual Property Rights.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Content: No Waiver. Failure or delay in exercising any right or remedy under
&lt;/span>&lt;span style="color:#e6db74"> this Agreement shall not constitute a waiver of such (or any other) right
&lt;/span>&lt;span style="color:#e6db74"> or remedy.&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74"> 11.7 Severability. The invalidity, illegality or
&lt;/span>&lt;span style="color:#e6db74"> unenforceability of any term (or part of a term) of this Agreement shall not
&lt;/span>&lt;span style="color:#e6db74"> affect the continuation in force of the remainder of the term (if any) and
&lt;/span>&lt;span style="color:#e6db74"> this Agreement.&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">11.8 No Agency. Except as expressly stated otherwise,
&lt;/span>&lt;span style="color:#e6db74"> nothing in this Agreement shall create an agency, partnership or joint
&lt;/span>&lt;span style="color:#e6db74"> venture of any kind between the parties.&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">11.9 No Third-Party
&lt;/span>&lt;span style="color:#e6db74"> Beneficiaries.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Content: (b) if Google believes, in good faith, that the Distributor has
&lt;/span>&lt;span style="color:#e6db74"> violated or caused Google to violate any Anti-Bribery Laws (as defined in
&lt;/span>&lt;span style="color:#e6db74"> Clause 8.5) or that such a violation is reasonably likely to occur,
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> =========
&lt;/span>&lt;span style="color:#e6db74"> FINAL ANSWER: This Agreement is governed by English law.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> QUESTION: What did the president say about Michael Jackson?
&lt;/span>&lt;span style="color:#e6db74"> =========
&lt;/span>&lt;span style="color:#e6db74"> Content: Madam Speaker, Madam Vice President, our First Lady and Second
&lt;/span>&lt;span style="color:#e6db74"> Gentleman. Members of Congress and the Cabinet. Justices of the Supreme
&lt;/span>&lt;span style="color:#e6db74"> Court. My fellow Americans. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Last year COVID-19 kept us apart. This year
&lt;/span>&lt;span style="color:#e6db74"> we are finally together again. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Tonight, we meet as Democrats Republicans
&lt;/span>&lt;span style="color:#e6db74"> and Independents. But most importantly as Americans. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">With a duty to one
&lt;/span>&lt;span style="color:#e6db74"> another to the American people to the Constitution. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">And with an
&lt;/span>&lt;span style="color:#e6db74"> unwavering resolve that freedom will always triumph over tyranny. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Six
&lt;/span>&lt;span style="color:#e6db74"> days ago, Russia’s Vladimir Putin sought to shake the foundations of the
&lt;/span>&lt;span style="color:#e6db74"> free world thinking he could make it bend to his menacing ways. But he badly
&lt;/span>&lt;span style="color:#e6db74"> miscalculated. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">He thought he could roll into Ukraine and the world would
&lt;/span>&lt;span style="color:#e6db74"> roll over. Instead he met a wall of strength he never imagined. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">He met
&lt;/span>&lt;span style="color:#e6db74"> the Ukrainian people. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">From President Zelenskyy to every Ukrainian, their
&lt;/span>&lt;span style="color:#e6db74"> fearlessness, their courage, their determination, inspires the world.
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Groups of citizens blocking tanks with their bodies. Everyone from
&lt;/span>&lt;span style="color:#e6db74"> students to retirees teachers turned soldiers defending their homeland.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Content: And we won’t stop. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">We have lost so much to COVID-19. Time with
&lt;/span>&lt;span style="color:#e6db74"> one another. And worst of all, so much loss of life. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Let’s use this
&lt;/span>&lt;span style="color:#e6db74"> moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line
&lt;/span>&lt;span style="color:#e6db74"> and see it for what it is: A God-awful disease. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Let’s stop seeing each
&lt;/span>&lt;span style="color:#e6db74"> other as enemies, and start seeing each other for who we really are: Fellow
&lt;/span>&lt;span style="color:#e6db74"> Americans. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">We can’t change how divided we’ve been. But we can change
&lt;/span>&lt;span style="color:#e6db74"> how we move forward—on COVID-19 and other issues we must face together.
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">I recently visited the New York City Police Department days after the
&lt;/span>&lt;span style="color:#e6db74"> funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera.
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">They were responding to a 9-1-1 call when a man shot and killed them
&lt;/span>&lt;span style="color:#e6db74"> with a stolen gun. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Officer Mora was 27 years old. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Officer Rivera was
&lt;/span>&lt;span style="color:#e6db74"> 22. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Both Dominican Americans who’d grown up on the same streets they
&lt;/span>&lt;span style="color:#e6db74"> later chose to patrol as police officers. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">I spoke with their families
&lt;/span>&lt;span style="color:#e6db74"> and told them that we are forever in debt for their sacrifice, and we will
&lt;/span>&lt;span style="color:#e6db74"> carry on their mission to restore the trust and safety every community
&lt;/span>&lt;span style="color:#e6db74"> deserves.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Content: And a proud Ukrainian people, who have known 30 years of
&lt;/span>&lt;span style="color:#e6db74"> independence, have repeatedly shown that they will not tolerate anyone who
&lt;/span>&lt;span style="color:#e6db74"> tries to take their country backwards. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">To all Americans, I will be
&lt;/span>&lt;span style="color:#e6db74"> honest with you, as I’ve always promised. A Russian dictator, invading a
&lt;/span>&lt;span style="color:#e6db74"> foreign country, has costs around the world. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">And I’m taking robust
&lt;/span>&lt;span style="color:#e6db74"> action to make sure the pain of our sanctions is targeted at Russia’s
&lt;/span>&lt;span style="color:#e6db74"> economy. And I will use every tool at our disposal to protect American
&lt;/span>&lt;span style="color:#e6db74"> businesses and consumers. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Tonight, I can announce that the United States
&lt;/span>&lt;span style="color:#e6db74"> has worked with 30 other countries to release 60 Million barrels of oil from
&lt;/span>&lt;span style="color:#e6db74"> reserves around the world. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">America will lead that effort, releasing 30
&lt;/span>&lt;span style="color:#e6db74"> Million barrels from our own Strategic Petroleum Reserve. And we stand ready
&lt;/span>&lt;span style="color:#e6db74"> to do more if necessary, unified with our allies. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">These steps will help
&lt;/span>&lt;span style="color:#e6db74"> blunt gas prices here at home. And I know the news about what’s happening
&lt;/span>&lt;span style="color:#e6db74"> can seem alarming. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">But I want you to know that we are going to be okay.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Content: More support for patients and families. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">To get there, I call on
&lt;/span>&lt;span style="color:#e6db74"> Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> It&amp;#39;s based on DARPA—the Defense Department project that led to the Internet,
&lt;/span>&lt;span style="color:#e6db74"> GPS, and so much more. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">ARPA-H will have a singular purpose—to drive
&lt;/span>&lt;span style="color:#e6db74"> breakthroughs in cancer, Alzheimer&amp;#39;s, diabetes, and more. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">A unity agenda
&lt;/span>&lt;span style="color:#e6db74"> for the nation. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">We can do this. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">My fellow Americans—tonight , we have
&lt;/span>&lt;span style="color:#e6db74"> gathered in a sacred space—the citadel of our democracy. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">In this Capitol,
&lt;/span>&lt;span style="color:#e6db74"> generation after generation, Americans have debated great questions amid great
&lt;/span>&lt;span style="color:#e6db74"> strife, and have done great things. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">We have fought for freedom, expanded
&lt;/span>&lt;span style="color:#e6db74"> liberty, defeated totalitarianism and terror. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">And built the strongest, freest,
&lt;/span>&lt;span style="color:#e6db74"> and most prosperous nation the world has ever known. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Now is the hour. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Our
&lt;/span>&lt;span style="color:#e6db74"> moment of responsibility. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Our test of resolve and conscience, of history itself.
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">It is in this moment that our character is formed. Our purpose is found. Our
&lt;/span>&lt;span style="color:#e6db74"> future is forged. &lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">Well I know this nation.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> =========
&lt;/span>&lt;span style="color:#e6db74"> FINAL ANSWER: The president did not mention Michael Jackson.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> QUESTION: {question}
&lt;/span>&lt;span style="color:#e6db74"> =========
&lt;/span>&lt;span style="color:#e6db74"> {summaries}
&lt;/span>&lt;span style="color:#e6db74"> =========
&lt;/span>&lt;span style="color:#e6db74"> FINAL ANSWER:
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
load_qa_chain(
llm,
chain_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;map_reduce&amp;#34;&lt;/span>,
question_prompt&lt;span style="color:#f92672">=&lt;/span>question_prompt,
combine_prompt&lt;span style="color:#f92672">=&lt;/span>combine_prompt
&lt;span style="color:#75715e"># these variables are the default values and can be modified/omitted&lt;/span>
document_variable_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>,
combine_document_variable_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;summaries&amp;#34;&lt;/span>,
map_reduce_document_variable_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="question-answering---refine">Question-Answering - refine&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> langchain.prompts &lt;span style="color:#f92672">import&lt;/span> PromptTemplate
refine_prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> The original question is as follows: {question}
&lt;/span>&lt;span style="color:#e6db74"> We have provided an existing answer: {existing_answer}
&lt;/span>&lt;span style="color:#e6db74"> We have the opportunity to refine the existing answer (only if needed) with
&lt;/span>&lt;span style="color:#e6db74"> some more context below.
&lt;/span>&lt;span style="color:#e6db74"> ------------
&lt;/span>&lt;span style="color:#e6db74"> {context_str}
&lt;/span>&lt;span style="color:#e6db74"> ------------
&lt;/span>&lt;span style="color:#e6db74"> Given the new context, refine the original answer to better answer the question.
&lt;/span>&lt;span style="color:#e6db74"> If the context isn&amp;#39;t useful, return the original answer.
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
question_prompt &lt;span style="color:#f92672">=&lt;/span> PromptTemplate&lt;span style="color:#f92672">.&lt;/span>from_template(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Context information is below.
&lt;/span>&lt;span style="color:#e6db74"> ------------
&lt;/span>&lt;span style="color:#e6db74"> {context_str}
&lt;/span>&lt;span style="color:#e6db74"> ------------
&lt;/span>&lt;span style="color:#e6db74"> Given the context information and not prior knowledge, answer the question:
&lt;/span>&lt;span style="color:#e6db74"> {question}
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
)
load_qa_chain(
llm,
chain_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;refine&amp;#34;&lt;/span>,
question_prompt&lt;span style="color:#f92672">=&lt;/span>question_prompt,
refine_prompt&lt;span style="color:#f92672">=&lt;/span>refine_prompt,
&lt;span style="color:#75715e"># these variables are the default values and can be modified/omitted&lt;/span>
document_variable_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;context_str&amp;#34;&lt;/span>,
initial_response_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;existing_answer&amp;#34;&lt;/span>,
)
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Google Scripts to label GitLab related emails</title><link>https://www.robert-sokolewicz.nl/posts/15_gmail_labels/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/15_gmail_labels/</guid><description>Preview of how my inbox looks like now :) If you are subscribed to many GitLab notifications, you might receive a lot of emails from GitLab for every merge request, issue, mention, review requested, and so on. Automatically labeling them in Gmail can be done by creating filters, but can be a bit difficult because you can only filter on titles and text body. A lot of useful information is actually present inside the email-headers, and for each notification GitLab adds GitLab-specific headers.</description><content>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="image-9.png"
style="display: block; margin: 0 auto;" />
&lt;figcaption class="center"
style="text-align: center;">
Preview of how my inbox looks like now :)
&lt;/figcaption>
&lt;/figure>
&lt;p>If you are subscribed to many GitLab notifications, you might receive a lot of emails from GitLab for every merge request, issue, mention, review requested, and so on. Automatically labeling them in Gmail can be done by creating filters, but can be a bit difficult because you can only filter on titles and text body. A lot of useful information is actually present inside the email-headers, and for each notification GitLab adds GitLab-specific headers. For example which project it belongs to or if it&amp;rsquo;s related to an issue or merge-request.&lt;/p>
&lt;p>What is nice about this is that it is straightforward to create a script that assigns a label to an email based on which GitLab-specific header it has.&lt;/p>
&lt;h2 id="google-script">Google Script&lt;/h2>
&lt;p>In short:&lt;/p>
&lt;ol>
&lt;li>go to script.google.com&lt;/li>
&lt;li>switch account if needed&lt;/li>
&lt;li>New project&lt;/li>
&lt;li>Add script that you want to run&lt;/li>
&lt;li>hit deploy and new deployment &lt;img src="image-1.png" alt="New deployment">&lt;/li>
&lt;li>select type: Web app &lt;img src="image-2.png" alt="Web App">&lt;/li>
&lt;li>add details &lt;img src="image-3.png" alt="app details">&lt;/li>
&lt;li>authorize &lt;img src="image-4.png" alt="authorize">&lt;/li>
&lt;li>go to trigger &lt;img src="image-5.png" alt="trigger menu">&lt;/li>
&lt;li>add details &lt;img src="image-6.png" alt="trigger details">&lt;/li>
&lt;/ol>
&lt;h2 id="the-script">The Script&lt;/h2>
&lt;p>The script is written in JavaScript and makes use of some Google magic.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">searchAllEmails&lt;/span>() {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>;
&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">threads&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">GmailApp&lt;/span>.&lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">start&lt;/span>, &lt;span style="color:#a6e22e">max&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">threads&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">threads&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">messages&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">threads&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">getMessages&lt;/span>();
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">messages&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">messages&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>];
&lt;span style="color:#a6e22e">processMessage&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>);
}
&lt;span style="color:#a6e22e">Logger&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;processed &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span>));
}
&lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span>;
}
}
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">processInbox&lt;/span>() {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">threads&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">GmailApp&lt;/span>.&lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;label:unprocessed&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">unprocessedLabel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">GmailApp&lt;/span>.&lt;span style="color:#a6e22e">getUserLabelByName&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;unprocessed&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">threads&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
}
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">threads&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">messages&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">threads&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">getMessages&lt;/span>();
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">messages&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">messages&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>];
&lt;span style="color:#a6e22e">processMessage&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>);
}
&lt;span style="color:#a6e22e">threads&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">removeLabel&lt;/span>(&lt;span style="color:#a6e22e">unprocessedLabel&lt;/span>);
}
}
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getOrCreateLabel&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">label&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">GmailApp&lt;/span>.&lt;span style="color:#a6e22e">getUserLabelByName&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">label&lt;/span>) {
&lt;span style="color:#a6e22e">label&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">GmailApp&lt;/span>.&lt;span style="color:#a6e22e">createLabel&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">label&lt;/span>;
}
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">processMessage&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>) {
&lt;span style="color:#75715e">// see https://docs.gitlab.com/ee/user/profile/notifications.html#email-headers-you-can-use-to-filter-email
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// for more options.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">issueLabel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getOrCreateLabel&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Issue&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">mrLabel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getOrCreateLabel&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Merge request&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">buildLabel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getOrCreateLabel&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Build&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">notificationLabel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getOrCreateLabel&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Notification&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">schedulerLabel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getOrCreateLabel&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;quantify-scheduler&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">coreLabel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getOrCreateLabel&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;quantify-core&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">mergedLabel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getOrCreateLabel&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;merged&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">reviewLabel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getOrCreateLabel&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;review-me&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;X-GitLab-Issue-ID&amp;#34;&lt;/span>)) {
&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getThread&lt;/span>().&lt;span style="color:#a6e22e">addLabel&lt;/span>(&lt;span style="color:#a6e22e">issueLabel&lt;/span>);
}
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;X-GitLab-MergeRequest-ID&amp;#34;&lt;/span>)) {
&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getThread&lt;/span>().&lt;span style="color:#a6e22e">addLabel&lt;/span>(&lt;span style="color:#a6e22e">mrLabel&lt;/span>);
}
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;X-GitLab-Author&amp;#34;&lt;/span>)) {
&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getThread&lt;/span>().&lt;span style="color:#a6e22e">addLabel&lt;/span>(&lt;span style="color:#a6e22e">commitLabel&lt;/span>);
}
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;X-GitLab-Pipeline-Id&amp;#34;&lt;/span>)) {
&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getThread&lt;/span>().&lt;span style="color:#a6e22e">addLabel&lt;/span>(&lt;span style="color:#a6e22e">buildLabel&lt;/span>);
}
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;X-GitLab-Project&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;quantify-scheduler&amp;#34;&lt;/span>) {
&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getThread&lt;/span>().&lt;span style="color:#a6e22e">addLabel&lt;/span>(&lt;span style="color:#a6e22e">schedulerLabel&lt;/span>);
}
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;X-GitLab-Project&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;quantify-core&amp;#34;&lt;/span>) {
&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getThread&lt;/span>().&lt;span style="color:#a6e22e">addLabel&lt;/span>(&lt;span style="color:#a6e22e">coreLabel&lt;/span>);
}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;X-GitLab-NotificationReason&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">value&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;review_requested&amp;#34;&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">label&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">reviewLabel&lt;/span>;
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">label&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">notificationLabel&lt;/span>;
}
&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getThread&lt;/span>().&lt;span style="color:#a6e22e">addLabel&lt;/span>(&lt;span style="color:#a6e22e">label&lt;/span>);
}
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;X-GitLab-MergeRequest-State&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;merged&amp;#34;&lt;/span>) {
&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">getThread&lt;/span>().&lt;span style="color:#a6e22e">addLabel&lt;/span>(&lt;span style="color:#a6e22e">mergedLabel&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>searchAllEmails&lt;/code> can be executed once to process your entire inbox, or if it takes too long cancel when you are satisfied. The function that gets executed every 5 minutes is &lt;code>processInbox&lt;/code> which looks at each email thread and each email inside that thread for threads that were updated in the last ten minutes. The code should be self-explanatory, but essentially:&lt;/p>
&lt;ol>
&lt;li>get email threads via &lt;code>GmailApp.search(&amp;quot;...&amp;quot;)&lt;/code>&lt;/li>
&lt;li>for each thread get email &lt;code>threads[i].getMessages()&lt;/code>&lt;/li>
&lt;li>for each email get the header &lt;code>message.getHeader(...)&lt;/code>&lt;/li>
&lt;li>if the header matches something GitLab specific, add label via &lt;code>message.getThread().addLabel&lt;/code> and if it doesn&amp;rsquo;t exist, create that label with &lt;code>GmailApp.createLabel(name)&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>In the free version of Google Scripts, there is a usage limit that I kept running into (API calls to &lt;code>GmailApp&lt;/code> and a max daily run time-limit of 90 minutes), so I added a condition in the code that only processes emails with the &lt;code>unprocessed&lt;/code> label, and then remove it once done. To get new emails labelled as &lt;code>unprocessed&lt;/code> the easiest is to create a filter inside Gmail itself that will label any email that comes into your inbox. The script will then process and remove the label within 5 minutes.&lt;/p>
&lt;p>There are a few more headers and options that might be useful for you as listed in &lt;a href="https://docs.gitlab.com/ee/user/profile/notifications.html#email-headers-you-can-use-to-filter-email">https://docs.gitlab.com/ee/user/profile/notifications.html#email-headers-you-can-use-to-filter-email&lt;/a>.&lt;/p></content></item><item><title>Unit testing - Classical vs. London Approaches</title><link>https://www.robert-sokolewicz.nl/posts/14_unit_testing/</link><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/14_unit_testing/</guid><description>Most, if not all, software projects suffer from the same problem. When starting the project it&amp;rsquo;s very easy to include new features. One feature might take one day to implement, but as the code base grows, implementing something new will take a week, a month, or half a year until it&amp;rsquo;s impossible to implement something without breaking something else. Different parts of the code depend on each other and this can create a cascading effect where a small change propagates throughout the entire codebase breaking a lot of stuff.</description><content>&lt;p>Most, if not all, software projects suffer from the same problem. When starting the project it&amp;rsquo;s very easy to include new features. One feature might take one day to implement, but as the code base grows, implementing something new will take a week, a month, or half a year until it&amp;rsquo;s impossible to implement something without breaking something else. Different parts of the code depend on each other and this can create a cascading effect where a small change propagates throughout the entire codebase breaking a lot of stuff.&lt;/p>
&lt;p>Unit tests are safeguards that help the developer in writing code that does not break the existing code, making it easier to make progress when working on the codebase.&lt;/p>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="images/1.svg"
style="display: block; margin: 0 auto;" />
&lt;figcaption class="center"
style="text-align: center;">
Figure 1. The time that we spend on developing and expanding the code base grows exponentially with the amount of progress already made.
&lt;/figcaption>
&lt;/figure>
&lt;p>In the early stages of a project, it is probably easier and faster to implement new features than it is to write unit tests for them. For smaller projects implementing unit tests might even hinder the progress of the project, but in the long run, it is worthwhile.&lt;/p>
&lt;h2 id="what-is-a-unit-test">What is a unit test?&lt;/h2>
&lt;p>Let&amp;rsquo;s assume that our codebase has a &lt;code>Cat&lt;/code> class that represents a cat that can meow and always feels hungry until it gets some food to eat. Some unit tests for this class could be something like&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_is_hungry&lt;/span>():
cat &lt;span style="color:#f92672">=&lt;/span> Cat(&lt;span style="color:#e6db74">&amp;#34;funnywhiskers&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">assert&lt;/span> cat&lt;span style="color:#f92672">.&lt;/span>is_hungry &lt;span style="color:#f92672">is&lt;/span> True
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_meow&lt;/span>():
cat &lt;span style="color:#f92672">=&lt;/span> Cat(&lt;span style="color:#e6db74">&amp;#34;funnywhiskers&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">assert&lt;/span> cat&lt;span style="color:#f92672">.&lt;/span>meow() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Meow!&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_eat&lt;/span>():
cat &lt;span style="color:#f92672">=&lt;/span> Cat(&lt;span style="color:#e6db74">&amp;#34;funnywhiskers&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">assert&lt;/span> cat&lt;span style="color:#f92672">.&lt;/span>eat() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Yum!&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">assert&lt;/span> cat&lt;span style="color:#f92672">.&lt;/span>is_hungry() &lt;span style="color:#f92672">is&lt;/span> False
&lt;span style="color:#66d9ef">assert&lt;/span> cat&lt;span style="color:#f92672">.&lt;/span>eat() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m not hungry.&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we see that even though we have one &lt;code>Cat&lt;/code> class, the tests are split into smaller pieces, each testing a small aspect of that class. This is where the name &amp;ldquo;unit&amp;rdquo; comes from. Furthermore, each test is small, to the point, and fast. And lastly, each test is &lt;em>isolated&lt;/em> from each other. What isolation means exactly, we will explain shortly.&lt;/p>
&lt;p>A unit test has the following properties:&lt;/p>
&lt;ol>
&lt;li>it verifies a piece of code.&lt;/li>
&lt;li>it is fast.&lt;/li>
&lt;li>it is isolated.&lt;/li>
&lt;/ol>
&lt;p>The requirement that a unit test is isolated is something that many people have strong opinions about, so strong even, that we broadly have two schools of thought: The London (mockist) and the Detroit (classical) school.&lt;/p>
&lt;h2 id="the-classic-view-of-isolation">The classic view of isolation&lt;/h2>
&lt;p>Let us examine the classical school first. Imagine that our cat codebase has grown quite a bit and now we also have an &lt;code>Owner&lt;/code> class that is responsible for getting the food for the cat. Again, a simple test to test this functionality would be&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_classical_eat&lt;/span>():
cat &lt;span style="color:#f92672">=&lt;/span> Cat(&lt;span style="color:#e6db74">&amp;#34;funnywhiskers&amp;#34;&lt;/span>)
owner &lt;span style="color:#f92672">=&lt;/span> Owner(&lt;span style="color:#e6db74">&amp;#34;Robert&amp;#34;&lt;/span>)
food &lt;span style="color:#f92672">=&lt;/span> owner&lt;span style="color:#f92672">.&lt;/span>get_food(&lt;span style="color:#e6db74">&amp;#34;fish&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">assert&lt;/span> cat&lt;span style="color:#f92672">.&lt;/span>eat(food) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Yum! Ate fish.&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">assert&lt;/span> cat&lt;span style="color:#f92672">.&lt;/span>is_hungry &lt;span style="color:#f92672">is&lt;/span> False
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is a small issue with this test, however. We are testing whether the &lt;code>.eat&lt;/code> method and &lt;code>.is_hungry&lt;/code> method are working as intended, but what if we introduce a change in the codebase corresponding to the &lt;code>Owner.get_food&lt;/code> method in such a way that &lt;code>cat.eat(food) != &amp;quot;Yum! Ate fish.&amp;quot;&lt;/code>. The test will fail, but not because anything is wrong with our cat, but because we changed the behavior elsewhere. This is the classic example of touching one part of the code and it breaks something else. This cascading effect of a bug that propagates throughout the code base and fails a lot of tests, is not necessarily wrong. If many tests fail because we made a change to &lt;code>.get_food&lt;/code> it means that the codebase heavily depends on it and we discovered that it&amp;rsquo;s quite an essential piece of code.&lt;/p>
&lt;p>The downside, however, is that when a lot of tests fail it becomes difficult to isolate where the problem exactly is. As mentioned, in this case, we&amp;rsquo;re testing the eating behavior of the cat, but the problem lies in the &lt;code>.get_food&lt;/code> method of &lt;code>Owner&lt;/code>. And according to the Londonists, this is due to isolation.&lt;/p>
&lt;h2 id="the-london-view-of-isolation">The London view of isolation&lt;/h2>
&lt;p>When testing a piece of code that depends on other parts of the codebase, the Londonists say we should replace those dependencies with dummies (also called doubles or mocks). The above test then becomes&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_london_eat&lt;/span>(pytest_mock):
mock_owner &lt;span style="color:#f92672">=&lt;/span> pytest_mock&lt;span style="color:#f92672">.&lt;/span>Mock(spec&lt;span style="color:#f92672">=&lt;/span>Owner)
mock_owner&lt;span style="color:#f92672">.&lt;/span>get_food&lt;span style="color:#f92672">.&lt;/span>return_value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fake fish&amp;#34;&lt;/span>
cat &lt;span style="color:#f92672">=&lt;/span> Cat(&lt;span style="color:#e6db74">&amp;#34;funnywhiskers&amp;#34;&lt;/span>)
food &lt;span style="color:#f92672">=&lt;/span> mock_owner&lt;span style="color:#f92672">.&lt;/span>get_food(&lt;span style="color:#e6db74">&amp;#34;fake fish&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">assert&lt;/span> cat&lt;span style="color:#f92672">.&lt;/span>eat(food) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Yum! Ate fake fish.&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">assert&lt;/span> cat&lt;span style="color:#f92672">.&lt;/span>is_hungry &lt;span style="color:#f92672">is&lt;/span> False
&lt;/code>&lt;/pre>&lt;/div>&lt;p>where we used the mocking capability of pytest to create a fake version of &lt;code>Owner&lt;/code>. The line &lt;code>mock_owner.get_food.return_value&lt;/code> sets the return value of &lt;code>get_food&lt;/code> regardless of how &lt;code>get_food&lt;/code> is implemented in the code base.&lt;/p>
&lt;h2 id="a-note-on-dependencies">A note on dependencies&lt;/h2>
&lt;p>In the classical style of testing, it is still important that unit tests do not depend on each other. Certain dependencies that are shared, should still be mocked even in the classical style. For example, updating a shared database might cause issues with other tests that operate on the same database. Imagine a hundred tests that all add the same cat named &lt;em>funnywhiskers&lt;/em> to the database. This can cause many problems while testing, either because the database requires unique cat names or maybe because there is a test that adds and removes &lt;em>Funnywhiskers&lt;/em> from the database and asserts that no there is no &lt;em>Funnywhiskers&lt;/em> in the database anymore.&lt;/p>
&lt;h2 id="comparisons">Comparisons&lt;/h2>
&lt;p>As mentioned above, isolation in the London school attempts to isolate dependencies and as such test small &amp;ldquo;units&amp;rdquo; of code. This has a few side effects though (some positive, some negative). These tests tend to be more focussed on the implementation of code, rather than the behavior of code. In the &lt;code>get_food&lt;/code> example, if we refactor the code so that &lt;code>get_food&lt;/code> returns an instance of a &lt;code>Food&lt;/code> object, and &lt;code>.eat&lt;/code> accepts this food instance the classical test will pass, whereas the London test will fail because &lt;code>get_food&lt;/code> is mocked in a way to return a &lt;code>str&lt;/code> object, rather than a &lt;code>Food&lt;/code> object. Consequently, classical tests generally protect better against code refactors.&lt;/p>
&lt;p>One benefit of London-style testing is that if you have a large code base with a lot of tests, if you introduce a bug in an important piece of code it will only cause relevant tests to fail and allow you to quickly figure out where you introduced the bug. In the classical style of unit testing, you will see many more tests that fail because of the dependency issue. If you run all the unit tests frequently however, (e.g. with every commit or even more often) you should be able to quickly figure out what went wrong anyway because you haven&amp;rsquo;t made many changes yet. So in practice, this shouldn&amp;rsquo;t be too big of a problem for developers.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Aspect&lt;/th>
&lt;th>Classical (Detroit) School&lt;/th>
&lt;th>London (Mockist) School&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Isolation&lt;/strong>&lt;/td>
&lt;td>Units are not isolated from each other; only the tests are isolated.&lt;/td>
&lt;td>Units under test are isolated from each other.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Unit Under Test&lt;/strong>&lt;/td>
&lt;td>A unit of behavior.&lt;/td>
&lt;td>A unit of code, usually a class.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Dependencies&lt;/strong>&lt;/td>
&lt;td>Only shared dependencies are replaced with test doubles.&lt;/td>
&lt;td>All dependencies except immutable ones are replaced with test doubles.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Granularity&lt;/strong>&lt;/td>
&lt;td>May not provide as fine-grained control as the London School.&lt;/td>
&lt;td>Provides better granularity.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Ease of Testing&lt;/strong>&lt;/td>
&lt;td>Less focused on ease of testing large graphs of interconnected classes.&lt;/td>
&lt;td>Makes it easier to test large graphs of interconnected classes.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Debugging&lt;/strong>&lt;/td>
&lt;td>Doesn&amp;rsquo;t make it particularly easy or hard to find which functionality contains a bug.&lt;/td>
&lt;td>Easier to find which functionality contains a bug.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Issues&lt;/strong>&lt;/td>
&lt;td>Does not hide issues with code design.&lt;/td>
&lt;td>May hide issues with code design due to focus on units of code rather than units of behavior.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Over-Specification&lt;/strong>&lt;/td>
&lt;td>Less likely to couple tests to the system under test’s (SUT’s) implementation details.&lt;/td>
&lt;td>Higher risk of over-specification; tests could become coupled to the SUT’s implementation details.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></content></item><item><title>Debugging gitlab pipeline docker containers</title><link>https://www.robert-sokolewicz.nl/posts/13_gitlab_docker/</link><pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/13_gitlab_docker/</guid><description>docker images and containers Sometimes a pipeline that is running on GitLab has unexpected behavior, for example when a build is different from when you execute a build locally on your laptop. For debugging it is very useful to have the same environment, and sometimes just running a fresh conda environment and installing all the requirements is not enough.
A container is merely an instance that is running a docker image, and so all we need to do is find the Docker image reference in the GitLab registry and we&amp;rsquo;re good to go.</description><content>&lt;h2 id="docker-images-and-containers">docker images and containers&lt;/h2>
&lt;p>Sometimes a pipeline that is running on GitLab has unexpected behavior, for example when a build is different from when you execute a build locally on your laptop. For debugging it is very useful to have the same environment, and sometimes just running a fresh conda environment and installing all the requirements is not enough.&lt;/p>
&lt;p>A container is merely an instance that is running a docker image, and so all we need to do is find the Docker image reference in the GitLab registry and we&amp;rsquo;re good to go.&lt;/p>
&lt;h2 id="looking-up-the-docker-image-reference">looking up the docker image reference&lt;/h2>
&lt;ol>
&lt;li>in your GitLab repository, navigate in the menu on the left, to Deploy &amp;gt; Container Registry
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="images/image.png"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;/li>
&lt;li>search for the branch name&lt;/li>
&lt;li>click the copy-to-clipboard button&lt;/li>
&lt;/ol>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="images/image-2.png"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>Sometimes you have a pipeline that creates another docker image, in which case you can often find the image name in the log of your pipeline. In each case, the reference will look similar to:&lt;/p>
&lt;pre>&lt;code>registry.gitlab.com/&amp;lt;repo&amp;gt;/&amp;lt;pipeline name&amp;gt;/python3.8@sha256:ce3f78d603803740615069e7680715d3707998671db4ee32fbec3e98f4dc2d53
&lt;/code>&lt;/pre>&lt;h2 id="executing-the-docker-container">executing the docker container&lt;/h2>
&lt;p>The registry is not publicly available by default, so before creating a new docker container, you&amp;rsquo;ll have to log into the registry first:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker login registry.gitlab.com
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which will ask for your GitLab username and password. If you have two-factor authentication enabled, you&amp;rsquo;ll have to create an authentication token in the browser and use that as your password instead.&lt;/p>
&lt;p>Now that we are logged in, you can create a new container that will run this image for you with the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker run -it --name my-container &amp;lt;image-path&amp;gt; /bin/bash
&lt;/code>&lt;/pre>&lt;/div>&lt;p>here:&lt;/p>
&lt;ul>
&lt;li>the &lt;code>-it&lt;/code> flag makes sure that the container runs in an interactive mode&lt;/li>
&lt;li>&lt;code>&amp;lt;image-path&amp;gt;&lt;/code> should be replaced with the image path that we just copied&lt;/li>
&lt;li>and &lt;code>/bin/bash&lt;/code> is the command that will be executed first. This is often optional, but sometimes there&amp;rsquo;s a default &lt;code>CMD&lt;/code> specified in the image that we would like to override while debugging.&lt;/li>
&lt;/ul>
&lt;h2 id="troubleshooting">troubleshooting&lt;/h2>
&lt;h3 id="cannot-connect-to-docker-daemon">cannot connect to Docker Daemon&lt;/h3>
&lt;p>The first time I tried this, I ran into the following problem. Running &lt;code>docker run&lt;/code> would give me back&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Many solutions can be found on Stackoverflow, but for me, the problem was that I was running Docker inside WSL, but I had installed Docker both in my Ubuntu partition and on Windows. The solution was to uninstall both, install the Windows version and in the settings, you specify that you want to run docker inside WSL.&lt;/p>
&lt;h3 id="permission-denied-while-trying-to-connect">permission denied while trying to connect&lt;/h3>
&lt;p>then I got this problem&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker: Got permission denied &lt;span style="color:#66d9ef">while&lt;/span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.35/containers/create: dial unix /var/run/docker.sock: connect: permission denied. See &lt;span style="color:#e6db74">&amp;#39;docker run --help&amp;#39;&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>when using Unix (WSL/Linux/macOS) you have to run docker either as a super user (&lt;code>sudo docker run&lt;/code>) or you have to add yourself to the &lt;code>docker&lt;/code> group:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo groupadd docker
sudo usermod -aG docker $USER
newgrp docker
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first line creates the &lt;code>docker&lt;/code> group (if it doesn&amp;rsquo;t yet exist), the second line adds you to that group (&lt;code>-aG&lt;/code> stands for append and group), and the third logs you into that group. The third option is just so that you don&amp;rsquo;t have to reload the shell. You could just as well reopen your terminal.&lt;/p></content></item><item><title>Git ahoy! A Pirate's Tale of Version Control</title><link>https://www.robert-sokolewicz.nl/posts/12_gitbeard/</link><pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/12_gitbeard/</guid><description>Adventure Begins As the dawn cracks over the horizon, Captain Gitbeard, a notorious pirate, and his crew of misfits aboard the ship, &amp;ldquo;The Digital Marauder,&amp;rdquo; sail through the emerald waves of the Caribbean. They maintain an inventory of their loot with a shared file named loot.txt version controlled through git. But as the crew is always a bit tipsy, they&amp;rsquo;ve been known to commit a few mistakes now and then.</description><content>&lt;h2 id="adventure-begins">Adventure Begins&lt;/h2>
&lt;p>As the dawn cracks over the horizon, Captain Gitbeard, a notorious pirate, and his crew of misfits aboard the ship, &amp;ldquo;The Digital Marauder,&amp;rdquo; sail through the emerald waves of the Caribbean. They maintain an inventory of their loot with a shared file named &lt;code>loot.txt&lt;/code> version controlled through git. But as the crew is always a bit tipsy, they&amp;rsquo;ve been known to commit a few mistakes now and then.&lt;/p>
&lt;p>Their &lt;code>loot.txt&lt;/code> file at the moment looks like this:&lt;/p>
&lt;pre>&lt;code>Pieces of Eight: 500
Gold Bars: 20
Jewelled Necklaces: 15
Diamonds: 7
&lt;/code>&lt;/pre>&lt;p>The git log shows:&lt;/p>
&lt;pre>&lt;code>commit 1234567
Author: Captain Gitbeard &amp;lt;gitbeard@pirate.net&amp;gt;
Date: Fri Jul 7 10:00:00 2023
Initial loot list.
&lt;/code>&lt;/pre>&lt;h2 id="a-blunder-at-plunder">A Blunder at Plunder&lt;/h2>
&lt;p>After a successful raid on a Spanish galleon, the crew updates the &lt;code>loot.txt&lt;/code> file with their new treasures. First Mate Morgan, a bit too merry with rum, updates the file as:&lt;/p>
&lt;pre>&lt;code>Pieces of Eight: 1500
Gold Bars: 120
Jewelled Necklaces: 150
Diamonds: 170
&lt;/code>&lt;/pre>&lt;p>He then commits this with the message &amp;ldquo;Plunder from the Spanish galleon&amp;rdquo;. He forgot that the crew only found 100 new Pieces of Eight, 10 new Gold Bars, 5 new Necklaces, and 3 new Diamonds.&lt;/p>
&lt;p>The git history now looks like:&lt;/p>
&lt;pre>&lt;code>commit 7654321
Author: First Mate Morgan &amp;lt;morgan@pirate.net&amp;gt;
Date: Sat Jul 8 12:00:00 2023
Plunder from the Spanish galleon.
commit 1234567
Author: Captain Gitbeard &amp;lt;Gitbeard@pirate.net&amp;gt;
Date: Fri Jul 7 10:00:00 2023
Initial loot list.
&lt;/code>&lt;/pre>&lt;p>Captain Gitbeard realizes the blunder and orders Morgan to amend the last commit with the correct numbers. Morgan runs:&lt;/p>
&lt;pre>&lt;code>git checkout HEAD
&lt;/code>&lt;/pre>&lt;p>Corrects &lt;code>loot.txt&lt;/code>:&lt;/p>
&lt;pre>&lt;code>Pieces of Eight: 600
Gold Bars: 30
Jewelled Necklaces: 20
Diamonds: 10
&lt;/code>&lt;/pre>&lt;p>And then amends the previous commit:&lt;/p>
&lt;pre>&lt;code>git add loot.txt
git commit --amend -m &amp;quot;Plunder from the Spanish galleon&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Now the git history shows the correct values:&lt;/p>
&lt;pre>&lt;code>commit abcdefg
Author: First Mate Morgan &amp;lt;morgan@pirate.net&amp;gt;
Date: Sat Jul 8 12:00:00 2023
Plunder from the Spanish galleon.
commit 1234567
Author: Captain Gitbeard &amp;lt;Gitbeard@pirate.net&amp;gt;
Date: Fri Jul 7 10:00:00 2023
Initial loot list.
&lt;/code>&lt;/pre>&lt;h2 id="the-tale-of-the-missing-loot">The Tale of the Missing Loot&lt;/h2>
&lt;p>During an audit by Quartermaster Anne, she notices the &lt;code>loot.txt&lt;/code> file doesn&amp;rsquo;t list their cache of rum. As she tries to insert this into the initial inventory, she realizes she can&amp;rsquo;t simply amend the commit as it would rewrite everyone&amp;rsquo;s history after that commit.&lt;/p>
&lt;p>To remedy this, she decides to use the interactive rebase to modify the initial commit. She runs:&lt;/p>
&lt;pre>&lt;code>git rebase -i --root
&lt;/code>&lt;/pre>&lt;p>In the text editor that opens up, she changes the word &amp;lsquo;pick&amp;rsquo; to &amp;lsquo;edit&amp;rsquo; for the initial commit, then saves and exits. Git now pauses at the commit she wants to edit.&lt;/p>
&lt;p>She updates &lt;code>loot.txt&lt;/code> to:&lt;/p>
&lt;pre>&lt;code>Pieces of Eight: 500
Gold Bars: 20
Jewelled Necklaces: 15
Diamonds: 7
Rum: 100 barrels
&lt;/code>&lt;/pre>&lt;p>Then, she stages the changes and commits them with:&lt;/p>
&lt;pre>&lt;code>git add loot.txt
git commit --amend -m &amp;quot;Initial loot list.&amp;quot;
&lt;/code>&lt;/pre>&lt;p>To continue the rebase, she runs:&lt;/p>
&lt;pre>&lt;code>git rebase --continue
&lt;/code>&lt;/pre>&lt;p>The &lt;code>loot.txt&lt;/code> file is corrected, and the git history remains consistent for all crew members.&lt;/p>
&lt;h2 id="the-end">The End&lt;/h2>
&lt;p>The &amp;ldquo;Digital Marauder&amp;rdquo; continues to sail through the digital seas, correcting and updating their loot list with each new raid. The crew finds that despite their tipsiness, git gives them the power to make their mistakes disappear - as if they&amp;rsquo;d never happened.&lt;/p></content></item><item><title>All about type hinting in Python</title><link>https://www.robert-sokolewicz.nl/posts/9_typehinting/</link><pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/9_typehinting/</guid><description>What is Type Hinting? Type hinting is a feature introduced in Python 3.5 that allows you to annotate the types of variables, function arguments, and return values. It provides optional typing to the Python language without actually enforcing the types at runtime.
Type hints are used to indicate the expected types of variables and functions, making your code more explicit and self-documenting. They help you catch potential type-related errors early and improve code development and maintainability.</description><content>&lt;h3 id="what-is-type-hinting">What is Type Hinting?&lt;/h3>
&lt;p>Type hinting is a feature introduced in Python 3.5 that allows you to annotate
the types of variables, function arguments, and return values. It provides
optional typing to the Python language without actually enforcing the
types at runtime.&lt;/p>
&lt;p>Type hints are used to indicate the expected types of variables and functions,
making your code more explicit and self-documenting. They help you catch
potential type-related errors early and improve code development and
maintainability.&lt;/p>
&lt;h3 id="why-is-type-hinting-useful">Why is Type Hinting Useful?&lt;/h3>
&lt;p>Type hinting offers several benefits:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Improved Code Readability&lt;/strong>: Type hints make the code more self-explanatory
by explicitly stating the expected types. It helps other developers
understand your code more easily.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Early Detection of Errors&lt;/strong>: Type hints allow static analysis tools to
catch type-related errors before your code runs. This helps identify
potential bugs and allows you to fix them early in the development process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Enhanced IDE Support&lt;/strong>: Many integrated development environments (IDEs) can
use type hints to provide better code suggestions, autocompletion, and error
detection while you write your code. This can significantly boost your
productivity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Documentation and Design Clarity&lt;/strong>: Type hints act as documentation for
your code, making it clear what types are expected and returned by functions.
They help in designing clean interfaces and APIs.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>I find the third point the most useful. If, for example, you&amp;rsquo;re building a data
processing pipeline, and are writing the data preprocessing method, type hinting
allows you to tell your IDE that you are working with a &lt;code>pandas.DataFrame&lt;/code> and in
return, you get all the code suggestions and autocompletion for free.&lt;/p>
&lt;h3 id="type-hinting-examples">Type Hinting Examples&lt;/h3>
&lt;p>Let&amp;rsquo;s look at some examples of how type hinting can improve your code development:&lt;/p>
&lt;h4 id="1-annotating-variable-types">1. Annotating Variable Types:&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># Without Type Hinting&lt;/span>
name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;John Doe&amp;#39;&lt;/span>
age &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span>
balance &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100.5&lt;/span>
&lt;span style="color:#75715e"># With Type Hinting&lt;/span>
name: str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;John Doe&amp;#39;&lt;/span>
age: int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span>
balance: float &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100.5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By adding type hints to variables, you make it clear what types they should
hold, making the code more readable.&lt;/p>
&lt;h4 id="2-specifying-function-argument-and-return-types">2. Specifying Function Argument and Return Types:&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">multiply&lt;/span>(a: int, b: int) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> int:
&lt;span style="color:#66d9ef">return&lt;/span> a &lt;span style="color:#f92672">*&lt;/span> b
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above example, the &lt;code>multiply&lt;/code> function takes two integer arguments and
returns an integer. The type hints help convey the expected types, enabling
better understanding and potential error detection.&lt;/p>
&lt;h4 id="3-annotating-complex-data-structures">3. Annotating Complex Data Structures:&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> typing &lt;span style="color:#f92672">import&lt;/span> List, Tuple
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">process_data&lt;/span>(data: List[Tuple[str, int]]) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> List[str]:
result &lt;span style="color:#f92672">=&lt;/span> []
&lt;span style="color:#66d9ef">for&lt;/span> name, age &lt;span style="color:#f92672">in&lt;/span> data:
result&lt;span style="color:#f92672">.&lt;/span>append(f&lt;span style="color:#e6db74">&amp;#39;{name} is {age} years old.&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, the &lt;code>process_data&lt;/code> function expects a list of tuples, where the first
element is a string and the second element is an integer. It returns a list of
strings. The type hints provide clarity on the data structure, enabling better
understanding and reducing errors.&lt;/p>
&lt;h4 id="4-handling-union-and-optional-types">4. Handling Union and Optional Types:&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> typing &lt;span style="color:#f92672">import&lt;/span> Union, Optional
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">greet&lt;/span>(name: Union[str, None]) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> Optional[str]:
&lt;span style="color:#66d9ef">if&lt;/span> name &lt;span style="color:#f92672">is&lt;/span> None:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Hello!&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> f&lt;span style="color:#e6db74">&amp;#39;Hello, {name}!&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, the &lt;code>greet&lt;/code> function can accept either a string or &lt;code>None&lt;/code> as
the &lt;code>name&lt;/code> argument. It returns an optional string, which means it can return
either a string or &lt;code>None&lt;/code>. Type hints allow you to express such scenarios
accurately.&lt;/p>
&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>Type hinting in Python is a powerful feature that enhances code readability,
improves error detection, and provides better development tooling support. By
explicitly stating the expected types, you can make your code more
understandable, maintainable, and robust.&lt;/p></content></item><item><title>Getting rid of 'fatal: The current branch &lt;new branch> has no upstream branch' in git</title><link>https://www.robert-sokolewicz.nl/posts/8_git_upstream/</link><pubDate>Mon, 12 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/8_git_upstream/</guid><description>What is an upstream branch? In Git, an upstream branch refers to the branch in a remote repository that your local branch is associated with or tracks. It serves as a reference point for your local branch and determines where your changes will be pushed when you use the git push command.
When you clone a repository, Git sets up a default upstream branch for the branch you&amp;rsquo;re currently on. For example, if you clone a repository and checkout the master branch, your local master branch will typically have an upstream branch called origin/master, where origin is the default name for the remote repository.</description><content>&lt;h1 id="what-is-an-upstream-branch">What is an upstream branch?&lt;/h1>
&lt;p>In Git, an upstream branch refers to the branch in a remote repository that your local branch is associated with or tracks. It serves as a reference point for your local branch and determines where your changes will be pushed when you use the &lt;code>git push&lt;/code> command.&lt;/p>
&lt;p>When you clone a repository, Git sets up a default upstream branch for the branch you&amp;rsquo;re currently on. For example, if you clone a repository and checkout the &lt;code>master&lt;/code> branch, your local &lt;code>master&lt;/code> branch will typically have an upstream branch called &lt;code>origin/master&lt;/code>, where &lt;code>origin&lt;/code> is the default name for the remote repository.&lt;/p>
&lt;p>Having an upstream branch allows you to easily push and pull changes between your local branch and the corresponding branch in the remote repository. When you push your local changes using &lt;code>git push&lt;/code>, Git knows which remote branch to update based on the upstream branch configuration.&lt;/p>
&lt;p>By default, Git doesn&amp;rsquo;t set an upstream branch when you create a new branch locally. You need to explicitly set the upstream branch using the &lt;code>--set-upstream&lt;/code> option when pushing for the first time, like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git push --set-upstream origin your-branch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or using the &lt;code>-u&lt;/code> flag&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git push -u origin your-branch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Setting the upstream branch allows you to use &lt;code>git push&lt;/code> without specifying the remote branch name every time, as Git will remember the association between your local branch and its upstream branch.&lt;/p>
&lt;h1 id="how-to-automatically-set-the-upstream-branch">How to automatically set the upstream branch&lt;/h1>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git config --global push.default simple
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To avoid setting upstream explicitly every time you push a new branch, you can configure Git with the push.default option. This option determines the behavior when pushing branches that do not have a configured upstream branch. Here are the possible values for push.default:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>nothing: This is the default option. Git won&amp;rsquo;t push any branch without an upstream branch explicitly specified.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>current: Git pushes the current branch to a branch of the same name on the remote repository, even if it doesn&amp;rsquo;t have an upstream branch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>upstream: Git pushes the current branch to its upstream branch, if it has one.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>simple: This option is recommended. Git pushes the current branch to its upstream branch if it exists. If the upstream branch doesn&amp;rsquo;t exist, it will push to a branch of the same name on the remote repository, creating a new branch if necessary. However, it won&amp;rsquo;t push if the upstream branch&amp;rsquo;s name is different.&lt;/p>
&lt;/li>
&lt;/ul></content></item><item><title>Mocking context managers with pytest</title><link>https://www.robert-sokolewicz.nl/posts/7_mock_context_manager/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/7_mock_context_manager/</guid><description>In software testing, it is often necessary to mock external dependencies, such as API calls, to isolate the code under test and simulate specific behaviors. pytest, a popular testing framework in Python, provides powerful mocking capabilities through its pytest-mock plugin. Mocking functions and methods is not so hard, but mocking context managers can be tricky, as sometimes you will need to mock the __enter__() as well.
Example 1 Suppose we have</description><content>&lt;p>In software testing, it is often necessary to mock external dependencies, such as API calls, to isolate the code under test and simulate specific behaviors. &lt;code>pytest&lt;/code>, a popular testing framework in Python, provides powerful mocking capabilities through its &lt;code>pytest-mock&lt;/code> plugin. Mocking functions and methods is not so hard, but mocking context managers can be tricky, as sometimes you will need to mock the &lt;code>__enter__()&lt;/code> as well.&lt;/p>
&lt;h1 id="example-1">Example 1&lt;/h1>
&lt;p>Suppose we have&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fetch_data&lt;/span>():
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;https://api.example.com/data&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>json()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which issues an HTTP GET request to &lt;a href="https://api.example.com/data">https://api.example.com/data&lt;/a> and returns whatever the response is in a json format.&lt;/p>
&lt;p>A unit test for this function could look like&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_fetch_data&lt;/span>():
&lt;span style="color:#66d9ef">with&lt;/span> mock&lt;span style="color:#f92672">.&lt;/span>patch(&lt;span style="color:#e6db74">&amp;#34;requests.get&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> mock_get:
&lt;span style="color:#75715e"># Set up the desired behavior for the mocked function&lt;/span>
mock_get&lt;span style="color:#f92672">.&lt;/span>return_value&lt;span style="color:#f92672">.&lt;/span>json&lt;span style="color:#f92672">.&lt;/span>return_value &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Mocked data&amp;#34;&lt;/span>}
&lt;span style="color:#75715e"># Call the function under test&lt;/span>
result &lt;span style="color:#f92672">=&lt;/span> fetch_data()
&lt;span style="color:#75715e"># Assert the expected behavior&lt;/span>
&lt;span style="color:#66d9ef">assert&lt;/span> result &lt;span style="color:#f92672">==&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Mocked data&amp;#34;&lt;/span>}
mock_get&lt;span style="color:#f92672">.&lt;/span>assert_called_once_with(&lt;span style="color:#e6db74">&amp;#34;https://api.example.com/data&amp;#34;&lt;/span>)
mock_get&lt;span style="color:#f92672">.&lt;/span>return_value&lt;span style="color:#f92672">.&lt;/span>json&lt;span style="color:#f92672">.&lt;/span>assert_called_once()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>where we mock the &lt;code>requests.get&lt;/code> function directly. In the &lt;code>fetch_data&lt;/code> function we are returning &lt;code>response.json()&lt;/code> that we would also like to mock with some dummy return data. By chaining &lt;code>mock_get.return_value&lt;/code> together with &lt;code>json.return_value&lt;/code> we can assign the return value of &lt;code>response.json()&lt;/code>.&lt;/p>
&lt;p>One benefit of mockers is that is easy to assert how a method was called, and even how often it was called. In this case, we used&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># Assert the expected behavior&lt;/span>
&lt;span style="color:#66d9ef">assert&lt;/span> result &lt;span style="color:#f92672">==&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Mocked data&amp;#34;&lt;/span>}
mock_get&lt;span style="color:#f92672">.&lt;/span>assert_called_once_with(&lt;span style="color:#e6db74">&amp;#34;https://api.example.com/data&amp;#34;&lt;/span>)
mock_get&lt;span style="color:#f92672">.&lt;/span>return_value&lt;span style="color:#f92672">.&lt;/span>json&lt;span style="color:#f92672">.&lt;/span>assert_called_once()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Things become a little tricky in the next example&lt;/p>
&lt;h1 id="example-2">Example 2&lt;/h1>
&lt;p>&lt;code>requests.get()&lt;/code> returns a &lt;code>Request&lt;/code> object that is a context manager. So often in code we will see the following example instead.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fetch_data&lt;/span>():
&lt;span style="color:#66d9ef">with&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;https://api.example.com/data&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> response:
&lt;span style="color:#66d9ef">return&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>json()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and running the above test on this function instead, will give us a nice warning:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> &lt;span style="color:#75715e"># Assert the expected behavior&lt;/span>
&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">assert&lt;/span> result &lt;span style="color:#f92672">==&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Mocked data&amp;#34;&lt;/span>}
E &lt;span style="color:#a6e22e">AssertionError&lt;/span>: &lt;span style="color:#66d9ef">assert&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>MagicMock name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;get().__enter__().json()&amp;#39;&lt;/span> id&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;140616315269184&amp;#39;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;message&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Mocked data&amp;#39;&lt;/span>}
E Full diff:
E &lt;span style="color:#f92672">-&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;message&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Mocked data&amp;#39;&lt;/span>}
E &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>MagicMock name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;get().__enter__().json()&amp;#39;&lt;/span> id&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;140616315269184&amp;#39;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The error already gives us a hint that we need to mock &lt;code>__enter__&lt;/code> as well. Whereas before &lt;code>response&lt;/code> was the actual &lt;code>Response&lt;/code> object, now it corresponds to whatever &lt;code>Response.__enter__&lt;/code> returns.&lt;/p>
&lt;p>and so, the modified test will look like&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_fetch_data&lt;/span>():
&lt;span style="color:#66d9ef">with&lt;/span> mock&lt;span style="color:#f92672">.&lt;/span>patch(&lt;span style="color:#e6db74">&amp;#34;requests.get&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> mock_get:
mock_response &lt;span style="color:#f92672">=&lt;/span> mock&lt;span style="color:#f92672">.&lt;/span>Mock()
mock_response&lt;span style="color:#f92672">.&lt;/span>json&lt;span style="color:#f92672">.&lt;/span>return_value &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Mocked data&amp;#34;&lt;/span>}
mock_get&lt;span style="color:#f92672">.&lt;/span>return_value&lt;span style="color:#f92672">.&lt;/span>__enter__&lt;span style="color:#f92672">.&lt;/span>return_value &lt;span style="color:#f92672">=&lt;/span> mock_response
&lt;span style="color:#75715e"># Call the function under test&lt;/span>
result &lt;span style="color:#f92672">=&lt;/span> fetch_data()
&lt;span style="color:#75715e"># Assert the expected behavior&lt;/span>
&lt;span style="color:#66d9ef">assert&lt;/span> result &lt;span style="color:#f92672">==&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Mocked data&amp;#34;&lt;/span>}
mock_get&lt;span style="color:#f92672">.&lt;/span>assert_called_once_with(&lt;span style="color:#e6db74">&amp;#34;https://api.example.com/data&amp;#34;&lt;/span>)
mock_response&lt;span style="color:#f92672">.&lt;/span>json&lt;span style="color:#f92672">.&lt;/span>assert_called_once()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>with two small modifications:&lt;/p>
&lt;ul>
&lt;li>We also create a mock response object &lt;code>mock_response&lt;/code> using &lt;code>mock.Mock()&lt;/code> to simulate the behavior of the response.&lt;/li>
&lt;li>We then set up the desired behavior of the context manager by assigning mock_response to &lt;code>mock_get.return_value.__enter__.return_value&lt;/code>. This ensures that when the context manager is entered, our &lt;code>mock_response&lt;/code> object is used.&lt;/li>
&lt;/ul></content></item><item><title>Easy data-scraping using REST API and request package</title><link>https://www.robert-sokolewicz.nl/posts/6_rest_api/</link><pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/6_rest_api/</guid><description>Often when webpages provide a friendly interface to download data, the data itself is fetched using a REST API. Most web browsers can easily intercept the request, which you can modify and edit. This is convenient if you want to use Python to download a lot of data, or if you want to set up an automated data download pipeline.
Here&amp;rsquo;s a quick step-by-step guide on how to do so.</description><content>&lt;p>Often when webpages provide a friendly interface to download data, the data itself is fetched using a REST API. Most web browsers can easily intercept the request, which you can modify and edit. This is convenient if you want to use Python to download a lot of data, or if you want to set up an automated data download pipeline.&lt;/p>
&lt;p>Here&amp;rsquo;s a quick step-by-step guide on how to do so.&lt;/p>
&lt;h2 id="step-1-inspect-the-web-page">Step 1: Inspect the Web Page&lt;/h2>
&lt;p>Open your web browser and navigate to the website from which you want to download data. For this example, I use &lt;a href="https://daggegevens.knmi.nl/klimatologie/daggegevens">weather data&lt;/a> from the Dutch Royal Weather Institute (KNMI).
Right-click on the web page and select &amp;ldquo;Inspect&amp;rdquo; or &amp;ldquo;Inspect Element&amp;rdquo; from the context menu. This will open the browser&amp;rsquo;s developer tools.&lt;/p>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="images/image-4.png"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>In the developer tools, go to the &amp;ldquo;Network&amp;rdquo; tab. This tab allows you to monitor the network activity of the web page, including the REST API requests and responses.&lt;/p>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="images/image-5.png"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;h2 id="step-2-identify-the-rest-api-endpoint">Step 2: Identify the REST API Endpoint&lt;/h2>
&lt;p>Interact with the web page to trigger the REST API request that fetches the data you want to download. In the KNMI data example, we can enter:&lt;/p>
&lt;ul>
&lt;li>Period: 20230101 - 20230410&lt;/li>
&lt;li>Fields: TG (daily mean temperature)&lt;/li>
&lt;li>Weather stations: 260 de Bilt&lt;/li>
&lt;/ul>
&lt;p>and press &amp;ldquo;Bestand downloaden&amp;rdquo;. Most webpages should have either a similar download button or a search query.&lt;/p>
&lt;p>In the &amp;ldquo;Network&amp;rdquo; tab, you should see a list of network requests made by the web page. Look for the REST API request that corresponds to the data you want to download. The REST API request will usually have a URL, method (e.g., GET, POST), and request/response headers. In this example, we look at &amp;ldquo;daggegevens&amp;rdquo;.&lt;/p>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="images/image-6.png"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;h2 id="step-3-download-the-rest-api-request-as-curl">Step 3: Download the REST API Request as cURL&lt;/h2>
&lt;p>Right-click the REST API request that you want to download and select &amp;ldquo;Copy&amp;rdquo; &amp;gt; &amp;ldquo;Copy all as cURL&amp;rdquo; from the context menu. This will copy the cURL command that represents the REST API request to your clipboard.&lt;/p>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="images/image-7.png"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>Open a text editor or a terminal window, and paste the copied cURL command.
Modify the cURL command as needed, such as replacing placeholders with actual values. For example, you may need to update query parameters, request headers, or authentication tokens.
Once you have configured the cURL command, you can execute it in your terminal to download the data from the REST API endpoint. The downloaded data will typically be saved as a response body in the format specified by the REST API (e.g., JSON, XML, CSV).&lt;/p>
&lt;h2 id="step-4-write-a-python-script-for-automated-download">Step 4: Write a Python script for automated download&lt;/h2>
&lt;p>Instead of manually modifying the cURL command and running it from the terminal, it is convenient to do this in Python. This will allow us to automatically sweep through parameters and download everything that we need.&lt;/p>
&lt;p>We first convert the cURL request that is sitting in our clipboard, to a Python script that will use the requests package. A convenient webpage is &lt;a href="https://curlconverter.com/python/">curlconverter.com/python/&lt;/a>.&lt;/p>
&lt;figure class="center"
style="margin: 0 auto;" >
&lt;img src="images/image-8.png"
style="display: block; margin: 0 auto;" />
&lt;/figure>
&lt;p>You should have a script that is similar to&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> requests
cookies &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#f92672">...&lt;/span>
}
headers &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#f92672">...&lt;/span>
}
data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;...&amp;#39;&lt;/span>
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>post(&lt;span style="color:#e6db74">&amp;#39;...&amp;#39;&lt;/span>, cookies&lt;span style="color:#f92672">=&lt;/span>cookies, headers&lt;span style="color:#f92672">=&lt;/span>headers, data&lt;span style="color:#f92672">=&lt;/span>data)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the example of the KNMI weather data, a single download is limited to about 2 years of data. If we want to build a dataset that contains full historical data, we can loop over all the years that we are interested in, where we iteratively run &lt;code>requests.post(...)&lt;/code> but for the correct years and append it to a larger Pandas &lt;code>DataFrame&lt;/code>. Inside the large data string we find &lt;code>name=&amp;quot;start&amp;quot;\r\n\r\n20230101\r\n&lt;/code> and &lt;code>name=&amp;quot;end&amp;quot;\r\n\r\n20230410\r\n&lt;/code>, so we insert variables here over which we can loop:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">data &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#e6db74">&amp;#39;... name=&amp;#34;start&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n\r\n&lt;/span>&lt;span style="color:#e6db74">{year}0101&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74"> ... name=&amp;#34;end&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n\r\n&lt;/span>&lt;span style="color:#e6db74">{year+2}1231&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74"> ...&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the looping script will look as:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#f92672">as&lt;/span> pd
&lt;span style="color:#f92672">from&lt;/span> tqdm &lt;span style="color:#f92672">import&lt;/span> tqdm
&lt;span style="color:#f92672">from&lt;/span> io &lt;span style="color:#f92672">import&lt;/span> BytesIO
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_data&lt;/span>(year):
data &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#e6db74">&amp;#39;... name=&amp;#34;start&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n\r\n&lt;/span>&lt;span style="color:#e6db74">{year}0101&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74"> ... name=&amp;#34;end&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n\r\n&lt;/span>&lt;span style="color:#e6db74">{year+2}1231&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74"> ...&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> data
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_chunked_df&lt;/span>(year):
data &lt;span style="color:#f92672">=&lt;/span> get_data(year)
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>post(
&lt;span style="color:#e6db74">&amp;#34;https://daggegevens.knmi.nl/klimatologie/daggegevens&amp;#34;&lt;/span>,
cookies&lt;span style="color:#f92672">=&lt;/span>cookies,
headers&lt;span style="color:#f92672">=&lt;/span>headers,
data&lt;span style="color:#f92672">=&lt;/span>data,
)
&lt;span style="color:#66d9ef">if&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>status_code &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span>:
content &lt;span style="color:#f92672">=&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>content
&lt;span style="color:#66d9ef">return&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(BytesIO(content), skiprows&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>)
&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> None
&lt;span style="color:#66d9ef">for&lt;/span> year &lt;span style="color:#f92672">in&lt;/span> tqdm(range(&lt;span style="color:#ae81ff">1900&lt;/span>, &lt;span style="color:#ae81ff">2022&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)):
df_chunk &lt;span style="color:#f92672">=&lt;/span> get_chunked_df(year)
df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>concat([df, df_chunk])
df&lt;span style="color:#f92672">.&lt;/span>to_csv(&lt;span style="color:#e6db74">&amp;#34;data/weather.csv&amp;#34;&lt;/span>, index&lt;span style="color:#f92672">=&lt;/span>False)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>some notes about this code:&lt;/p>
&lt;ul>
&lt;li>an HTTP request always returns a &lt;code>status_code&lt;/code>. &lt;code>200&lt;/code> means you made a successful request and any other code indicates that something went wrong (e.g. &lt;code>403&lt;/code> - access denied).&lt;/li>
&lt;li>&lt;code>response.content&lt;/code> returns a &lt;em>byte stream&lt;/em> that contains the content of the &lt;code>.csv&lt;/code> file that we requested. This can be passed directly to &lt;code>pandas.read_csv&lt;/code> using &lt;code>io.BytesIO&lt;/code>, so no need to save the file to disk first.&lt;/li>
&lt;li>we pass the argument &lt;code>skiprows=60&lt;/code> to &lt;code>.read_csv(...)&lt;/code> because the KNMI data contains 60 rows of comments with explanations of what each data field means. The actual data that we are interested in starts from line &lt;code>61&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s it! We have now successfully downloaded data from a website using REST API by inspecting the web page, identifying the REST API endpoint, and downloading the REST API request as cURL. Remember to always review and follow the terms of use and policies of the website and REST API you are accessing, and be respectful of any usage limits or restrictions. Frequent and bulky downloads are not always appreciated and you might get a temporary IP ban if you overuse the API endpoint.&lt;/p></content></item><item><title>Some tips for using VS code for python development</title><link>https://www.robert-sokolewicz.nl/posts/3_vs_code_tips/</link><pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/3_vs_code_tips/</guid><description>Useful Shortcuts Moving lines up/down shortcut: alt + up-arrow/down-arrow
Add cursors to the end of lines of selected code shortcut: alt + shift + i
Add cursor directly up or down shortcut: ctrl + alt + up-arrow/down-arrow
Useful packages Error Lens Adds a nice inline description when something is wrong with your code.
Black formatter Adds black as one of the code formatters in VS Code. A nice tip: turn on the setting format on save.</description><content>&lt;h1 id="useful-shortcuts">Useful Shortcuts&lt;/h1>
&lt;h2 id="moving-lines-updown">Moving lines up/down&lt;/h2>
&lt;p>shortcut: &lt;code>alt + up-arrow/down-arrow&lt;/code>&lt;/p>
&lt;h2 id="add-cursors-to-the-end-of-lines-of-selected-code">Add cursors to the end of lines of selected code&lt;/h2>
&lt;p>shortcut: &lt;code>alt + shift + i&lt;/code>&lt;/p>
&lt;h2 id="add-cursor-directly-up-or-down">Add cursor directly up or down&lt;/h2>
&lt;p>shortcut: &lt;code>ctrl + alt + up-arrow/down-arrow&lt;/code>&lt;/p>
&lt;h1 id="useful-packages">Useful packages&lt;/h1>
&lt;h2 id="error-lens">Error Lens&lt;/h2>
&lt;p>Adds a nice inline description when something is wrong with your code.&lt;/p>
&lt;h2 id="black-formatter">Black formatter&lt;/h2>
&lt;p>Adds black as one of the code formatters in VS Code. A nice tip: turn on the setting &lt;code>format on save&lt;/code>.&lt;/p>
&lt;h2 id="code-spell-checker">Code Spell Checker&lt;/h2>
&lt;p>A neat plug-in that checks the spelling of words in comments and doc-strings, but also checks the spelling of variable names.&lt;/p>
&lt;h2 id="gitlens">GitLens&lt;/h2>
&lt;p>Adds git-blame annotation, shows authors above each class definition and much more git goodness.&lt;/p>
&lt;h2 id="rainbow-csv">Rainbow CSV&lt;/h2>
&lt;p>A cool plug-in that highlights different columns in a &lt;code>.csv&lt;/code> file.&lt;/p>
&lt;h2 id="rewrap">Rewrap&lt;/h2>
&lt;p>Wrapping comments, docstrings and text to 90 character width by just pressing &lt;code>alt+Q&lt;/code>. Ideal when working with ruff and/or black.&lt;/p>
&lt;h2 id="ruff">Ruff&lt;/h2>
&lt;p>The official Ruff plugin for VS-Code. Ruff is a collection of python linters that works extremely fast.&lt;/p>
&lt;h2 id="gitlab-workflow">GitLab Workflow&lt;/h2>
&lt;p>When reviewing other&amp;rsquo;s open merge requests, this plugin lets you explore the merge request from within VS code in a much nicer way than the web browser editor on gitlab.com. It allows you to read the description and comments as well. Placing comments is a bit of a hassle, as it doesn&amp;rsquo;t support &amp;ldquo;reviews&amp;rdquo; where you can submit all comments at once. It also doesn&amp;rsquo;t support code suggestions.&lt;/p>
&lt;h2 id="grammarly">Grammarly&lt;/h2>
&lt;p>Spell and grammar checker for &lt;code>.md&lt;/code> and &lt;code>.txt&lt;/code> files. To check &lt;code>.md&lt;/code> files, you will have to add the following to your Visual Studio Code settings:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json"> &lt;span style="color:#e6db74">&amp;#34;grammarly.files.include&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> [
&lt;span style="color:#e6db74">&amp;#34;**/*.txt&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;**/*.md&amp;#34;&lt;/span>
]&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or via the interface:&lt;/p>
&lt;p>&lt;img src="images/image-2.png" alt="image-2">&lt;/p>
&lt;h1 id="other">Other&lt;/h1>
&lt;h2 id="useful-settings">Useful settings&lt;/h2>
&lt;h3 id="copy-paste-images-into-markdown-files">Copy-paste images into markdown files&lt;/h3>
&lt;p>Add these two lines to your Visual Studio Code settings&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json"> &lt;span style="color:#e6db74">&amp;#34;editor.experimental.pasteActions.enabled&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;markdown.experimental.copyFiles.destination&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;span style="color:#f92672">&amp;#34;**/*&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;images/&amp;#34;&lt;/span>
}&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or via the interface:&lt;/p>
&lt;p>&lt;img src="images/image-3.png" alt="image">&lt;/p>
&lt;p>and&lt;/p>
&lt;p>&lt;img src="images/image-1.png" alt="image-1">&lt;/p>
&lt;p>This allows you to paste an image directly into a markdown file with &lt;code>ctrl+v / cmd+v&lt;/code>. This inserts the line&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rst" data-lang="rst">![image](images/image.png)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>into your document and creates a copy of the image in &lt;code>images/image.png&lt;/code>, where &lt;code>images&lt;/code> is the name of the folder relative to your file. This can be changed in the settings above. If you include multiple images, each image name will be appended by a number, i.e. &lt;code>image-1.png&lt;/code>, &lt;code>image-2.png&lt;/code>, etc.&lt;/p>
&lt;h2 id="editable-installs">Editable installs&lt;/h2>
&lt;p>Sometimes VS Code has problems with auto-completion and finding the definitions of imported symbols when they come from a package that is installed in editable mode, e.g. via &lt;code>pip install -e .&lt;/code>. With recent versions of &lt;code>setuptools&lt;/code> (&amp;gt;=0.64.0), editable installs behave a bit differently and these cause issues. There are three solutions to this:&lt;/p>
&lt;ol>
&lt;li>Downgrade &lt;code>setuptools&lt;/code> (i.e. &lt;code>pip install setuptools&amp;lt;0.64&lt;/code>)&lt;/li>
&lt;li>Instruct pip to use a legacy mode: &lt;code>pip install -e . --config-settings editable_mode=compat&lt;/code>. The developers at &lt;code>setuptools&lt;/code> do &lt;a href="https://setuptools.pypa.io/en/latest/userguide/development_mode.html#legacy-behavior">warn&lt;/a> however that this is only a temporary solution and will likely to be changed and later removed entirely in future versions of &lt;code>setuptools&lt;/code>.&lt;/li>
&lt;li>Add the project to the python path. When testing out new features inside a jupyter notebook it is sufficient to add the line &lt;code>sys.path.insert(1, &amp;quot;path-to-package&amp;quot;)&lt;/code> in the top cell. &lt;code>&amp;quot;path-to-package&amp;quot;&lt;/code> can be either an absolute path (e.g. &lt;code>&amp;quot;/users/rsoko/dev/my-package&amp;quot;&lt;/code>) or a relative path (&lt;code>&amp;quot;my-package&amp;quot;&lt;/code>, &lt;code>&amp;quot;./my-package&amp;quot;&lt;/code> or even &lt;code>&amp;quot;../my-package&amp;quot;&lt;/code>).&lt;/li>
&lt;/ol></content></item><item><title>Managing git ssh-keys for multiple accounts on GitLab and GitHub</title><link>https://www.robert-sokolewicz.nl/posts/4_git_ssh/</link><pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/4_git_ssh/</guid><description>If you only have one account for every git repository provider, for example, one for www.github.com and one for www.gitlab.com, you will need to add the following to your ssh-config file, ~/.ssh/config
host github.com HostName github.com IdentityFile ~/.ssh/github User git host gitlab.com HostName gitlab.com IdentityFile ~/.ssh/gitlab User git where the identity files contain your private key for each account. These can be generated by running
ssh-keygen which will prompt you to specify a location and a passphrase:</description><content>&lt;h1 id="heading">&lt;/h1>
&lt;p>If you only have one account for every git repository provider, for example, one
for &lt;code>www.github.com&lt;/code> and one for &lt;code>www.gitlab.com&lt;/code>, you will need to add the
following to your ssh-config file, &lt;code>~/.ssh/config&lt;/code>&lt;/p>
&lt;pre>&lt;code>host github.com
HostName github.com
IdentityFile ~/.ssh/github
User git
host gitlab.com
HostName gitlab.com
IdentityFile ~/.ssh/gitlab
User git
&lt;/code>&lt;/pre>&lt;p>where the identity files contain your private key for each account. These can be
generated by running&lt;/p>
&lt;pre>&lt;code>ssh-keygen
&lt;/code>&lt;/pre>&lt;p>which will prompt you to specify a location and a passphrase:&lt;/p>
&lt;pre>&lt;code>Generating public/private rsa key pair.
Enter file in which to save the key (/home/rsoko/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
&lt;/code>&lt;/pre>&lt;p>these are all optional, but to work with the above config we need to generate
two keys, one located at &lt;code>~/.ssh/gitlab&lt;/code> and one at &lt;code>~/.ssh/github&lt;/code>. As for the
passphrase, this can be left empty if you don&amp;rsquo;t want to enter a password every
time you create an ssh connection (for example when pushing code to the remote
repository).&lt;/p>
&lt;p>check if everything works:&lt;/p>
&lt;pre>&lt;code>ssh -T git@gitlab.com
&lt;/code>&lt;/pre>&lt;p>which gives me&lt;/p>
&lt;pre>&lt;code>Welcome to GitLab, @rsokolewicz!
&lt;/code>&lt;/pre>&lt;h1 id="multiple-accounts-per-provider">multiple accounts per provider&lt;/h1>
&lt;p>If you have multiple accounts on for example gitlab.com (e.g. one personal and one work),
you can configure the ssh-config as follows&lt;/p>
&lt;pre>&lt;code>host gitlab-private
HostName gitlab.com
IdentityFile ~/.ssh/gitlab_private
User git
host gitlab-work
HostName gitlab.com
IdentityFile ~/.ssh/gitlab_work
User git
&lt;/code>&lt;/pre>&lt;p>and follow the steps as before to generate &lt;code>gitlab_private&lt;/code> and &lt;code>gitlab_work&lt;/code>.
The crucial step now is when setting up the &lt;code>remote-url&lt;/code> of a git repository to
map it to the correct entry in the above ssh configuration:&lt;/p>
&lt;pre>&lt;code>git remote set-url origin git@gitlab-private:repo.git
&lt;/code>&lt;/pre>&lt;p>&lt;code>git@gitlab-private:repo.git&lt;/code> has two important parts: &lt;code>git@...:&lt;/code> and
&lt;code>:....git&lt;/code>. The first part that&amp;rsquo;s between &lt;code>git@...:&lt;/code> corresponds to the name of
the host that is specified in the ssh configuration. In the above case &lt;code>host gitlab-private&lt;/code>. The name can be anything and is there just to map the correct ssh key to the corresponding repo. The second part &lt;code>:...git&lt;/code> is the git-url to the repo.&lt;/p></content></item><item><title>The Query Likelihood Model</title><link>https://www.robert-sokolewicz.nl/posts/2_query_likelihood/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/2_query_likelihood/</guid><description>Language Models One of the central ideas behind language modeling is that when a user tries to produce a good search query, he or she will come up with terms that are likely to appear in a relevant document. In other words, a relevant document is one that is likely to contain the query terms. What makes language modeling different from other probabilistic models, is that it creates a language model for each document from which probabilities are generated that correspond to the likelihood that a query can be found in that document.</description><content>&lt;h1 id="language-models">Language Models&lt;/h1>
&lt;p>One of the central ideas behind language modeling is that when a user tries to produce a good search query, he or she will come up with terms that are likely to appear in a relevant document. In other words, a relevant document is one that is likely to contain the query terms. What makes language modeling different from other probabilistic models, is that it creates a language model for each document from which probabilities are generated that correspond to the likelihood that a query can be found in that document. This probability is given by $P(q|M_d)$.&lt;/p>
&lt;p>The definition of a language model is a function that produces probabilities for a word or collection of words (e.g. a (part of a) sentence) given a vocabulary. Let us look at an example of a model that produces probabilities for single words:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>s&lt;/th>
&lt;th>cat&lt;/th>
&lt;th>dog&lt;/th>
&lt;th>likes&lt;/th>
&lt;th>fish&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$P(s)$&lt;/td>
&lt;td>0.3&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>0.2&lt;/td>
&lt;td>0.2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The probability for the sentence &amp;ldquo;cat likes fish&amp;rdquo; is $0.3\times0.2\times0.2 = 0.012$, whereas the probability for the sentence &amp;ldquo;dog likes cat&amp;rdquo; is $0.1\times0.2\times0.3 = 0.006$. This means that the term &amp;ldquo;cat likes fish&amp;rdquo; is more likely to appear in the document than &amp;ldquo;dog likes cat&amp;rdquo;. If we want to compare different documents with the same search query, we produce the probability for each document separately. Remember that each document has its own language model with different probabilities.&lt;/p>
&lt;p>Another way of interpreting these probabilities is asking how likely it is that this model generates the sentence &amp;ldquo;cat likes fish&amp;rdquo; or &amp;ldquo;dog likes cat&amp;rdquo;. (Technically speaking you should also include probabilities how likely it is that a sentence continues or stops after each word). These sentences don&amp;rsquo;t have to exist in the document, nor do they have to make sense. In this language model for example, the sentences &amp;ldquo;cat likes fish&amp;rdquo; and &amp;ldquo;cat fish fish&amp;rdquo; have the same probability, in other words they are equally likely to be generated.&lt;/p>
&lt;p>The language model from the example above is called a unigram language model, it is a model that estimates each term independently and ignores the context. One language model that does include context is the bigram language model. This model includes conditional probabilities for terms given that they are preceded by another term. The probability for &amp;ldquo;cat likes fish&amp;rdquo; would be given by&lt;/p>
&lt;p>$$ P(\text{cat}) \times P(\text{likes}|\text{cat}) \times P(\text{fish}|\text{likes}). $$&lt;/p>
&lt;p>This of course requires all conditional probabilities to exist.&lt;/p>
&lt;p>More complex models exist, but they are less likely to be used. Each document creates a new language model, but the training data within one document is often not sufficiently large enough to accurately train a more complex model. This is reminiscent of the bias-variance trade-off. Complex models have high variance and are prone to overfitting on smaller training data.&lt;/p>
&lt;h1 id="the-query-likelihood-model">The Query Likelihood Model&lt;/h1>
&lt;p>When ranking documents by how relevant they are to a query, we are interested in the conditional probability $P(d|q)$. In the query likelihood model, this probability is so-called rank-equivalent to $P(q|d)$, so that we only need to use the probabilities discussed above. To see why they are rank-equivalent let us look at Bayes Rule:&lt;/p>
&lt;p>$$ P(d|q) = P(q|d) P(d) / P(q) $$&lt;/p>
&lt;p>Since $P(q)$ has the same value for each document, it will not affect the ranking at all. $P(d)$ on the other hand is treated as being uniform for simplicity and so will not affect the ranking either (in more complicated models $P(d)$ could be made dependent on the length of the document for example). And so, the probability $P(d|q)$ is equivalent to $P(q|d)$. In other words, in the query likelihood model the following two statements are &lt;em>rank-equivalent&lt;/em>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The likelihood that document d is relevant to query q.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The probability that query q is generated by the language of document d.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>When a user creates a query, he or she already has an idea of how a relevant document could look like. The terms used in the query are more likely to appear in relevant documents than in non-relevant documents.&lt;/p>
&lt;p>One way of estimating the probability $P(q|d)$ for a unigram model is using the maximum likelihood estimation&lt;/p>
&lt;p>$$ P(Q|M_d) = \Pi_{t\in q} P_{\text{mle}}(T|M_d) = \Pi_{t\in q}\frac{\text{tf}_{t,d}}{L_d}$$&lt;/p>
&lt;p>Where $\text{tf}_{t,d}$ is the term frequency of term $t$ in document $d$ and $L_d$ is the size of document $d$. In other words, calculate the fraction of how often each query word appears in document $d$ compared to all words in that document, and then multiply all those fractions with each other.&lt;/p>
&lt;p>There are two small problems with the formula above. First, if one the terms in the query does not appear in a document, the entire probability $P(q|d)$ will be zero. In other words, the only way to get a non-zero probability is if each term in the query appears in the document. The second problem is that the probability of the terms that appear less frequently in the document are likely to be overestimated.&lt;/p>
&lt;p>The solution to these problems is to introduce smoothing. Smoothing will help by creating non-zero probabilities for terms that do not appear in the document, and by creating effective weights to frequent terms. Different smoothing techniques exist such as Jelinek-Mercer smoothing, that uses a linear combination of document-specific and collection-specific maximum likelihood estimations&lt;/p>
&lt;p>$$ P(T|d) = \lambda P_\text{mle} (t|M_d) +(1-\lambda)P_\text{mle}(t|M_c) $$&lt;/p>
&lt;p>where $0&amp;lt;\lambda&amp;lt;1$ is a hyperparameter that can be finetuned and $M_c$ is a language model created on the entire document collection. Another popular smoothing technique is Dirichlet smoothing&lt;/p>
&lt;p>$$ P(t|d) = \frac{\text{tf}_{t,d}+\alpha P(t|M_c)}{L_d + \alpha} $$&lt;/p>
&lt;p>(parts of this article also appear in this &lt;a href="https://medium.com/towards-data-science/understanding-term-based-retrieval-methods-in-information-retrieval-2be5eb3dde9f">Medium post&lt;/a> about term-based retrieval methods in information retrieval I wrote with my gf)&lt;/p></content></item><item><title>Copy large amounts of files over ssh</title><link>https://www.robert-sokolewicz.nl/posts/1_copy_large_amounts_of_files/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/1_copy_large_amounts_of_files/</guid><description>To copy large amounts of files over ssh you have a few options. The slowest option is using scp -r to recursively copy each file one by one, but it is faster and more convenient to first tar or gzip your home directory, copy it over to your host computer and unpack it there. This is possible to do in a single line
tar czf - &amp;lt;files&amp;gt; | ssh user@host &amp;quot;tar -C &amp;lt;destination&amp;gt; xvzf -&amp;quot; where &amp;lt;files&amp;gt; are paths to the files and directories to tar and &amp;lt;destination&amp;gt; is the destination folder on the host computer.</description><content>&lt;p>To copy large amounts of files over ssh you have a few options. The slowest option is using &lt;code>scp -r&lt;/code> to recursively copy each file one by one, but it is faster and more convenient to first tar or gzip your home directory, copy it over to your host computer and unpack it there. This is possible to do in a single line&lt;/p>
&lt;pre>&lt;code class="language-{bash}" data-lang="{bash}">tar czf - &amp;lt;files&amp;gt; | ssh user@host &amp;quot;tar -C &amp;lt;destination&amp;gt; xvzf -&amp;quot;
&lt;/code>&lt;/pre>&lt;p>where &lt;code>&amp;lt;files&amp;gt;&lt;/code> are paths to the files and directories to tar and &lt;code>&amp;lt;destination&amp;gt;&lt;/code> is the destination folder on the host computer. One downside of this approach is that you won&amp;rsquo;t have a clear indication on how long it will take. An alternative approach is to first tar everything, and then use &lt;code>rsync&lt;/code> to send everything over.&lt;/p>
&lt;pre>&lt;code class="language-{bash}" data-lang="{bash}">tar czf &amp;lt;files&amp;gt;
rsync -av --progress /foo/*.tar.gz user@host:&amp;lt;directory&amp;gt;
```&lt;/code>&lt;/pre></content></item><item><title>How to ssh over WiFi between two machines running wsl</title><link>https://www.robert-sokolewicz.nl/posts/0_ssh_over_wifi_wsl/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/0_ssh_over_wifi_wsl/</guid><description>We first follow a tutorial by Scott Hanselman where we will use Windows&amp;rsquo; openSSH to handle ssh connections and set the default ssh shell to be bash on wsl.
Setup ssh on your machine Choose one of your two machines to be the host. On the host, we need to first check if OpenSSH.Server is installed. Open powershell with elevated rights and run the following
&amp;gt; Get-WindowsCapability -Online | ? Name -like 'OpenSSH*' Name : OpenSSH.</description><content>&lt;p>We first follow a tutorial by &lt;a href="https://www.hanselman.com/blog/the-easy-way-how-to-ssh-into-bash-and-wsl2-on-windows-10-from-an-external-machine">Scott Hanselman&lt;/a> where we will use Windows&amp;rsquo; openSSH to handle ssh connections and set the default ssh shell to be bash on wsl.&lt;/p>
&lt;h2 id="setup-ssh-on-your-machine">Setup ssh on your machine&lt;/h2>
&lt;p>Choose one of your two machines to be the host. On the host, we need to first check if OpenSSH.Server is installed. Open powershell with elevated rights and run the following&lt;/p>
&lt;pre>&lt;code class="language-{cmd}" data-lang="{cmd}">&amp;gt; Get-WindowsCapability -Online | ? Name -like 'OpenSSH*'
Name : OpenSSH.Client~~~~0.0.1.0
State : Installed
Name : OpenSSH.Server~~~~0.0.1.0
State : NotPresent
&lt;/code>&lt;/pre>&lt;p>If the state under OpenSSH.server is &lt;code>NotPresent&lt;/code>, we need to run&lt;/p>
&lt;pre>&lt;code class="language-{cmd]" data-lang="{cmd]">Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
&lt;/code>&lt;/pre>&lt;p>and start the ssh daemon&lt;/p>
&lt;pre>&lt;code class="language-{cmd}" data-lang="{cmd}">Start-Service sshd
Get-Service sshd
&lt;/code>&lt;/pre>&lt;p>If you expect to use the Host more often, you can consider starting the ssh daemon automatically on the host&lt;/p>
&lt;pre>&lt;code class="language-{cmd}" data-lang="{cmd}">Set-Service -Name sshd -StartupType 'Automatic'
&lt;/code>&lt;/pre>&lt;p>Next, we will set the default shell used by OpenSSH to be the one used by wsl&lt;/p>
&lt;pre>&lt;code class="language-{cmd}" data-lang="{cmd}">New-ItemProperty -Path &amp;quot;HKLM:\SOFTWARE\OpenSSH&amp;quot; -Name DefaultShell -Value &amp;quot;C:\WINDOWS\System32\bash.exe&amp;quot; -PropertyType String -Force
&lt;/code>&lt;/pre>&lt;h2 id="make-your-machine-discoverable-over-network">Make your machine discoverable over network&lt;/h2>
&lt;p>To be able to find your host machine that runs the ssh daemon, you need to make some configurations in the network settings first. On both machines, go to network settings and under &amp;ldquo;network profile&amp;rdquo;, select &amp;ldquo;private network&amp;rdquo;. This will allow both machines to be discoverable on the WiFi network. If all is well, when you open File Explorer, under Network you should see your two machines. If you don&amp;rsquo;t see it, you might need to restart your computer(s), or temporary turn off Windows firewall.&lt;/p>
&lt;h2 id="preparing-to-copy">Preparing to copy&lt;/h2>
&lt;p>Now that this is all set-up, you should be able to ssh into your host computer via&lt;/p>
&lt;pre>&lt;code class="language-{bash}" data-lang="{bash}">ssh user@host
&lt;/code>&lt;/pre>&lt;p>where &lt;code>user&lt;/code> is your Windows login username (not your wsl linux username), and &lt;code>host&lt;/code> is your host computer&amp;rsquo;s local private ip address that looks like &lt;code>192.168.x.x&lt;/code> or &lt;code>172.x.x.x&lt;/code>. You can get the ip address by either running &lt;code>ifconfig eth0&lt;/code> in your terminal, or by opening your Windows Network Settings (win-key &amp;gt; &amp;ldquo;network settings&amp;rdquo;).&lt;/p>
&lt;p>If you do not manage to connect, make sure the ssh daemon is running on your host computer by running &lt;code>sudo service ssh status&lt;/code>. If it is not running you can start it with &lt;code>sudo service ssh start&lt;/code>. If you still cannot connect, try to open port 22 in your firewall on the host computer, or temporary turn off Windows firewall.&lt;/p>
&lt;p>If all is correct you should get inside your host&amp;rsquo;s wsl partition directly.&lt;/p></content></item><item><title>elements</title><link>https://www.robert-sokolewicz.nl/posts/1_elements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.robert-sokolewicz.nl/posts/1_elements/</guid><description>Table of contents Table of contents Text Code Python C/C++ Bash Tables Text Some example text
Code Python def foo(): print (&amp;#34;This is a python function&amp;#34;) C/C++ void foo(){ prinf(&amp;#34;%s\n&amp;#34;, &amp;#34;This is a C function&amp;#34;) } Bash # This is a bash command cd dir &amp;amp;&amp;amp; echo $PWD; # Return exit 0; Tables Pages Elements 1 Text 2 Code 3 Tables</description><content>&lt;h2 id="table-of-contents">Table of contents&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#table-of-contents">Table of contents&lt;/a>&lt;/li>
&lt;li>&lt;a href="#text">Text&lt;/a>&lt;/li>
&lt;li>&lt;a href="#code">Code&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#python">Python&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cc">C/C++&lt;/a>&lt;/li>
&lt;li>&lt;a href="#bash">Bash&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#tables">Tables&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="text">Text&lt;/h2>
&lt;p>Some example text&lt;/p>
&lt;h2 id="code">Code&lt;/h2>
&lt;h3 id="python">Python&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>():
&lt;span style="color:#66d9ef">print&lt;/span> (&lt;span style="color:#e6db74">&amp;#34;This is a python function&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cc">C/C++&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C" data-lang="C">&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>(){
prinf(&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;This is a C function&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bash">Bash&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># This is a bash command&lt;/span>
cd dir &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo $PWD;
&lt;span style="color:#75715e"># Return&lt;/span>
exit 0;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tables">Tables&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pages&lt;/th>
&lt;th>Elements&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Text&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Code&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Tables&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></content></item></channel></rss>