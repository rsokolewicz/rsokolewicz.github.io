<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Roberts blog</title>
    <link>https://rsokolewicz.github.io/posts/</link>
    <description>Recent content in Posts on Roberts blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://rsokolewicz.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git ahoy! A Pirate&#39;s Tale of Version Control</title>
      <link>https://rsokolewicz.github.io/posts/12_gitbeard/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/12_gitbeard/</guid>
      <description>Adventure Begins As the dawn cracks over the horizon, Captain Gitbeard, a notorious pirate, and his crew of misfits aboard the ship, &amp;ldquo;The Digital Marauder,&amp;rdquo; sail through the emerald waves of the Caribbean. They maintain an inventory of their loot with a shared file named loot.txt version controlled through git. But as the crew is always a bit tipsy, they&amp;rsquo;ve been known to commit a few mistakes now and then.</description>
      <content>&lt;h2 id=&#34;adventure-begins&#34;&gt;Adventure Begins&lt;/h2&gt;
&lt;p&gt;As the dawn cracks over the horizon, Captain Gitbeard, a notorious pirate, and his crew of misfits aboard the ship, &amp;ldquo;The Digital Marauder,&amp;rdquo; sail through the emerald waves of the Caribbean. They maintain an inventory of their loot with a shared file named &lt;code&gt;loot.txt&lt;/code&gt; version controlled through git. But as the crew is always a bit tipsy, they&amp;rsquo;ve been known to commit a few mistakes now and then.&lt;/p&gt;
&lt;p&gt;Their &lt;code&gt;loot.txt&lt;/code&gt; file at the moment looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pieces of Eight: 500
Gold Bars: 20
Jewelled Necklaces: 15
Diamonds: 7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The git log shows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;commit 1234567
Author: Captain Gitbeard &amp;lt;gitbeard@pirate.net&amp;gt;
Date: Fri Jul 7 10:00:00 2023
Initial loot list.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;a-blunder-at-plunder&#34;&gt;A Blunder at Plunder&lt;/h2&gt;
&lt;p&gt;After a successful raid on a Spanish galleon, the crew updates the &lt;code&gt;loot.txt&lt;/code&gt; file with their new treasures. First Mate Morgan, a bit too merry with rum, updates the file as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pieces of Eight: 1500
Gold Bars: 120
Jewelled Necklaces: 150
Diamonds: 170
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;He then commits this with the message &amp;ldquo;Plunder from the Spanish galleon&amp;rdquo;. He forgot that the crew only found 100 new Pieces of Eight, 10 new Gold Bars, 5 new Necklaces, and 3 new Diamonds.&lt;/p&gt;
&lt;p&gt;The git history now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;commit 7654321
Author: First Mate Morgan &amp;lt;morgan@pirate.net&amp;gt;
Date: Sat Jul 8 12:00:00 2023
Plunder from the Spanish galleon.

commit 1234567
Author: Captain Gitbeard &amp;lt;Gitbeard@pirate.net&amp;gt;
Date: Fri Jul 7 10:00:00 2023
Initial loot list.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Captain Gitbeard realizes the blunder and orders Morgan to amend the last commit with the correct numbers. Morgan runs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Corrects &lt;code&gt;loot.txt&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pieces of Eight: 600
Gold Bars: 30
Jewelled Necklaces: 20
Diamonds: 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then amends the previous commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add loot.txt
git commit --amend -m &amp;quot;Plunder from the Spanish galleon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now the git history shows the correct values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;commit abcdefg
Author: First Mate Morgan &amp;lt;morgan@pirate.net&amp;gt;
Date: Sat Jul 8 12:00:00 2023
Plunder from the Spanish galleon.

commit 1234567
Author: Captain Gitbeard &amp;lt;Gitbeard@pirate.net&amp;gt;
Date: Fri Jul 7 10:00:00 2023
Initial loot list.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;the-tale-of-the-missing-loot&#34;&gt;The Tale of the Missing Loot&lt;/h2&gt;
&lt;p&gt;During an audit by Quartermaster Anne, she notices the &lt;code&gt;loot.txt&lt;/code&gt; file doesn&amp;rsquo;t list their cache of rum. As she tries to insert this into the initial inventory, she realizes she can&amp;rsquo;t simply amend the commit as it would rewrite everyone&amp;rsquo;s history after that commit.&lt;/p&gt;
&lt;p&gt;To remedy this, she decides to use the interactive rebase to modify the initial commit. She runs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase -i --root
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the text editor that opens up, she changes the word &amp;lsquo;pick&amp;rsquo; to &amp;lsquo;edit&amp;rsquo; for the initial commit, then saves and exits. Git now pauses at the commit she wants to edit.&lt;/p&gt;
&lt;p&gt;She updates &lt;code&gt;loot.txt&lt;/code&gt; to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pieces of Eight: 500
Gold Bars: 20
Jewelled Necklaces: 15
Diamonds: 7
Rum: 100 barrels
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, she stages the changes and commits them with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add loot.txt
git commit --amend -m &amp;quot;Initial loot list.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To continue the rebase, she runs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase --continue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;loot.txt&lt;/code&gt; file is corrected, and the git history remains consistent for all crew members.&lt;/p&gt;
&lt;h2 id=&#34;the-end&#34;&gt;The End&lt;/h2&gt;
&lt;p&gt;The &amp;ldquo;Digital Marauder&amp;rdquo; continues to sail through the digital seas, correcting and updating their loot list with each new raid. The crew finds that despite their tipsiness, git gives them the power to make their mistakes disappear - as if they&amp;rsquo;d never happened.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>All about type hinting in Python</title>
      <link>https://rsokolewicz.github.io/posts/9_typehinting/</link>
      <pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/9_typehinting/</guid>
      <description>What is Type Hinting? Type hinting is a feature introduced in Python 3.5 that allows you to annotate the types of variables, function arguments, and return values. It provides optional typing to the Python language without actually enforcing the types at runtime.
Type hints are used to indicate the expected types of variables and functions, making your code more explicit and self-documenting. They help you catch potential type-related errors early and improve code development and maintainability.</description>
      <content>&lt;h3 id=&#34;what-is-type-hinting&#34;&gt;What is Type Hinting?&lt;/h3&gt;
&lt;p&gt;Type hinting is a feature introduced in Python 3.5 that allows you to annotate
the types of variables, function arguments, and return values. It provides
optional typing to the Python language without actually enforcing the
types at runtime.&lt;/p&gt;
&lt;p&gt;Type hints are used to indicate the expected types of variables and functions,
making your code more explicit and self-documenting. They help you catch
potential type-related errors early and improve code development and
maintainability.&lt;/p&gt;
&lt;h3 id=&#34;why-is-type-hinting-useful&#34;&gt;Why is Type Hinting Useful?&lt;/h3&gt;
&lt;p&gt;Type hinting offers several benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved Code Readability&lt;/strong&gt;: Type hints make the code more self-explanatory
by explicitly stating the expected types. It helps other developers
understand your code more easily.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Early Detection of Errors&lt;/strong&gt;: Type hints allow static analysis tools to
catch type-related errors before your code runs. This helps identify
potential bugs and allows you to fix them early in the development process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enhanced IDE Support&lt;/strong&gt;: Many integrated development environments (IDEs) can
use type hints to provide better code suggestions, autocompletion, and error
detection while you write your code. This can significantly boost your
productivity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation and Design Clarity&lt;/strong&gt;: Type hints act as documentation for
your code, making it clear what types are expected and returned by functions.
They help in designing clean interfaces and APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I find the third point the most useful. If, for example, you&amp;rsquo;re building a data
processing pipeline, and are writing the data preprocessing method, type hinting
allows you to tell your IDE that you are working with a &lt;code&gt;pandas.DataFrame&lt;/code&gt; and in
return, you get all the code suggestions and autocompletion for free.&lt;/p&gt;
&lt;h3 id=&#34;type-hinting-examples&#34;&gt;Type Hinting Examples&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s look at some examples of how type hinting can improve your code development:&lt;/p&gt;
&lt;h4 id=&#34;1-annotating-variable-types&#34;&gt;1. Annotating Variable Types:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Without Type Hinting&lt;/span&gt;
name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;
age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.5&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# With Type Hinting&lt;/span&gt;
name: str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;
age: int &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
balance: float &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By adding type hints to variables, you make it clear what types they should
hold, making the code more readable.&lt;/p&gt;
&lt;h4 id=&#34;2-specifying-function-argument-and-return-types&#34;&gt;2. Specifying Function Argument and Return Types:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiply&lt;/span&gt;(a: int, b: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the &lt;code&gt;multiply&lt;/code&gt; function takes two integer arguments and
returns an integer. The type hints help convey the expected types, enabling
better understanding and potential error detection.&lt;/p&gt;
&lt;h4 id=&#34;3-annotating-complex-data-structures&#34;&gt;3. Annotating Complex Data Structures:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; List, Tuple

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process_data&lt;/span&gt;(data: List[Tuple[str, int]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[str]:
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; name, age &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{name} is {age} years old.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, the &lt;code&gt;process_data&lt;/code&gt; function expects a list of tuples, where the first
element is a string and the second element is an integer. It returns a list of
strings. The type hints provide clarity on the data structure, enabling better
understanding and reducing errors.&lt;/p&gt;
&lt;h4 id=&#34;4-handling-union-and-optional-types&#34;&gt;4. Handling Union and Optional Types:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Union, Optional

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;greet&lt;/span&gt;(name: Union[str, None]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[str]:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello!&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello, {name}!&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the &lt;code&gt;greet&lt;/code&gt; function can accept either a string or &lt;code&gt;None&lt;/code&gt; as
the &lt;code&gt;name&lt;/code&gt; argument. It returns an optional string, which means it can return
either a string or &lt;code&gt;None&lt;/code&gt;. Type hints allow you to express such scenarios
accurately.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Type hinting in Python is a powerful feature that enhances code readability,
improves error detection, and provides better development tooling support. By
explicitly stating the expected types, you can make your code more
understandable, maintainable, and robust.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Getting rid of &#39;fatal: The current branch &lt;new branch&gt; has no upstream branch&#39; in git</title>
      <link>https://rsokolewicz.github.io/posts/8_git_upstream/</link>
      <pubDate>Mon, 12 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/8_git_upstream/</guid>
      <description>What is an upstream branch? In Git, an upstream branch refers to the branch in a remote repository that your local branch is associated with or tracks. It serves as a reference point for your local branch and determines where your changes will be pushed when you use the git push command.
When you clone a repository, Git sets up a default upstream branch for the branch you&amp;rsquo;re currently on. For example, if you clone a repository and checkout the master branch, your local master branch will typically have an upstream branch called origin/master, where origin is the default name for the remote repository.</description>
      <content>&lt;h1 id=&#34;what-is-an-upstream-branch&#34;&gt;What is an upstream branch?&lt;/h1&gt;
&lt;p&gt;In Git, an upstream branch refers to the branch in a remote repository that your local branch is associated with or tracks. It serves as a reference point for your local branch and determines where your changes will be pushed when you use the &lt;code&gt;git push&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;When you clone a repository, Git sets up a default upstream branch for the branch you&amp;rsquo;re currently on. For example, if you clone a repository and checkout the &lt;code&gt;master&lt;/code&gt; branch, your local &lt;code&gt;master&lt;/code&gt; branch will typically have an upstream branch called &lt;code&gt;origin/master&lt;/code&gt;, where &lt;code&gt;origin&lt;/code&gt; is the default name for the remote repository.&lt;/p&gt;
&lt;p&gt;Having an upstream branch allows you to easily push and pull changes between your local branch and the corresponding branch in the remote repository. When you push your local changes using &lt;code&gt;git push&lt;/code&gt;, Git knows which remote branch to update based on the upstream branch configuration.&lt;/p&gt;
&lt;p&gt;By default, Git doesn&amp;rsquo;t set an upstream branch when you create a new branch locally. You need to explicitly set the upstream branch using the &lt;code&gt;--set-upstream&lt;/code&gt; option when pushing for the first time, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git push --set-upstream origin your-branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or using the &lt;code&gt;-u&lt;/code&gt; flag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git push -u origin your-branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Setting the upstream branch allows you to use &lt;code&gt;git push&lt;/code&gt; without specifying the remote branch name every time, as Git will remember the association between your local branch and its upstream branch.&lt;/p&gt;
&lt;h1 id=&#34;how-to-automatically-set-the-upstream-branch&#34;&gt;How to automatically set the upstream branch&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git config --global push.default simple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To avoid setting upstream explicitly every time you push a new branch, you can configure Git with the push.default option. This option determines the behavior when pushing branches that do not have a configured upstream branch. Here are the possible values for push.default:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nothing: This is the default option. Git won&amp;rsquo;t push any branch without an upstream branch explicitly specified.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;current: Git pushes the current branch to a branch of the same name on the remote repository, even if it doesn&amp;rsquo;t have an upstream branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;upstream: Git pushes the current branch to its upstream branch, if it has one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;simple: This option is recommended. Git pushes the current branch to its upstream branch if it exists. If the upstream branch doesn&amp;rsquo;t exist, it will push to a branch of the same name on the remote repository, creating a new branch if necessary. However, it won&amp;rsquo;t push if the upstream branch&amp;rsquo;s name is different.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Mocking context managers with pytest</title>
      <link>https://rsokolewicz.github.io/posts/7_mock_context_manager/</link>
      <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/7_mock_context_manager/</guid>
      <description>In software testing, it is often necessary to mock external dependencies, such as API calls, to isolate the code under test and simulate specific behaviors. pytest, a popular testing framework in Python, provides powerful mocking capabilities through its pytest-mock plugin. Mocking functions and methods is not so hard, but mocking context managers can be tricky, as sometimes you will need to mock the __enter__() as well.
Example 1 Suppose we have</description>
      <content>&lt;p&gt;In software testing, it is often necessary to mock external dependencies, such as API calls, to isolate the code under test and simulate specific behaviors. &lt;code&gt;pytest&lt;/code&gt;, a popular testing framework in Python, provides powerful mocking capabilities through its &lt;code&gt;pytest-mock&lt;/code&gt; plugin. Mocking functions and methods is not so hard, but mocking context managers can be tricky, as sometimes you will need to mock the &lt;code&gt;__enter__()&lt;/code&gt; as well.&lt;/p&gt;
&lt;h1 id=&#34;example-1&#34;&gt;Example 1&lt;/h1&gt;
&lt;p&gt;Suppose we have&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_data&lt;/span&gt;():
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.example.com/data&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which issues an HTTP GET request to &lt;a href=&#34;https://api.example.com/data&#34;&gt;https://api.example.com/data&lt;/a&gt; and returns whatever the response is in a json format.&lt;/p&gt;
&lt;p&gt;A unit test for this function could look like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_fetch_data&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; mock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;patch(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requests.get&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; mock_get:
        &lt;span style=&#34;color:#75715e&#34;&gt;# Set up the desired behavior for the mocked function&lt;/span&gt;
        mock_get&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_value&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mocked data&amp;#34;&lt;/span&gt;}

        &lt;span style=&#34;color:#75715e&#34;&gt;# Call the function under test&lt;/span&gt;
        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_data()

        &lt;span style=&#34;color:#75715e&#34;&gt;# Assert the expected behavior&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mocked data&amp;#34;&lt;/span&gt;}
        mock_get&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_called_once_with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.example.com/data&amp;#34;&lt;/span&gt;)
        mock_get&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_value&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_called_once()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where we mock the &lt;code&gt;requests.get&lt;/code&gt; function directly. In the &lt;code&gt;fetch_data&lt;/code&gt; function we are returning &lt;code&gt;response.json()&lt;/code&gt; that we would also like to mock with some dummy return data. By chaining &lt;code&gt;mock_get.return_value&lt;/code&gt; together with &lt;code&gt;json.return_value&lt;/code&gt; we can assign the return value of &lt;code&gt;response.json()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One benefit of mockers is that is easy to assert how a method was called, and even how often it was called. In this case, we used&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Assert the expected behavior&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mocked data&amp;#34;&lt;/span&gt;}
mock_get&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_called_once_with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.example.com/data&amp;#34;&lt;/span&gt;)
mock_get&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_value&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_called_once()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Things become a little tricky in the next example&lt;/p&gt;
&lt;h1 id=&#34;example-2&#34;&gt;Example 2&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;requests.get()&lt;/code&gt; returns a &lt;code&gt;Request&lt;/code&gt; object that is a context manager. So often in code we will see the following example instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_data&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.example.com/data&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; response:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and running the above test on this function instead, will give us a nice warning:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Assert the expected behavior&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mocked data&amp;#34;&lt;/span&gt;}
E           &lt;span style=&#34;color:#a6e22e&#34;&gt;AssertionError&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MagicMock name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;get().__enter__().json()&amp;#39;&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;140616315269184&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mocked data&amp;#39;&lt;/span&gt;}
E             Full diff:
E             &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mocked data&amp;#39;&lt;/span&gt;}
E             &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MagicMock name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;get().__enter__().json()&amp;#39;&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;140616315269184&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The error already gives us a hint that we need to mock &lt;code&gt;__enter__&lt;/code&gt; as well. Whereas before &lt;code&gt;response&lt;/code&gt; was the actual &lt;code&gt;Response&lt;/code&gt; object, now it corresponds to whatever &lt;code&gt;Response.__enter__&lt;/code&gt; returns.&lt;/p&gt;
&lt;p&gt;and so, the modified test will look like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_fetch_data&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; mock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;patch(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requests.get&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; mock_get:
        mock_response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Mock()
        mock_response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mocked data&amp;#34;&lt;/span&gt;}

        mock_get&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_value&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__enter__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mock_response

        &lt;span style=&#34;color:#75715e&#34;&gt;# Call the function under test&lt;/span&gt;
        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetch_data()

        &lt;span style=&#34;color:#75715e&#34;&gt;# Assert the expected behavior&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mocked data&amp;#34;&lt;/span&gt;}
        mock_get&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_called_once_with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.example.com/data&amp;#34;&lt;/span&gt;)
        mock_response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_called_once()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;with two small modifications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We also create a mock response object &lt;code&gt;mock_response&lt;/code&gt; using &lt;code&gt;mock.Mock()&lt;/code&gt; to simulate the behavior of the response.&lt;/li&gt;
&lt;li&gt;We then set up the desired behavior of the context manager by assigning mock_response to &lt;code&gt;mock_get.return_value.__enter__.return_value&lt;/code&gt;. This ensures that when the context manager is entered, our &lt;code&gt;mock_response&lt;/code&gt; object is used.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Easy data-scraping using REST API and request package</title>
      <link>https://rsokolewicz.github.io/posts/6_rest_api/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/6_rest_api/</guid>
      <description>Often when webpages provide a friendly interface to download data, the data itself is fetched using a REST API. Most web browsers can easily intercept the request, which you can modify and edit. This is convenient if you want to use Python to download a lot of data, or if you want to set up an automated data download pipeline.
Here&amp;rsquo;s a quick step-by-step guide on how to do so.</description>
      <content>&lt;p&gt;Often when webpages provide a friendly interface to download data, the data itself is fetched using a REST API. Most web browsers can easily intercept the request, which you can modify and edit. This is convenient if you want to use Python to download a lot of data, or if you want to set up an automated data download pipeline.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a quick step-by-step guide on how to do so.&lt;/p&gt;
&lt;h2 id=&#34;step-1-inspect-the-web-page&#34;&gt;Step 1: Inspect the Web Page&lt;/h2&gt;
&lt;p&gt;Open your web browser and navigate to the website from which you want to download data. For this example, I use &lt;a href=&#34;https://daggegevens.knmi.nl/klimatologie/daggegevens&#34;&gt;weather data&lt;/a&gt; from the Dutch Royal Weather Institute (KNMI).
Right-click on the web page and select &amp;ldquo;Inspect&amp;rdquo; or &amp;ldquo;Inspect Element&amp;rdquo; from the context menu. This will open the browser&amp;rsquo;s developer tools.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image-4.png&#34; alt=&#34;image-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the developer tools, go to the &amp;ldquo;Network&amp;rdquo; tab. This tab allows you to monitor the network activity of the web page, including the REST API requests and responses.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image-5.png&#34; alt=&#34;image-5&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-2-identify-the-rest-api-endpoint&#34;&gt;Step 2: Identify the REST API Endpoint&lt;/h2&gt;
&lt;p&gt;Interact with the web page to trigger the REST API request that fetches the data you want to download. In the KNMI data example, we can enter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Period: 20230101 - 20230410&lt;/li&gt;
&lt;li&gt;Fields: TG (daily mean temperature)&lt;/li&gt;
&lt;li&gt;Weather stations: 260 de Bilt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and press &amp;ldquo;Bestand downloaden&amp;rdquo;. Most webpages should have either a similar download button or a search query.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;Network&amp;rdquo; tab, you should see a list of network requests made by the web page. Look for the REST API request that corresponds to the data you want to download. The REST API request will usually have a URL, method (e.g., GET, POST), and request/response headers. In this example, we look at &amp;ldquo;daggegevens&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image-6.png&#34; alt=&#34;image-6&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-3-download-the-rest-api-request-as-curl&#34;&gt;Step 3: Download the REST API Request as cURL&lt;/h2&gt;
&lt;p&gt;Right-click the REST API request that you want to download and select &amp;ldquo;Copy&amp;rdquo; &amp;gt; &amp;ldquo;Copy all as cURL&amp;rdquo; from the context menu. This will copy the cURL command that represents the REST API request to your clipboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image-7.png&#34; alt=&#34;image-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;Open a text editor or a terminal window, and paste the copied cURL command.
Modify the cURL command as needed, such as replacing placeholders with actual values. For example, you may need to update query parameters, request headers, or authentication tokens.
Once you have configured the cURL command, you can execute it in your terminal to download the data from the REST API endpoint. The downloaded data will typically be saved as a response body in the format specified by the REST API (e.g., JSON, XML, CSV).&lt;/p&gt;
&lt;h2 id=&#34;step-4-write-a-python-script-for-automated-download&#34;&gt;Step 4: Write a Python script for automated download&lt;/h2&gt;
&lt;p&gt;Instead of manually modifying the cURL command and running it from the terminal, it is convenient to do this in Python. This will allow us to automatically sweep through parameters and download everything that we need.&lt;/p&gt;
&lt;p&gt;We first convert the cURL request that is sitting in our clipboard, to a Python script that will use the requests package. A convenient webpage is &lt;a href=&#34;https://curlconverter.com/python/&#34;&gt;curlconverter.com/python/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image-8.png&#34; alt=&#34;image-8&#34;&gt;&lt;/p&gt;
&lt;p&gt;You should have a script that is similar to&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests

cookies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}

headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;

response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;, cookies&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cookies, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example of the KNMI weather data, a single download is limited to about 2 years of data. If we want to build a dataset that contains full historical data, we can loop over all the years that we are interested in, where we iteratively run &lt;code&gt;requests.post(...)&lt;/code&gt; but for the correct years and append it to a larger Pandas &lt;code&gt;DataFrame&lt;/code&gt;. Inside the large data string we find &lt;code&gt;name=&amp;quot;start&amp;quot;\r\n\r\n20230101\r\n&lt;/code&gt; and &lt;code&gt;name=&amp;quot;end&amp;quot;\r\n\r\n20230410\r\n&lt;/code&gt;, so we insert variables here over which we can loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;... name=&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{year}0101&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ... name=&amp;#34;end&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{year+2}1231&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ...&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and the looping script will look as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tqdm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tqdm
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; io &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BytesIO

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_data&lt;/span&gt;(year):
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;... name=&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{year}0101&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ... name=&amp;#34;end&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{year+2}1231&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ...&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_chunked_df&lt;/span&gt;(year):
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_data(year)

    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://daggegevens.knmi.nl/klimatologie/daggegevens&amp;#34;&lt;/span&gt;,
        cookies&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cookies,
        headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers,
        data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data,
    )

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;:
        content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(BytesIO(content), skiprows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None


&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; year &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tqdm(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1900&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2022&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)):
    df_chunk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_chunked_df(year)
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([df, df_chunk])

df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data/weather.csv&amp;#34;&lt;/span&gt;, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;some notes about this code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an HTTP request always returns a &lt;code&gt;status_code&lt;/code&gt;. &lt;code&gt;200&lt;/code&gt; means you made a successful request and any other code indicates that something went wrong (e.g. &lt;code&gt;403&lt;/code&gt; - access denied).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response.content&lt;/code&gt; returns a &lt;em&gt;byte stream&lt;/em&gt; that contains the content of the &lt;code&gt;.csv&lt;/code&gt; file that we requested. This can be passed directly to &lt;code&gt;pandas.read_csv&lt;/code&gt; using &lt;code&gt;io.BytesIO&lt;/code&gt;, so no need to save the file to disk first.&lt;/li&gt;
&lt;li&gt;we pass the argument &lt;code&gt;skiprows=60&lt;/code&gt; to &lt;code&gt;.read_csv(...)&lt;/code&gt; because the KNMI data contains 60 rows of comments with explanations of what each data field means. The actual data that we are interested in starts from line &lt;code&gt;61&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s it! We have now successfully downloaded data from a website using REST API by inspecting the web page, identifying the REST API endpoint, and downloading the REST API request as cURL. Remember to always review and follow the terms of use and policies of the website and REST API you are accessing, and be respectful of any usage limits or restrictions. Frequent and bulky downloads are not always appreciated and you might get a temporary IP ban if you overuse the API endpoint.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Some tips for using VS code for python development</title>
      <link>https://rsokolewicz.github.io/posts/3_vs_code_tips/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/3_vs_code_tips/</guid>
      <description>Useful Shortcuts Moving lines up/down shortcut: alt + up-arrow/down-arrow
Add cursors to the end of lines of selected code shortcut: alt + shift + i
Add cursor directly up or down shortcut: ctrl + alt + up-arrow/down-arrow
Useful packages Error Lens Adds a nice inline description when something is wrong with your code.
Black formatter Adds black as one of the code formatters in VS Code. A nice tip: turn on the setting format on save.</description>
      <content>&lt;h1 id=&#34;useful-shortcuts&#34;&gt;Useful Shortcuts&lt;/h1&gt;
&lt;h2 id=&#34;moving-lines-updown&#34;&gt;Moving lines up/down&lt;/h2&gt;
&lt;p&gt;shortcut: &lt;code&gt;alt + up-arrow/down-arrow&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;add-cursors-to-the-end-of-lines-of-selected-code&#34;&gt;Add cursors to the end of lines of selected code&lt;/h2&gt;
&lt;p&gt;shortcut: &lt;code&gt;alt + shift + i&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;add-cursor-directly-up-or-down&#34;&gt;Add cursor directly up or down&lt;/h2&gt;
&lt;p&gt;shortcut: &lt;code&gt;ctrl + alt + up-arrow/down-arrow&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;useful-packages&#34;&gt;Useful packages&lt;/h1&gt;
&lt;h2 id=&#34;error-lens&#34;&gt;Error Lens&lt;/h2&gt;
&lt;p&gt;Adds a nice inline description when something is wrong with your code.&lt;/p&gt;
&lt;h2 id=&#34;black-formatter&#34;&gt;Black formatter&lt;/h2&gt;
&lt;p&gt;Adds black as one of the code formatters in VS Code. A nice tip: turn on the setting &lt;code&gt;format on save&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;code-spell-checker&#34;&gt;Code Spell Checker&lt;/h2&gt;
&lt;p&gt;A neat plug-in that checks the spelling of words in comments and doc-strings, but also checks the spelling of variable names.&lt;/p&gt;
&lt;h2 id=&#34;gitlens&#34;&gt;GitLens&lt;/h2&gt;
&lt;p&gt;Adds git-blame annotation, shows authors above each class definition and much more git goodness.&lt;/p&gt;
&lt;h2 id=&#34;rainbow-csv&#34;&gt;Rainbow CSV&lt;/h2&gt;
&lt;p&gt;A cool plug-in that highlights different columns in a &lt;code&gt;.csv&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;rewrap&#34;&gt;Rewrap&lt;/h2&gt;
&lt;p&gt;Wrapping comments, docstrings and text to 90 character width by just pressing &lt;code&gt;alt+Q&lt;/code&gt;. Ideal when working with ruff and/or black.&lt;/p&gt;
&lt;h2 id=&#34;ruff&#34;&gt;Ruff&lt;/h2&gt;
&lt;p&gt;The official Ruff plugin for VS-Code. Ruff is a collection of python linters that works extremely fast.&lt;/p&gt;
&lt;h2 id=&#34;gitlab-workflow&#34;&gt;GitLab Workflow&lt;/h2&gt;
&lt;p&gt;When reviewing other&amp;rsquo;s open merge requests, this plugin lets you explore the merge request from within VS code in a much nicer way than the web browser editor on gitlab.com. It allows you to read the description and comments as well. Placing comments is a bit of a hassle, as it doesn&amp;rsquo;t support &amp;ldquo;reviews&amp;rdquo; where you can submit all comments at once. It also doesn&amp;rsquo;t support code suggestions.&lt;/p&gt;
&lt;h2 id=&#34;grammarly&#34;&gt;Grammarly&lt;/h2&gt;
&lt;p&gt;Spell and grammar checker for &lt;code&gt;.md&lt;/code&gt; and &lt;code&gt;.txt&lt;/code&gt; files. To check &lt;code&gt;.md&lt;/code&gt; files, you will have to add the following to your Visual Studio Code settings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grammarly.files.include&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.txt&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.md&amp;#34;&lt;/span&gt;
    ]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or via the interface:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image-2.png&#34; alt=&#34;image-2&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;other&#34;&gt;Other&lt;/h1&gt;
&lt;h2 id=&#34;useful-settings&#34;&gt;Useful settings&lt;/h2&gt;
&lt;h3 id=&#34;copy-paste-images-into-markdown-files&#34;&gt;Copy-paste images into markdown files&lt;/h3&gt;
&lt;p&gt;Add these two lines to your Visual Studio Code settings&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;editor.experimental.pasteActions.enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;markdown.experimental.copyFiles.destination&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;**/*&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;images/&amp;#34;&lt;/span&gt;
    }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or via the interface:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image-3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image-1.png&#34; alt=&#34;image-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;This allows you to paste an image directly into a markdown file with &lt;code&gt;ctrl+v / cmd+v&lt;/code&gt;. This inserts the line&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rst&#34; data-lang=&#34;rst&#34;&gt;![image](images/image.png)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;into your document and creates a copy of the image in &lt;code&gt;images/image.png&lt;/code&gt;, where &lt;code&gt;images&lt;/code&gt; is the name of the folder relative to your file. This can be changed in the settings above. If you include multiple images, each image name will be appended by a number, i.e. &lt;code&gt;image-1.png&lt;/code&gt;, &lt;code&gt;image-2.png&lt;/code&gt;, etc.&lt;/p&gt;
&lt;h2 id=&#34;editable-installs&#34;&gt;Editable installs&lt;/h2&gt;
&lt;p&gt;Sometimes VS Code has problems with auto-completion and finding the definitions of imported symbols when they come from a package that is installed in editable mode, e.g. via &lt;code&gt;pip install -e .&lt;/code&gt;. With recent versions of &lt;code&gt;setuptools&lt;/code&gt; (&amp;gt;=0.64.0), editable installs behave a bit differently and these cause issues. There are three solutions to this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Downgrade &lt;code&gt;setuptools&lt;/code&gt; (i.e. &lt;code&gt;pip install setuptools&amp;lt;0.64&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Instruct pip to use a legacy mode: &lt;code&gt;pip install -e . --config-settings editable_mode=compat&lt;/code&gt;. The developers at &lt;code&gt;setuptools&lt;/code&gt; do &lt;a href=&#34;https://setuptools.pypa.io/en/latest/userguide/development_mode.html#legacy-behavior&#34;&gt;warn&lt;/a&gt; however that this is only a temporary solution and will likely to be changed and later removed entirely in future versions of &lt;code&gt;setuptools&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the project to the python path. When testing out new features inside a jupyter notebook it is sufficient to add the line &lt;code&gt;sys.path.insert(1, &amp;quot;path-to-package&amp;quot;)&lt;/code&gt; in the top cell. &lt;code&gt;&amp;quot;path-to-package&amp;quot;&lt;/code&gt; can be either an absolute path (e.g. &lt;code&gt;&amp;quot;/users/rsoko/dev/my-package&amp;quot;&lt;/code&gt;) or a relative path (&lt;code&gt;&amp;quot;my-package&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;./my-package&amp;quot;&lt;/code&gt; or even &lt;code&gt;&amp;quot;../my-package&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Managing git ssh-keys for multiple accounts on GitLab and GitHub</title>
      <link>https://rsokolewicz.github.io/posts/4_git_ssh/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/4_git_ssh/</guid>
      <description>If you only have one account for every git repository provider, for example, one for www.github.com and one for www.gitlab.com, you will need to add the following to your ssh-config file, ~/.ssh/config
host github.com HostName github.com IdentityFile ~/.ssh/github User git host gitlab.com HostName gitlab.com IdentityFile ~/.ssh/gitlab User git where the identity files contain your private key for each account. These can be generated by running
ssh-keygen which will prompt you to specify a location and a passphrase:</description>
      <content>&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;p&gt;If you only have one account for every git repository provider, for example, one
for &lt;code&gt;www.github.com&lt;/code&gt; and one for &lt;code&gt;www.gitlab.com&lt;/code&gt;, you will need to add the
following to your ssh-config file, &lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;host github.com
  HostName github.com
  IdentityFile ~/.ssh/github
  User git

host gitlab.com
  HostName gitlab.com
  IdentityFile ~/.ssh/gitlab
  User git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where the identity files contain your private key for each account. These can be
generated by running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will prompt you to specify a location and a passphrase:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Generating public/private rsa key pair.
Enter file in which to save the key (/home/rsoko/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;these are all optional, but to work with the above config we need to generate
two keys, one located at &lt;code&gt;~/.ssh/gitlab&lt;/code&gt; and one at &lt;code&gt;~/.ssh/github&lt;/code&gt;. As for the
passphrase, this can be left empty if you don&amp;rsquo;t want to enter a password every
time you create an ssh connection (for example when pushing code to the remote
repository).&lt;/p&gt;
&lt;p&gt;check if everything works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -T git@gitlab.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which gives me&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Welcome to GitLab, @rsokolewicz!
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;multiple-accounts-per-provider&#34;&gt;multiple accounts per provider&lt;/h1&gt;
&lt;p&gt;If you have multiple accounts on for example gitlab.com (e.g. one personal and one work),
you can configure the ssh-config as follows&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;host gitlab-private
  HostName gitlab.com
  IdentityFile ~/.ssh/gitlab_private
  User git

host gitlab-work
  HostName gitlab.com
  IdentityFile ~/.ssh/gitlab_work
  User git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and follow the steps as before to generate &lt;code&gt;gitlab_private&lt;/code&gt; and &lt;code&gt;gitlab_work&lt;/code&gt;.
The crucial step now is when setting up the &lt;code&gt;remote-url&lt;/code&gt; of a git repository to
map it to the correct entry in the above ssh configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote set-url origin git@gitlab-private:repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;git@gitlab-private:repo.git&lt;/code&gt; has two important parts: &lt;code&gt;git@...:&lt;/code&gt; and
&lt;code&gt;:....git&lt;/code&gt;. The first part that&amp;rsquo;s between &lt;code&gt;git@...:&lt;/code&gt; corresponds to the name of
the host that is specified in the ssh configuration. In the above case &lt;code&gt;host gitlab-private&lt;/code&gt;. The name can be anything and is there just to map the correct ssh key to the corresponding repo. The second part &lt;code&gt;:...git&lt;/code&gt; is the git-url to the repo.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The Query Likelihood Model</title>
      <link>https://rsokolewicz.github.io/posts/2_query_likelihood/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/2_query_likelihood/</guid>
      <description>Language Models One of the central ideas behind language modeling is that when a user tries to produce a good search query, he or she will come up with terms that are likely to appear in a relevant document. In other words, a relevant document is one that is likely to contain the query terms. What makes language modeling different from other probabilistic models, is that it creates a language model for each document from which probabilities are generated that correspond to the likelihood that a query can be found in that document.</description>
      <content>&lt;h1 id=&#34;language-models&#34;&gt;Language Models&lt;/h1&gt;
&lt;p&gt;One of the central ideas behind language modeling is that when a user tries to produce a good search query, he or she will come up with terms that are likely to appear in a relevant document. In other words, a relevant document is one that is likely to contain the query terms. What makes language modeling different from other probabilistic models, is that it creates a language model for each document from which probabilities are generated that correspond to the likelihood that a query can be found in that document. This probability is given by $P(q|M_d)$.&lt;/p&gt;
&lt;p&gt;The definition of a language model is a function that produces probabilities for a word or collection of words (e.g. a (part of a) sentence) given a vocabulary. Let us look at an example of a model that produces probabilities for single words:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;s&lt;/th&gt;
&lt;th&gt;cat&lt;/th&gt;
&lt;th&gt;dog&lt;/th&gt;
&lt;th&gt;likes&lt;/th&gt;
&lt;th&gt;fish&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$P(s)$&lt;/td&gt;
&lt;td&gt;0.3&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The probability for the sentence &amp;ldquo;cat likes fish&amp;rdquo; is $0.3\times0.2\times0.2 = 0.012$, whereas the probability for the sentence &amp;ldquo;dog likes cat&amp;rdquo; is $0.1\times0.2\times0.3 = 0.006$. This means that the term &amp;ldquo;cat likes fish&amp;rdquo; is more likely to appear in the document than &amp;ldquo;dog likes cat&amp;rdquo;. If we want to compare different documents with the same search query, we produce the probability for each document separately. Remember that each document has its own language model with different probabilities.&lt;/p&gt;
&lt;p&gt;Another way of interpreting these probabilities is asking how likely it is that this model generates the sentence &amp;ldquo;cat likes fish&amp;rdquo; or &amp;ldquo;dog likes cat&amp;rdquo;. (Technically speaking you should also include probabilities how likely it is that a sentence continues or stops after each word). These sentences don&amp;rsquo;t have to exist in the document, nor do they have to make sense. In this language model for example, the sentences &amp;ldquo;cat likes fish&amp;rdquo; and &amp;ldquo;cat fish fish&amp;rdquo; have the same probability, in other words they are equally likely to be generated.&lt;/p&gt;
&lt;p&gt;The language model from the example above is called a unigram language model, it is a model that estimates each term independently and ignores the context. One language model that does include context is the bigram language model. This model includes conditional probabilities for terms given that they are preceded by another term. The probability for &amp;ldquo;cat likes fish&amp;rdquo; would be given by&lt;/p&gt;
&lt;p&gt;$$ P(\text{cat}) \times P(\text{likes}|\text{cat}) \times P(\text{fish}|\text{likes}). $$&lt;/p&gt;
&lt;p&gt;This of course requires all conditional probabilities to exist.&lt;/p&gt;
&lt;p&gt;More complex models exist, but they are less likely to be used. Each document creates a new language model, but the training data within one document is often not sufficiently large enough to accurately train a more complex model. This is reminiscent of the bias-variance trade-off. Complex models have high variance and are prone to overfitting on smaller training data.&lt;/p&gt;
&lt;h1 id=&#34;the-query-likelihood-model&#34;&gt;The Query Likelihood Model&lt;/h1&gt;
&lt;p&gt;When ranking documents by how relevant they are to a query, we are interested in the conditional probability $P(d|q)$. In the query likelihood model, this probability is so-called rank-equivalent to $P(q|d)$, so that we only need to use the probabilities discussed above. To see why they are rank-equivalent let us look at Bayes Rule:&lt;/p&gt;
&lt;p&gt;$$ P(d|q) = P(q|d) P(d) / P(q) $$&lt;/p&gt;
&lt;p&gt;Since $P(q)$ has the same value for each document, it will not affect the ranking at all. $P(d)$ on the other hand is treated as being uniform for simplicity and so will not affect the ranking either (in more complicated models $P(d)$ could be made dependent on the length of the document for example). And so, the probability $P(d|q)$ is equivalent to $P(q|d)$. In other words, in the query likelihood model the following two statements are &lt;em&gt;rank-equivalent&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The likelihood that document d is relevant to query q.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The probability that query q is generated by the language of document d.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a user creates a query, he or she already has an idea of how a relevant document could look like. The terms used in the query are more likely to appear in relevant documents than in non-relevant documents.&lt;/p&gt;
&lt;p&gt;One way of estimating the probability $P(q|d)$ for a unigram model is using the maximum likelihood estimation&lt;/p&gt;
&lt;p&gt;$$ P(Q|M_d) = \Pi_{t\in q} P_{\text{mle}}(T|M_d) = \Pi_{t\in q}\frac{\text{tf}_{t,d}}{L_d}$$&lt;/p&gt;
&lt;p&gt;Where $\text{tf}_{t,d}$ is the term frequency of term $t$ in document $d$ and $L_d$ is the size of document $d$. In other words, calculate the fraction of how often each query word appears in document $d$ compared to all words in that document, and then multiply all those fractions with each other.&lt;/p&gt;
&lt;p&gt;There are two small problems with the formula above. First, if one the terms in the query does not appear in a document, the entire probability $P(q|d)$ will be zero. In other words, the only way to get a non-zero probability is if each term in the query appears in the document. The second problem is that the probability of the terms that appear less frequently in the document are likely to be overestimated.&lt;/p&gt;
&lt;p&gt;The solution to these problems is to introduce smoothing. Smoothing will help by creating non-zero probabilities for terms that do not appear in the document, and by creating effective weights to frequent terms. Different smoothing techniques exist such as Jelinek-Mercer smoothing, that uses a linear combination of document-specific and collection-specific maximum likelihood estimations&lt;/p&gt;
&lt;p&gt;$$ P(T|d) = \lambda P_\text{mle} (t|M_d) +(1-\lambda)P_\text{mle}(t|M_c) $$&lt;/p&gt;
&lt;p&gt;where $0&amp;lt;\lambda&amp;lt;1$ is a hyperparameter that can be finetuned and $M_c$ is a language model created on the entire document collection. Another popular smoothing technique is Dirichlet smoothing&lt;/p&gt;
&lt;p&gt;$$ P(t|d) = \frac{\text{tf}_{t,d}+\alpha P(t|M_c)}{L_d + \alpha} $$&lt;/p&gt;
&lt;p&gt;(parts of this article also appear in this &lt;a href=&#34;https://medium.com/towards-data-science/understanding-term-based-retrieval-methods-in-information-retrieval-2be5eb3dde9f&#34;&gt;Medium post&lt;/a&gt; about term-based retrieval methods in information retrieval I wrote with my gf)&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Copy large amounts of files over ssh</title>
      <link>https://rsokolewicz.github.io/posts/1_copy_large_amounts_of_files/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/1_copy_large_amounts_of_files/</guid>
      <description>To copy large amounts of files over ssh you have a few options. The slowest option is using scp -r to recursively copy each file one by one, but it is faster and more convenient to first tar or gzip your home directory, copy it over to your host computer and unpack it there. This is possible to do in a single line
tar czf - &amp;lt;files&amp;gt; | ssh user@host &amp;quot;tar -C &amp;lt;destination&amp;gt; xvzf -&amp;quot; where &amp;lt;files&amp;gt; are paths to the files and directories to tar and &amp;lt;destination&amp;gt; is the destination folder on the host computer.</description>
      <content>&lt;p&gt;To copy large amounts of files over ssh you have a few options. The slowest option is using &lt;code&gt;scp -r&lt;/code&gt; to recursively copy each file one by one, but it is faster and more convenient to first tar or gzip your home directory, copy it over to your host computer and unpack it there. This is possible to do in a single line&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{bash}&#34; data-lang=&#34;{bash}&#34;&gt;tar czf - &amp;lt;files&amp;gt; | ssh user@host &amp;quot;tar -C &amp;lt;destination&amp;gt; xvzf -&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where &lt;code&gt;&amp;lt;files&amp;gt;&lt;/code&gt; are paths to the files and directories to tar and &lt;code&gt;&amp;lt;destination&amp;gt;&lt;/code&gt; is the destination folder on the host computer. One downside of this approach is that you won&amp;rsquo;t have a clear indication on how long it will take. An alternative approach is to first tar everything, and then use &lt;code&gt;rsync&lt;/code&gt; to send everything over.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{bash}&#34; data-lang=&#34;{bash}&#34;&gt;tar czf &amp;lt;files&amp;gt;
rsync -av --progress /foo/*.tar.gz user@host:&amp;lt;directory&amp;gt;

```&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>How to ssh over WiFi between two machines running wsl</title>
      <link>https://rsokolewicz.github.io/posts/0_ssh_over_wifi_wsl/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/0_ssh_over_wifi_wsl/</guid>
      <description>We first follow a tutorial by Scott Hanselman where we will use Windows&amp;rsquo; openSSH to handle ssh connections and set the default ssh shell to be bash on wsl.
Setup ssh on your machine Choose one of your two machines to be the host. On the host, we need to first check if OpenSSH.Server is installed. Open powershell with elevated rights and run the following
&amp;gt; Get-WindowsCapability -Online | ? Name -like &#39;OpenSSH*&#39; Name : OpenSSH.</description>
      <content>&lt;p&gt;We first follow a tutorial by &lt;a href=&#34;https://www.hanselman.com/blog/the-easy-way-how-to-ssh-into-bash-and-wsl2-on-windows-10-from-an-external-machine&#34;&gt;Scott Hanselman&lt;/a&gt; where we will use Windows&amp;rsquo; openSSH to handle ssh connections and set the default ssh shell to be bash on wsl.&lt;/p&gt;
&lt;h2 id=&#34;setup-ssh-on-your-machine&#34;&gt;Setup ssh on your machine&lt;/h2&gt;
&lt;p&gt;Choose one of your two machines to be the host. On the host, we need to first check if OpenSSH.Server is installed. Open powershell with elevated rights and run the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{cmd}&#34; data-lang=&#34;{cmd}&#34;&gt;&amp;gt; Get-WindowsCapability -Online | ? Name -like &#39;OpenSSH*&#39;

Name  : OpenSSH.Client~~~~0.0.1.0
State : Installed

Name  : OpenSSH.Server~~~~0.0.1.0
State : NotPresent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the state under OpenSSH.server is &lt;code&gt;NotPresent&lt;/code&gt;, we need to run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{cmd]&#34; data-lang=&#34;{cmd]&#34;&gt;Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and start the ssh daemon&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{cmd}&#34; data-lang=&#34;{cmd}&#34;&gt;Start-Service sshd
Get-Service sshd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you expect to use the Host more often, you can consider starting the ssh daemon automatically on the host&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{cmd}&#34; data-lang=&#34;{cmd}&#34;&gt;Set-Service -Name sshd -StartupType &#39;Automatic&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we will set the default shell used by OpenSSH to be the one used by wsl&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{cmd}&#34; data-lang=&#34;{cmd}&#34;&gt;New-ItemProperty -Path &amp;quot;HKLM:\SOFTWARE\OpenSSH&amp;quot; -Name DefaultShell -Value &amp;quot;C:\WINDOWS\System32\bash.exe&amp;quot; -PropertyType String -Force
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;make-your-machine-discoverable-over-network&#34;&gt;Make your machine discoverable over network&lt;/h2&gt;
&lt;p&gt;To be able to find your host machine that runs the ssh daemon, you need to make some configurations in the network settings first. On both machines, go to network settings and under &amp;ldquo;network profile&amp;rdquo;, select &amp;ldquo;private network&amp;rdquo;. This will allow both machines to be discoverable on the WiFi network. If all is well, when you open File Explorer, under Network you should see your two machines. If you don&amp;rsquo;t see it, you might need to restart your computer(s), or temporary turn off Windows firewall.&lt;/p&gt;
&lt;h2 id=&#34;preparing-to-copy&#34;&gt;Preparing to copy&lt;/h2&gt;
&lt;p&gt;Now that this is all set-up, you should be able to ssh into your host computer via&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{bash}&#34; data-lang=&#34;{bash}&#34;&gt;ssh user@host
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where &lt;code&gt;user&lt;/code&gt; is your Windows login username (not your wsl linux username), and &lt;code&gt;host&lt;/code&gt; is your host computer&amp;rsquo;s local private ip address that looks like &lt;code&gt;192.168.x.x&lt;/code&gt; or &lt;code&gt;172.x.x.x&lt;/code&gt;. You can get the ip address by either running &lt;code&gt;ifconfig eth0&lt;/code&gt; in your terminal, or by opening your Windows Network Settings (win-key &amp;gt; &amp;ldquo;network settings&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;If you do not manage to connect, make sure the ssh daemon is running on your host computer by running &lt;code&gt;sudo service ssh status&lt;/code&gt;. If it is not running you can start it with &lt;code&gt;sudo service ssh start&lt;/code&gt;. If you still cannot connect, try to open port 22 in your firewall on the host computer, or temporary turn off Windows firewall.&lt;/p&gt;
&lt;p&gt;If all is correct you should get inside your host&amp;rsquo;s wsl partition directly.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>elements</title>
      <link>https://rsokolewicz.github.io/posts/1_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rsokolewicz.github.io/posts/1_elements/</guid>
      <description>Table of contents  Table of contents Text Code  Python C/C++ Bash   Tables  Text Some example text
Code Python def foo(): print (&amp;#34;This is a python function&amp;#34;) C/C++ void foo(){ prinf(&amp;#34;%s\n&amp;#34;, &amp;#34;This is a C function&amp;#34;) } Bash # This is a bash command cd dir &amp;amp;&amp;amp; echo $PWD; # Return exit 0; Tables    Pages Elements     1 Text   2 Code   3 Tables    </description>
      <content>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#table-of-contents&#34;&gt;Table of contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#text&#34;&gt;Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code&#34;&gt;Code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cc&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bash&#34;&gt;Bash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tables&#34;&gt;Tables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;text&#34;&gt;Text&lt;/h2&gt;
&lt;p&gt;Some example text&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a python function&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cc&#34;&gt;C/C++&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(){
    prinf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a C function&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bash&#34;&gt;Bash&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is a bash command&lt;/span&gt;
cd dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo $PWD;

&lt;span style=&#34;color:#75715e&#34;&gt;# Return&lt;/span&gt;
exit 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tables&#34;&gt;Tables&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pages&lt;/th&gt;
&lt;th&gt;Elements&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Tables&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    </item>
    
  </channel>
</rss>
